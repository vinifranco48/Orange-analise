<?xml version='1.0' encoding='utf-8'?>
<scheme version="2.0" title="" description="">
	<nodes>
		<node id="0" name="File" qualified_name="Orange.widgets.data.owfile.OWFile" project_name="Orange3" version="" title="File" position="(167.0, 113.0)" />
		<node id="1" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table" position="(365.0, 113.0)" />
		<node id="2" name="Bar Plot" qualified_name="Orange.widgets.visualize.owbarplot.OWBarPlot" project_name="Orange3" version="" title="Bar Plot" position="(801.0, 312.0)" />
		<node id="3" name="Distributions" qualified_name="Orange.widgets.visualize.owdistributions.OWDistributions" project_name="Orange3" version="" title="Distributions" position="(823.0, 209.0)" />
		<node id="4" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script" position="(764.0, 7.0)" />
		<node id="5" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (1)" position="(794.0, 68.0)" />
		<node id="6" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="inadiplentes" position="(804.0, 132.0)" />
		<node id="7" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (2)" position="(772.0, 390.0)" />
		<node id="8" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (3)" position="(742.0, 470.0)" />
		<node id="9" name="Feature Statistics" qualified_name="Orange.widgets.data.owfeaturestatistics.OWFeatureStatistics" project_name="Orange3" version="" title="Feature Statistics" position="(630.0, 505.0)" />
		<node id="10" name="File" qualified_name="Orange.widgets.data.owfile.OWFile" project_name="Orange3" version="" title="File (1)" position="(317.0, 805.0)" />
		<node id="11" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table (1)" position="(499.0, 807.0)" />
		<node id="12" name="Data Sampler" qualified_name="Orange.widgets.data.owdatasampler.OWDataSampler" project_name="Orange3" version="" title="Data Sampler" position="(811.0, 806.0)" />
		<node id="13" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table (2)" position="(992.0, 809.0)" />
		<node id="14" name="Select Columns" qualified_name="Orange.widgets.data.owselectcolumns.OWSelectAttributes" project_name="Orange3" version="" title="Select Columns" position="(657.0, 812.0)" />
		<node id="15" name="Select Columns" qualified_name="Orange.widgets.data.owselectcolumns.OWSelectAttributes" project_name="Orange3" version="" title="Select Columns (1)" position="(1096.0, 680.0)" />
		<node id="16" name="Discretize" qualified_name="Orange.widgets.data.owdiscretize.OWDiscretize" project_name="Orange3" version="" title="Discretize" position="(1247.0, 680.0)" />
		<node id="17" name="Select Columns" qualified_name="Orange.widgets.data.owselectcolumns.OWSelectAttributes" project_name="Orange3" version="" title="Select Columns (2)" position="(1106.0, 912.0)" />
		<node id="18" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (4)" position="(1239.0, 912.0)" />
		<node id="19" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table (3)" position="(1313.0, 549.0)" />
	</nodes>
	<links>
		<link id="0" source_node_id="0" sink_node_id="1" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="1" source_node_id="1" sink_node_id="2" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="2" source_node_id="1" sink_node_id="3" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="3" source_node_id="1" sink_node_id="4" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="4" source_node_id="1" sink_node_id="5" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="5" source_node_id="1" sink_node_id="6" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="6" source_node_id="1" sink_node_id="7" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="7" source_node_id="1" sink_node_id="8" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="8" source_node_id="1" sink_node_id="9" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="9" source_node_id="10" sink_node_id="11" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="10" source_node_id="11" sink_node_id="14" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="11" source_node_id="14" sink_node_id="12" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="12" source_node_id="12" sink_node_id="13" source_channel="Data Sample" sink_channel="Data" enabled="true" source_channel_id="data_sample" sink_channel_id="data" />
		<link id="13" source_node_id="13" sink_node_id="15" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="14" source_node_id="15" sink_node_id="16" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="15" source_node_id="13" sink_node_id="17" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="16" source_node_id="17" sink_node_id="18" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="17" source_node_id="16" sink_node_id="19" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
	</links>
	<annotations />
	<thumbnail />
	<node_properties>
		<properties node_id="0" format="pickle">gASVAysAAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjAxyZWNlbnRfcGF0aHOUXZQojB5v
cmFuZ2V3aWRnZXQudXRpbHMuZmlsZWRpYWxvZ3OUjApSZWNlbnRQYXRolJOUKYGUfZQojAdhYnNw
YXRolIw/QzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9Eb2N1bWVudHMvcmlzay1jcmVkaXQvbm90ZWJv
b2tzL3Jpc2suY3N2lIwGcHJlZml4lE6MB3JlbHBhdGiUTowFdGl0bGWUjACUjAVzaGVldJRoDowL
ZmlsZV9mb3JtYXSUTnViaAYpgZR9lChoCYxhQzovVW5pYmFsc2FzL1RyYWJhbGhvcy8yMDI0LjIv
SW50ZWxpZ2VuY2lhIGRvcyBuZWdvY2lvcy9URUQgMS9kYWRvcy90YWJlbGFfY3VzdG9fZGVfdmlk
YV8yMDE0LmNzdpRoC05oDE5oDWgOaA9oDmgQTnViaAYpgZR9lChoCYxhQzovVW5pYmFsc2FzL1Ry
YWJhbGhvcy8yMDI0LjIvSW50ZWxpZ2VuY2lhIGRvcyBuZWdvY2lvcy9URUQgMS9kYWRvcy90YWJl
bGFfY3VzdG9fZGVfdmlkYV8yMDE4LmNzdpRoC05oDE5oDWgOaA9oDmgQTnViaAYpgZR9lChoCYxh
QzovVW5pYmFsc2FzL1RyYWJhbGhvcy8yMDI0LjIvSW50ZWxpZ2VuY2lhIGRvcyBuZWdvY2lvcy9U
RUQgMS9kYWRvcy90YWJlbGFfY3VzdG9fZGVfdmlkYV8yMDIxLmNzdpRoC05oDE5oDWgOaA9oDmgQ
TnViaAYpgZR9lChoCYxBQzovVXNlcnMvTXBlZHIvRG93bmxvYWRzL0Nvc3Rfb2ZfTGl2aW5nX0lu
ZGV4X2J5X0NvdW50cnlfMjAyNC5jc3aUaAuMB2Jhc2VkaXKUaAyMKENvc3Rfb2ZfTGl2aW5nX0lu
ZGV4X2J5X0NvdW50cnlfMjAyNC5jc3aUaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMX0M6L1VzZXJz
L0dyYcO6bmEgTW90b3MvQXBwRGF0YS9Mb2NhbC9Qcm9ncmFtcy9PcmFuZ2UvTGliL3NpdGUtcGFj
a2FnZXMvT3JhbmdlL2RhdGFzZXRzL2lyaXMudGFilGgLjA9zYW1wbGUtZGF0YXNldHOUaAyMCGly
aXMudGFilGgNaA5oD2gOaBBOdWJoBimBlH2UKGgJjGJDOi9Vc2Vycy9HcmHDum5hIE1vdG9zL0Fw
cERhdGEvTG9jYWwvUHJvZ3JhbXMvT3JhbmdlL0xpYi9zaXRlLXBhY2thZ2VzL09yYW5nZS9kYXRh
c2V0cy90aXRhbmljLnRhYpRoC2giaAyMC3RpdGFuaWMudGFilGgNaA5oD2gOaBBOdWJoBimBlH2U
KGgJjGJDOi9Vc2Vycy9HcmHDum5hIE1vdG9zL0FwcERhdGEvTG9jYWwvUHJvZ3JhbXMvT3Jhbmdl
L0xpYi9zaXRlLXBhY2thZ2VzL09yYW5nZS9kYXRhc2V0cy9ob3VzaW5nLnRhYpRoC2giaAyMC2hv
dXNpbmcudGFilGgNaA5oD2gOaBBOdWJoBimBlH2UKGgJjGhDOi9Vc2Vycy9HcmHDum5hIE1vdG9z
L0FwcERhdGEvTG9jYWwvUHJvZ3JhbXMvT3JhbmdlL0xpYi9zaXRlLXBhY2thZ2VzL09yYW5nZS9k
YXRhc2V0cy9oZWFydF9kaXNlYXNlLnRhYpRoC2giaAyMEWhlYXJ0X2Rpc2Vhc2UudGFilGgNaA5o
D2gOaBBOdWJoBimBlH2UKGgJjGlDOi9Vc2Vycy9HcmHDum5hIE1vdG9zL0FwcERhdGEvTG9jYWwv
UHJvZ3JhbXMvT3JhbmdlL0xpYi9zaXRlLXBhY2thZ2VzL09yYW5nZS9kYXRhc2V0cy9icm93bi1z
ZWxlY3RlZC50YWKUaAtoImgMjBJicm93bi1zZWxlY3RlZC50YWKUaA1oDmgPaA5oEE51YmgGKYGU
fZQoaAmMXkM6L1VzZXJzL0dyYcO6bmEgTW90b3MvQXBwRGF0YS9Mb2NhbC9Qcm9ncmFtcy9PcmFu
Z2UvTGliL3NpdGUtcGFja2FnZXMvT3JhbmdlL2RhdGFzZXRzL3pvby50YWKUaAtoImgMjAd6b28u
dGFilGgNaA5oD2gOaBBOdWJljAtyZWNlbnRfdXJsc5RdlIwTc2F2ZWRXaWRnZXRHZW9tZXRyeZRD
QgHZ0MsAAwAAAAAAvgAAABAAAAREAAACrwAAAL8AAAAuAAAEQwAAAq4AAAAAAAAAAAUAAAAAvwAA
AC4AAARDAAACrpSMC3NoZWV0X25hbWVzlH2UjAZzb3VyY2WUSwCMA3VybJRoDowNZG9tYWluX2Vk
aXRvcpR9lIwLX192ZXJzaW9uX1+USwGMEGNvbnRleHRfc2V0dGluZ3OUXZQojBVvcmFuZ2V3aWRn
ZXQuc2V0dGluZ3OUjAdDb250ZXh0lJOUKYGUfZQojAZ2YWx1ZXOUfZQojAl2YXJpYWJsZXOUXZRo
QH2UaExdlChdlCiMCWxvYW5fYW1udJSMFE9yYW5nZS5kYXRhLnZhcmlhYmxllIwSQ29udGludW91
c1ZhcmlhYmxllJOUSwBoDohlXZQojAtmdW5kZWRfYW1udJRoVEsAaA6IZV2UKIwEdGVybZRoUowQ
RGlzY3JldGVWYXJpYWJsZZSTlEsAjBQzNiBtb250aHMsIDYwIG1vbnRoc5SJZV2UKIwIaW50X3Jh
dGWUaFRLAGgOiGVdlCiMC2luc3RhbGxtZW50lGhUSwBoDohlXZQojAVncmFkZZRoWksAjBNBLCBC
LCBDLCBELCBFLCBGLCBHlIllXZQojAlzdWJfZ3JhZGWUaFpLAIxTQTEsIEEyLCBBMywgQTQsIEE1
LCBCMSwgQjIsIEIzLCBCNCwgQjUsIEMxLCBDMiwgQzMsIEM0LCBDNSwgRDEsIEQyLCBEMywgRDQs
IEQ1LCAuLi6UiWVdlCiMCmVtcF9sZW5ndGiUaFpLAIxjMSB5ZWFyLCAyIHllYXJzLCAzIHllYXJz
LCA0IHllYXJzLCA1IHllYXJzLCA2IHllYXJzLCA3IHllYXJzLCA4IHllYXJzLCA5IHllYXJzLCAx
MCsgeWVhcnMsIDwgMSB5ZWFylIllXZQojA5ob21lX293bmVyc2hpcJRoWksAjBNNT1JUR0FHRSwg
T1dOLCBSRU5UlIllXZQojAphbm51YWxfaW5jlGhUSwBoDohlXZQojBN2ZXJpZmljYXRpb25fc3Rh
dHVzlGhaSwCMJ05vdCBWZXJpZmllZCwgU291cmNlIFZlcmlmaWVkLCBWZXJpZmllZJSJZV2UKIwH
aXNzdWVfZJRoWksAjBZEZWMtMTEsIE5vdi0xMSwgT2N0LTExlIllXZQojAtsb2FuX3N0YXR1c5Ro
WksAjGFDaGFyZ2VkIE9mZiwgQ3VycmVudCwgRGVmYXVsdCwgRnVsbHkgUGFpZCwgSW4gR3JhY2Ug
UGVyaW9kLCBMYXRlICgxNi0zMCBkYXlzKSwgTGF0ZSAoMzEtMTIwIGRheXMplIllXZQojAdwdXJw
b3NllGhaSwCMmmNhciwgY3JlZGl0X2NhcmQsIGRlYnRfY29uc29saWRhdGlvbiwgaG9tZV9pbXBy
b3ZlbWVudCwgaG91c2UsIG1ham9yX3B1cmNoYXNlLCBtZWRpY2FsLCBtb3ZpbmcsIG90aGVyLCBy
ZW5ld2FibGVfZW5lcmd5LCBzbWFsbF9idXNpbmVzcywgdmFjYXRpb24sIHdlZGRpbmeUiWVdlCiM
CmFkZHJfc3RhdGWUaFpLAIxTQUssIEFMLCBBUiwgQVosIENBLCBDTywgQ1QsIERDLCBERSwgRkws
IEdBLCBISSwgSUwsIEtTLCBLWSwgTEEsIE1BLCBNRCwgTUksIE1OLCAuLi6UiWVdlCiMA2R0aZRo
VEsAaA6IZV2UKIwLZGVsaW5xXzJ5cnOUaFRLAGgOiGVdlCiMDmlucV9sYXN0XzZtdGhzlGhUSwBo
DohlXZQojBZtdGhzX3NpbmNlX2xhc3RfZGVsaW5xlGhUSwBoDohlXZQojBZtdGhzX3NpbmNlX2xh
c3RfcmVjb3JklGhUSwBoDohlXZQojAhvcGVuX2FjY5RoVEsAaA6IZV2UKIwHcHViX3JlY5RoVEsA
aA6IZV2UKIwJcmV2b2xfYmFslGhUSwBoDohlXZQojApyZXZvbF91dGlslGhUSwBoDohlXZQojAl0
b3RhbF9hY2OUaFRLAGgOiGVdlCiME2luaXRpYWxfbGlzdF9zdGF0dXOUaFpLAIwBZpSJZV2UKIwJ
b3V0X3BybmNwlGhUSwBoDohlXZQojAt0b3RhbF9weW1udJRoVEsAaA6IZV2UKIwPdG90YWxfcmVj
X3BybmNwlGhUSwBoDohlXZQojA10b3RhbF9yZWNfaW50lGhUSwBoDohlXZQojBJ0b3RhbF9yZWNf
bGF0ZV9mZWWUaFRLAGgOiGVdlCiMCnJlY292ZXJpZXOUaFRLAGgOiGVdlCiMF2NvbGxlY3Rpb25f
cmVjb3ZlcnlfZmVllGhUSwBoDohlXZQojAxsYXN0X3B5bW50X2SUaFpLAIyjQXByLTEyLCBBcHIt
MTMsIEFwci0xNCwgQXByLTE1LCBBdWctMTIsIEF1Zy0xMywgQXVnLTE0LCBBdWctMTUsIERlYy0x
MSwgRGVjLTEyLCBEZWMtMTMsIERlYy0xNCwgRGVjLTE1LCBGZWItMTIsIEZlYi0xMywgRmViLTE0
LCBGZWItMTUsIEphbi0xMiwgSmFuLTEzLCBKYW4tMTQsIC4uLpSJZV2UKIwPbGFzdF9weW1udF9h
bW50lGhUSwBoDohlXZQojBpjb2xsZWN0aW9uc18xMl9tdGhzX2V4X21lZJRoWksAjAMwLjCUiGVd
lCiMG210aHNfc2luY2VfbGFzdF9tYWpvcl9kZXJvZ5RoVEsAaA6IZV2UKIwQYW5udWFsX2luY19q
b2ludJRoVEsAaA6IZV2UKIwJZHRpX2pvaW50lGhUSwBoDohlXZQojBl2ZXJpZmljYXRpb25fc3Rh
dHVzX2pvaW50lGhUSwBoDohlXZQojA5hY2Nfbm93X2RlbGlucZRoWksAjAMwLjCUiGVdlCiMDHRv
dF9jb2xsX2FtdJRoVEsAaA6IZV2UKIwLdG90X2N1cl9iYWyUaFRLAGgOiGVdlCiMC29wZW5fYWNj
XzZtlGhUSwBoDohlXZQojApvcGVuX2lsXzZtlGhUSwBoDohlXZQojAtvcGVuX2lsXzEybZRoVEsA
aA6IZV2UKIwLb3Blbl9pbF8yNG2UaFRLAGgOiGVdlCiMEm10aHNfc2luY2VfcmNudF9pbJRoVEsA
aA6IZV2UKIwMdG90YWxfYmFsX2lslGhUSwBoDohlXZQojAdpbF91dGlslGhUSwBoDohlXZQojAtv
cGVuX3J2XzEybZRoVEsAaA6IZV2UKIwLb3Blbl9ydl8yNG2UaFRLAGgOiGVdlCiMCm1heF9iYWxf
YmOUaFRLAGgOiGVdlCiMCGFsbF91dGlslGhUSwBoDohlXZQojBB0b3RhbF9yZXZfaGlfbGltlGhU
SwBoDohlXZQojAZpbnFfZmmUaFRLAGgOiGVdlCiMC3RvdGFsX2N1X3RslGhUSwBoDohlXZQojAxp
bnFfbGFzdF8xMm2UaFRLAGgOiGVdlCiMCGdvb2RfYmFklGhaSwGMBDAsIDGUiGVdlCiMBGRlc2OU
aFKMDlN0cmluZ1ZhcmlhYmxllJOUSwJoDollXZQojBBlYXJsaWVzdF9jcl9saW5llGjdSwJoDoll
ZXNoQksBdYwKYXR0cmlidXRlc5QoaFFLAoaUaFZLAoaUaFhdlCiMCTM2IG1vbnRoc5SMCTYwIG1v
bnRoc5RlhpRoXUsChpRoX0sChpRoYV2UKIwBQZSMAUKUjAFDlIwBRJSMAUWUjAFGlIwBR5RlhpRo
ZF2UKIwCQTGUjAJBMpSMAkEzlIwCQTSUjAJBNZSMAkIxlIwCQjKUjAJCM5SMAkI0lIwCQjWUjAJD
MZSMAkMylIwCQzOUjAJDNJSMAkM1lIwCRDGUjAJEMpSMAkQzlIwCRDSUjAJENZSMAkUxlIwCRTKU
jAJFM5SMAkU0lIwCRTWUjAJGMZSMAkYylIwCRjOUjAJGNJSMAkY1lIwCRzGUjAJHMpSMAkczlIwC
RzSUjAJHNZRlhpRoZ12UKIwGMSB5ZWFylIwHMiB5ZWFyc5SMBzMgeWVhcnOUjAc0IHllYXJzlIwH
NSB5ZWFyc5SMBzYgeWVhcnOUjAc3IHllYXJzlIwHOCB5ZWFyc5SMBzkgeWVhcnOUjAkxMCsgeWVh
cnOUjAg8IDEgeWVhcpRlhpRoal2UKIwITU9SVEdBR0WUjANPV06UjARSRU5UlGWGlGhtSwKGlGhv
XZQojAxOb3QgVmVyaWZpZWSUjA9Tb3VyY2UgVmVyaWZpZWSUjAhWZXJpZmllZJRlhpRocl2UKIwG
RGVjLTExlIwGTm92LTExlIwGT2N0LTExlGWGlGh1XZQojAtDaGFyZ2VkIE9mZpSMB0N1cnJlbnSU
jAdEZWZhdWx0lIwKRnVsbHkgUGFpZJSMD0luIEdyYWNlIFBlcmlvZJSMEUxhdGUgKDE2LTMwIGRh
eXMplIwSTGF0ZSAoMzEtMTIwIGRheXMplGWGlGh4XZQojANjYXKUjAtjcmVkaXRfY2FyZJSMEmRl
YnRfY29uc29saWRhdGlvbpSMEGhvbWVfaW1wcm92ZW1lbnSUjAVob3VzZZSMDm1ham9yX3B1cmNo
YXNllIwHbWVkaWNhbJSMBm1vdmluZ5SMBW90aGVylIwQcmVuZXdhYmxlX2VuZXJneZSMDnNtYWxs
X2J1c2luZXNzlIwIdmFjYXRpb26UjAd3ZWRkaW5nlGWGlGh7XZQojAJBS5SMAkFMlIwCQVKUjAJB
WpSMAkNBlIwCQ0+UjAJDVJSMAkRDlIwCREWUjAJGTJSMAkdBlIwCSEmUjAJJTJSMAktTlIwCS1mU
jAJMQZSMAk1BlIwCTUSUjAJNSZSMAk1OlIwCTU+UjAJNU5SMAk1UlIwCTkOUjAJOSJSMAk5KlIwC
Tk2UjAJOVpSMAk5ZlIwCT0iUjAJPS5SMAk9SlIwCUEGUjAJSSZSMAlNDlIwCU0SUjAJUTpSMAlRY
lIwCVVSUjAJWQZSMAlZUlIwCV0GUjAJXSZSMAldWlIwCV1mUZYaUaH5LAoaUaIBLAoaUaIJLAoaU
aIRLAoaUaIZLAoaUaIhLAoaUaIpLAoaUaIxLAoaUaI5LAoaUaJBLAoaUaJJdlGiTYYaUaJVLAoaU
aJdLAoaUaJlLAoaUaJtLAoaUaJ1LAoaUaJ9LAoaUaKFLAoaUaKNdlCiMBkFwci0xMpSMBkFwci0x
M5SMBkFwci0xNJSMBkFwci0xNZSMBkF1Zy0xMpSMBkF1Zy0xM5SMBkF1Zy0xNJSMBkF1Zy0xNZSM
BkRlYy0xMZSMBkRlYy0xMpSMBkRlYy0xM5SMBkRlYy0xNJSMBkRlYy0xNZSMBkZlYi0xMpSMBkZl
Yi0xM5SMBkZlYi0xNJSMBkZlYi0xNZSMBkphbi0xMpSMBkphbi0xM5SMBkphbi0xNJSMBkphbi0x
NZSMBkphbi0xNpSMBkp1bC0xMpSMBkp1bC0xM5SMBkp1bC0xNJSMBkp1bC0xNZSMBkp1bi0xMpSM
Bkp1bi0xM5SMBkp1bi0xNJSMBkp1bi0xNZSMBk1hci0xMpSMBk1hci0xM5SMBk1hci0xNJSMBk1h
ci0xNZSMBk1heS0xMpSMBk1heS0xM5SMBk1heS0xNJSMBk1heS0xNZSMBk5vdi0xMZSMBk5vdi0x
MpSMBk5vdi0xM5SMBk5vdi0xNJSMBk5vdi0xNZSMBk9jdC0xMpSMBk9jdC0xM5SMBk9jdC0xNJSM
Bk9jdC0xNZSMBlNlcC0xMpSMBlNlcC0xM5SMBlNlcC0xNJSMBlNlcC0xNZRlhpRopksChpRoqF2U
aKlhhpRoq0sChpRorUsChpRor0sChpRosUsChpRos12UaLRhhpRotksChpRouEsChpRouksChpRo
vEsChpRovksChpRowEsChpRowksChpRoxEsChpRoxksChpRoyEsChpRoyksChpRozEsChpRozksC
hpRo0EsChpRo0ksChpRo1EsChpRo1ksChpRo2F2UKIwBMJSMATGUZYaUdJSMBW1ldGFzlGjbSwOG
lGjfSwOGlIaUjApjbGFzc192YXJzlCmMEm1vZGlmaWVkX3ZhcmlhYmxlc5RdlHViaEcpgZR9lCho
Sn2UKIwJdmFyaWFibGVzlF2UjA1kb21haW5fZWRpdG9ylH2UauwBAABdlChdlCiMCWxvYW5fYW1u
dJRoVEsAaA6IZV2UKIwLZnVuZGVkX2FtbnSUaFRLAGgOiGVdlCiMBHRlcm2UaFpLAIwUMzYgbW9u
dGhzLCA2MCBtb250aHOUiWVdlCiMCGludF9yYXRllGhUSwBoDohlXZQojAtpbnN0YWxsbWVudJRo
VEsAaA6IZV2UKIwFZ3JhZGWUaFpLAIwTQSwgQiwgQywgRCwgRSwgRiwgR5SJZV2UKIwJc3ViX2dy
YWRllGhaSwCMU0ExLCBBMiwgQTMsIEE0LCBBNSwgQjEsIEIyLCBCMywgQjQsIEI1LCBDMSwgQzIs
IEMzLCBDNCwgQzUsIEQxLCBEMiwgRDMsIEQ0LCBENSwgLi4ulIllXZQojAplbXBfbGVuZ3RolGha
SwCMYzEgeWVhciwgMiB5ZWFycywgMyB5ZWFycywgNCB5ZWFycywgNSB5ZWFycywgNiB5ZWFycywg
NyB5ZWFycywgOCB5ZWFycywgOSB5ZWFycywgMTArIHllYXJzLCA8IDEgeWVhcpSJZV2UKIwOaG9t
ZV9vd25lcnNoaXCUaFpLAIwaTU9SVEdBR0UsIE9USEVSLCBPV04sIFJFTlSUiWVdlCiMCmFubnVh
bF9pbmOUaFRLAGgOiGVdlCiME3ZlcmlmaWNhdGlvbl9zdGF0dXOUaFpLAIwnTm90IFZlcmlmaWVk
LCBTb3VyY2UgVmVyaWZpZWQsIFZlcmlmaWVklIllXZQojAdpc3N1ZV9klGhaSwCMVkFwci0xMSwg
QXVnLTExLCBEZWMtMTEsIEZlYi0xMSwgSnVsLTExLCBKdW4tMTEsIE1hci0xMSwgTWF5LTExLCBO
b3YtMTEsIE9jdC0xMSwgU2VwLTExlIllXZQojAtsb2FuX3N0YXR1c5RoWksAjGFDaGFyZ2VkIE9m
ZiwgQ3VycmVudCwgRGVmYXVsdCwgRnVsbHkgUGFpZCwgSW4gR3JhY2UgUGVyaW9kLCBMYXRlICgx
Ni0zMCBkYXlzKSwgTGF0ZSAoMzEtMTIwIGRheXMplIllXZQojAdwdXJwb3NllGhaSwCMmmNhciwg
Y3JlZGl0X2NhcmQsIGRlYnRfY29uc29saWRhdGlvbiwgaG9tZV9pbXByb3ZlbWVudCwgaG91c2Us
IG1ham9yX3B1cmNoYXNlLCBtZWRpY2FsLCBtb3ZpbmcsIG90aGVyLCByZW5ld2FibGVfZW5lcmd5
LCBzbWFsbF9idXNpbmVzcywgdmFjYXRpb24sIHdlZGRpbmeUiWVdlCiMCmFkZHJfc3RhdGWUaFpL
AIxTQUssIEFMLCBBUiwgQVosIENBLCBDTywgQ1QsIERDLCBERSwgRkwsIEdBLCBISSwgSUwsIEtT
LCBLWSwgTEEsIE1BLCBNRCwgTUksIE1OLCAuLi6UiWVdlCiMA2R0aZRoVEsAaA6IZV2UKIwLZGVs
aW5xXzJ5cnOUaFRLAGgOiGVdlCiMDmlucV9sYXN0XzZtdGhzlGhUSwBoDohlXZQojBZtdGhzX3Np
bmNlX2xhc3RfZGVsaW5xlGhUSwBoDohlXZQojBZtdGhzX3NpbmNlX2xhc3RfcmVjb3JklGhUSwBo
DohlXZQojAhvcGVuX2FjY5RoVEsAaA6IZV2UKIwHcHViX3JlY5RoVEsAaA6IZV2UKIwJcmV2b2xf
YmFslGhUSwBoDohlXZQojApyZXZvbF91dGlslGhUSwBoDohlXZQojAl0b3RhbF9hY2OUaFRLAGgO
iGVdlCiME2luaXRpYWxfbGlzdF9zdGF0dXOUaFpLAGiTiWVdlCiMCW91dF9wcm5jcJRoVEsAaA6I
ZV2UKIwLdG90YWxfcHltbnSUaFRLAGgOiGVdlCiMD3RvdGFsX3JlY19wcm5jcJRoVEsAaA6IZV2U
KIwNdG90YWxfcmVjX2ludJRoVEsAaA6IZV2UKIwSdG90YWxfcmVjX2xhdGVfZmVllGhUSwBoDohl
XZQojApyZWNvdmVyaWVzlGhUSwBoDohlXZQojBdjb2xsZWN0aW9uX3JlY292ZXJ5X2ZlZZRoVEsA
aA6IZV2UKIwMbGFzdF9weW1udF9klGhaSwCMo0Fwci0xMSwgQXByLTEyLCBBcHItMTMsIEFwci0x
NCwgQXByLTE1LCBBdWctMTEsIEF1Zy0xMiwgQXVnLTEzLCBBdWctMTQsIEF1Zy0xNSwgRGVjLTEx
LCBEZWMtMTIsIERlYy0xMywgRGVjLTE0LCBEZWMtMTUsIEZlYi0xMiwgRmViLTEzLCBGZWItMTQs
IEZlYi0xNSwgSmFuLTEyLCAuLi6UiWVdlCiMD2xhc3RfcHltbnRfYW1udJRoVEsAaA6IZV2UKIwa
Y29sbGVjdGlvbnNfMTJfbXRoc19leF9tZWSUaFpLAIwDMC4wlIhlXZQojBttdGhzX3NpbmNlX2xh
c3RfbWFqb3JfZGVyb2eUaFRLAGgOiGVdlCiMEGFubnVhbF9pbmNfam9pbnSUaFRLAGgOiGVdlCiM
CWR0aV9qb2ludJRoVEsAaA6IZV2UKIwZdmVyaWZpY2F0aW9uX3N0YXR1c19qb2ludJRoVEsAaA6I
ZV2UKIwOYWNjX25vd19kZWxpbnGUaFpLAIwDMC4wlIhlXZQojAx0b3RfY29sbF9hbXSUaFRLAGgO
iGVdlCiMC3RvdF9jdXJfYmFslGhUSwBoDohlXZQojAtvcGVuX2FjY182bZRoVEsAaA6IZV2UKIwK
b3Blbl9pbF82bZRoVEsAaA6IZV2UKIwLb3Blbl9pbF8xMm2UaFRLAGgOiGVdlCiMC29wZW5faWxf
MjRtlGhUSwBoDohlXZQojBJtdGhzX3NpbmNlX3JjbnRfaWyUaFRLAGgOiGVdlCiMDHRvdGFsX2Jh
bF9pbJRoVEsAaA6IZV2UKIwHaWxfdXRpbJRoVEsAaA6IZV2UKIwLb3Blbl9ydl8xMm2UaFRLAGgO
iGVdlCiMC29wZW5fcnZfMjRtlGhUSwBoDohlXZQojAptYXhfYmFsX2JjlGhUSwBoDohlXZQojAhh
bGxfdXRpbJRoVEsAaA6IZV2UKIwQdG90YWxfcmV2X2hpX2xpbZRoVEsAaA6IZV2UKIwGaW5xX2Zp
lGhUSwBoDohlXZQojAt0b3RhbF9jdV90bJRoVEsAaA6IZV2UKIwMaW5xX2xhc3RfMTJtlGhUSwBo
DohlXZQojAhnb29kX2JhZJRoWksBjAQwLCAxlIhlXZQojARkZXNjlGjdSwJoDollXZQojBBlYXJs
aWVzdF9jcl9saW5llGjdSwJoDollZXNoQksBdWjgKGryAQAASwKGlGr0AQAASwKGlGr2AQAAXZQo
jAkzNiBtb250aHOUjAk2MCBtb250aHOUZYaUavkBAABLAoaUavsBAABLAoaUav0BAABdlCho6mjr
aOxo7WjuaO9o8GWGlGoAAgAAXZQojAJBMZSMAkEylIwCQTOUjAJBNJSMAkE1lIwCQjGUjAJCMpSM
AkIzlIwCQjSUjAJCNZSMAkMxlIwCQzKUjAJDM5SMAkM0lIwCQzWUjAJEMZSMAkQylIwCRDOUjAJE
NJSMAkQ1lIwCRTGUjAJFMpSMAkUzlIwCRTSUjAJFNZSMAkYxlIwCRjKUjAJGM5SMAkY0lIwCRjWU
jAJHMZSMAkcylIwCRzOUjAJHNJSMAkc1lGWGlGoDAgAAXZQojAYxIHllYXKUjAcyIHllYXJzlIwH
MyB5ZWFyc5SMBzQgeWVhcnOUjAc1IHllYXJzlIwHNiB5ZWFyc5SMBzcgeWVhcnOUjAc4IHllYXJz
lIwHOSB5ZWFyc5SMCTEwKyB5ZWFyc5SMCDwgMSB5ZWFylGWGlGoGAgAAXZQojAhNT1JUR0FHRZSM
BU9USEVSlIwDT1dOlIwEUkVOVJRlhpRqCQIAAEsChpRqCwIAAF2UKIwMTm90IFZlcmlmaWVklIwP
U291cmNlIFZlcmlmaWVklIwIVmVyaWZpZWSUZYaUag4CAABdlCiMBkFwci0xMZSMBkF1Zy0xMZSM
BkRlYy0xMZSMBkZlYi0xMZSMBkp1bC0xMZSMBkp1bi0xMZSMBk1hci0xMZSMBk1heS0xMZSMBk5v
di0xMZSMBk9jdC0xMZSMBlNlcC0xMZRlhpRqEQIAAF2UKIwLQ2hhcmdlZCBPZmaUjAdDdXJyZW50
lIwHRGVmYXVsdJSMCkZ1bGx5IFBhaWSUjA9JbiBHcmFjZSBQZXJpb2SUjBFMYXRlICgxNi0zMCBk
YXlzKZSMEkxhdGUgKDMxLTEyMCBkYXlzKZRlhpRqFAIAAF2UKIwDY2FylIwLY3JlZGl0X2NhcmSU
jBJkZWJ0X2NvbnNvbGlkYXRpb26UjBBob21lX2ltcHJvdmVtZW50lIwFaG91c2WUjA5tYWpvcl9w
dXJjaGFzZZSMB21lZGljYWyUjAZtb3ZpbmeUjAVvdGhlcpSMEHJlbmV3YWJsZV9lbmVyZ3mUjA5z
bWFsbF9idXNpbmVzc5SMCHZhY2F0aW9ulIwHd2VkZGluZ5RlhpRqFwIAAF2UKIwCQUuUjAJBTJSM
AkFSlIwCQVqUjAJDQZSMAkNPlIwCQ1SUjAJEQ5SMAkRFlIwCRkyUjAJHQZSMAkhJlIwCSUyUjAJL
U5SMAktZlIwCTEGUjAJNQZSMAk1ElIwCTUmUjAJNTpSMAk1PlIwCTVOUjAJNVJSMAk5DlIwCTkiU
jAJOSpSMAk5NlIwCTlaUjAJOWZSMAk9IlIwCT0uUjAJPUpSMAlBBlIwCUkmUjAJTQ5SMAlNElIwC
VE6UjAJUWJSMAlVUlIwCVkGUjAJWVJSMAldBlIwCV0mUjAJXVpSMAldZlGWGlGoaAgAASwKGlGoc
AgAASwKGlGoeAgAASwKGlGogAgAASwKGlGoiAgAASwKGlGokAgAASwKGlGomAgAASwKGlGooAgAA
SwKGlGoqAgAASwKGlGosAgAASwKGlGouAgAAXZRok2GGlGowAgAASwKGlGoyAgAASwKGlGo0AgAA
SwKGlGo2AgAASwKGlGo4AgAASwKGlGo6AgAASwKGlGo8AgAASwKGlGo+AgAAXZQojAZBcHItMTGU
jAZBcHItMTKUjAZBcHItMTOUjAZBcHItMTSUjAZBcHItMTWUjAZBdWctMTGUjAZBdWctMTKUjAZB
dWctMTOUjAZBdWctMTSUjAZBdWctMTWUjAZEZWMtMTGUjAZEZWMtMTKUjAZEZWMtMTOUjAZEZWMt
MTSUjAZEZWMtMTWUjAZGZWItMTKUjAZGZWItMTOUjAZGZWItMTSUjAZGZWItMTWUjAZKYW4tMTKU
jAZKYW4tMTOUjAZKYW4tMTSUjAZKYW4tMTWUjAZKYW4tMTaUjAZKdWwtMTGUjAZKdWwtMTKUjAZK
dWwtMTOUjAZKdWwtMTSUjAZKdWwtMTWUjAZKdW4tMTGUjAZKdW4tMTKUjAZKdW4tMTOUjAZKdW4t
MTSUjAZKdW4tMTWUjAZNYXItMTGUjAZNYXItMTKUjAZNYXItMTOUjAZNYXItMTSUjAZNYXItMTWU
jAZNYXktMTGUjAZNYXktMTKUjAZNYXktMTOUjAZNYXktMTSUjAZNYXktMTWUjAZOb3YtMTGUjAZO
b3YtMTKUjAZOb3YtMTOUjAZOb3YtMTSUjAZOb3YtMTWUjAZPY3QtMTGUjAZPY3QtMTKUjAZPY3Qt
MTOUjAZPY3QtMTSUjAZPY3QtMTWUjAZTZXAtMTGUjAZTZXAtMTKUjAZTZXAtMTOUjAZTZXAtMTSU
jAZTZXAtMTWUZYaUakECAABLAoaUakMCAABdlGpEAgAAYYaUakYCAABLAoaUakgCAABLAoaUakoC
AABLAoaUakwCAABLAoaUak4CAABdlGpPAgAAYYaUalECAABLAoaUalMCAABLAoaUalUCAABLAoaU
alcCAABLAoaUalkCAABLAoaUalsCAABLAoaUal0CAABLAoaUal8CAABLAoaUamECAABLAoaUamMC
AABLAoaUamUCAABLAoaUamcCAABLAoaUamkCAABLAoaUamsCAABLAoaUam0CAABLAoaUam8CAABL
AoaUanECAABLAoaUanMCAABdlChq3gEAAGrfAQAAZYaUdJRq4gEAAGp2AgAASwOGlGp4AgAASwOG
lIaUauYBAAApaucBAABdlHViZXUu
</properties>
		<properties node_id="1" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf9u\x00\x00\x00\xf9\xff\xff\xff\r\x00\x00\x02\xec\xff\xff\xf9v\x00\x00\x01\x0e\xff\xff\xff\x0c\x00\x00\x02\xeb\x00\x00\x00\x01\x00\x00\x00\x00\x07\x80\xff\xff\xf9v\x00\x00\x01\x0e\xff\xff\xff\x0c\x00\x00\x02\xeb', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rows': [], 'columns': []}, 'stored_sort': [('purpose', 1)], '__version__': 1}</properties>
		<properties node_id="2" format="pickle">gASVqgUAAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNzYXZl
ZFdpZGdldEdlb21ldHJ5lENCAdnQywADAAAAAAABAAAAEAAABQAAAAKvAAAAAgAAAC4AAAT/AAAC
rgAAAAAAAAAABQAAAAACAAAALgAABP8AAAKulIwJc2VsZWN0aW9ulE6MD3Zpc3VhbF9zZXR0aW5n
c5R9lIwFZ3JhcGiUfZSMC19fdmVyc2lvbl9flEsBjBBjb250ZXh0X3NldHRpbmdzlF2UjBVvcmFu
Z2V3aWRnZXQuc2V0dGluZ3OUjAdDb250ZXh0lJOUKYGUfZQojAZ2YWx1ZXOUfZQojAlhbm5vdF92
YXKUTkr+////hpSMCWNvbG9yX3ZhcpSMCmVtcF9sZW5ndGiUS2WGlIwJZ3JvdXBfdmFylE5K/v//
/4aUjAxzZWxlY3RlZF92YXKUjAhpbnRfcmF0ZZRLZoaUaAh9lGgKSwF1jAphdHRyaWJ1dGVzlH2U
KIwJbG9hbl9hbW50lEsCjAtmdW5kZWRfYW1udJRLAowEdGVybZRLAYwIaW50X3JhdGWUSwKMC2lu
c3RhbGxtZW50lEsCjAVncmFkZZRLAYwJc3ViX2dyYWRllEsBjAplbXBfbGVuZ3RolEsBjA5ob21l
X293bmVyc2hpcJRLAYwKYW5udWFsX2luY5RLAowTdmVyaWZpY2F0aW9uX3N0YXR1c5RLAYwHaXNz
dWVfZJRLAYwLbG9hbl9zdGF0dXOUSwGMB3B1cnBvc2WUSwGMCmFkZHJfc3RhdGWUSwGMA2R0aZRL
AowLZGVsaW5xXzJ5cnOUSwKMDmlucV9sYXN0XzZtdGhzlEsCjBZtdGhzX3NpbmNlX2xhc3RfZGVs
aW5xlEsCjBZtdGhzX3NpbmNlX2xhc3RfcmVjb3JklEsCjAhvcGVuX2FjY5RLAowHcHViX3JlY5RL
AowJcmV2b2xfYmFslEsCjApyZXZvbF91dGlslEsCjAl0b3RhbF9hY2OUSwKME2luaXRpYWxfbGlz
dF9zdGF0dXOUSwGMCW91dF9wcm5jcJRLAowLdG90YWxfcHltbnSUSwKMD3RvdGFsX3JlY19wcm5j
cJRLAowNdG90YWxfcmVjX2ludJRLAowSdG90YWxfcmVjX2xhdGVfZmVllEsCjApyZWNvdmVyaWVz
lEsCjBdjb2xsZWN0aW9uX3JlY292ZXJ5X2ZlZZRLAowMbGFzdF9weW1udF9klEsBjA9sYXN0X3B5
bW50X2FtbnSUSwKMGmNvbGxlY3Rpb25zXzEyX210aHNfZXhfbWVklEsBjBttdGhzX3NpbmNlX2xh
c3RfbWFqb3JfZGVyb2eUSwKMEGFubnVhbF9pbmNfam9pbnSUSwKMCWR0aV9qb2ludJRLAowZdmVy
aWZpY2F0aW9uX3N0YXR1c19qb2ludJRLAowOYWNjX25vd19kZWxpbnGUSwGMDHRvdF9jb2xsX2Ft
dJRLAowLdG90X2N1cl9iYWyUSwKMC29wZW5fYWNjXzZtlEsCjApvcGVuX2lsXzZtlEsCjAtvcGVu
X2lsXzEybZRLAowLb3Blbl9pbF8yNG2USwKMEm10aHNfc2luY2VfcmNudF9pbJRLAowMdG90YWxf
YmFsX2lslEsCjAdpbF91dGlslEsCjAtvcGVuX3J2XzEybZRLAowLb3Blbl9ydl8yNG2USwKMCm1h
eF9iYWxfYmOUSwKMCGFsbF91dGlslEsCjBB0b3RhbF9yZXZfaGlfbGltlEsCjAZpbnFfZmmUSwKM
C3RvdGFsX2N1X3RslEsCjAxpbnFfbGFzdF8xMm2USwKMCGdvb2RfYmFklEsBdYwFbWV0YXOUfZQo
jARkZXNjlEsDjBBlYXJsaWVzdF9jcl9saW5llEsDdXViYXUu
</properties>
		<properties node_id="3" format="pickle">gASV8wUAAAAAAAB9lCiMCmF1dG9fYXBwbHmUiIwSY29udHJvbEFyZWFWaXNpYmxllIiMEGN1bXVs
YXRpdmVfZGlzdHKUiYwTZml0dGVkX2Rpc3RyaWJ1dGlvbpRLB4wJaGlkZV9iYXJzlImMDWtkZV9z
bW9vdGhpbmeUSwqME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAAAAAAEAAAAQAAAFAAAA
Aq8AAAACAAAALgAABP8AAAKuAAAAAAAAAAAFAAAAAAIAAAAuAAAE/wAAAq6UjApzaG93X3Byb2Jz
lImMDHNvcnRfYnlfZnJlcZSJjA9zdGFja2VkX2NvbHVtbnOUiYwLX192ZXJzaW9uX1+USwKMEGNv
bnRleHRfc2V0dGluZ3OUXZSMFW9yYW5nZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9
lCiMBnZhbHVlc5R9lCiMBGN2YXKUjAhnb29kX2JhZJRLZYaUjA5udW1iZXJfb2ZfYmluc5RLAEr+
////hpSMDXNlbGVjdGVkX2JhcnOUj5RK/v///4aUjAN2YXKUjAplbXBfbGVuZ3RolEtlhpRoDEsC
dYwKYXR0cmlidXRlc5R9lCiMCWxvYW5fYW1udJRLAowLZnVuZGVkX2FtbnSUSwKMBHRlcm2USwGM
CGludF9yYXRllEsCjAtpbnN0YWxsbWVudJRLAowFZ3JhZGWUSwGMCXN1Yl9ncmFkZZRLAYwKZW1w
X2xlbmd0aJRLAYwOaG9tZV9vd25lcnNoaXCUSwGMCmFubnVhbF9pbmOUSwKME3ZlcmlmaWNhdGlv
bl9zdGF0dXOUSwGMB2lzc3VlX2SUSwGMC2xvYW5fc3RhdHVzlEsBjAdwdXJwb3NllEsBjAphZGRy
X3N0YXRllEsBjANkdGmUSwKMC2RlbGlucV8yeXJzlEsCjA5pbnFfbGFzdF82bXRoc5RLAowWbXRo
c19zaW5jZV9sYXN0X2RlbGlucZRLAowWbXRoc19zaW5jZV9sYXN0X3JlY29yZJRLAowIb3Blbl9h
Y2OUSwKMB3B1Yl9yZWOUSwKMCXJldm9sX2JhbJRLAowKcmV2b2xfdXRpbJRLAowJdG90YWxfYWNj
lEsCjBNpbml0aWFsX2xpc3Rfc3RhdHVzlEsBjAlvdXRfcHJuY3CUSwKMC3RvdGFsX3B5bW50lEsC
jA90b3RhbF9yZWNfcHJuY3CUSwKMDXRvdGFsX3JlY19pbnSUSwKMEnRvdGFsX3JlY19sYXRlX2Zl
ZZRLAowKcmVjb3Zlcmllc5RLAowXY29sbGVjdGlvbl9yZWNvdmVyeV9mZWWUSwKMDGxhc3RfcHlt
bnRfZJRLAYwPbGFzdF9weW1udF9hbW50lEsCjBpjb2xsZWN0aW9uc18xMl9tdGhzX2V4X21lZJRL
AYwbbXRoc19zaW5jZV9sYXN0X21ham9yX2Rlcm9nlEsCjBBhbm51YWxfaW5jX2pvaW50lEsCjAlk
dGlfam9pbnSUSwKMGXZlcmlmaWNhdGlvbl9zdGF0dXNfam9pbnSUSwKMDmFjY19ub3dfZGVsaW5x
lEsBjAx0b3RfY29sbF9hbXSUSwKMC3RvdF9jdXJfYmFslEsCjAtvcGVuX2FjY182bZRLAowKb3Bl
bl9pbF82bZRLAowLb3Blbl9pbF8xMm2USwKMC29wZW5faWxfMjRtlEsCjBJtdGhzX3NpbmNlX3Jj
bnRfaWyUSwKMDHRvdGFsX2JhbF9pbJRLAowHaWxfdXRpbJRLAowLb3Blbl9ydl8xMm2USwKMC29w
ZW5fcnZfMjRtlEsCjAptYXhfYmFsX2JjlEsCjAhhbGxfdXRpbJRLAowQdG90YWxfcmV2X2hpX2xp
bZRLAowGaW5xX2ZplEsCjAt0b3RhbF9jdV90bJRLAowMaW5xX2xhc3RfMTJtlEsCjAhnb29kX2Jh
ZJRLAXWMBW1ldGFzlH2UKIwEZGVzY5RLA4wQZWFybGllc3RfY3JfbGluZZRLA3V1YmF1Lg==
</properties>
		<properties node_id="4" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xff\xff\xff\xff\xff\xf9\x00\x00\x05\x00\x00\x00\x02\xa0\x00\x00\x01\xae\x00\x00\x00\xc5\x00\x00\x05\x80\x00\x00\x03\x9b\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x04\xff\x00\x00\x02\x9f', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndef plot_woe_bad_rate_by_variable(in_data, target_variable=\'purpose\', outcome_variable=None, figsize=(20, 12)):\n    try:\n        # Get the purpose variable from the domain\n        purpose_var = in_data.domain[target_variable]\n        if not isinstance(purpose_var, DiscreteVariable):\n            raise ValueError(f"The \'{target_variable}\' variable must be a DiscreteVariable.")\n        \n        # Create a dictionary to map numeric values to purpose names\n        purpose_mapping = {i: value for i, value in enumerate(purpose_var.values)}\n        \n        # Print purpose mapping for verification\n        print("Purpose Mapping:")\n        for key, value in purpose_mapping.items():\n            print(f"{key}: {value}")\n        \n        # Convert Orange data to pandas DataFrame\n        data = pd.DataFrame({\n            var.name: in_data.get_column(var.name)\n            for var in in_data.domain.variables\n        })\n        \n        # Print the first few rows of the DataFrame for verification\n        print("\\nFirst few rows of the DataFrame:")\n        print(data.head())\n        \n        # If outcome_variable is not specified or not in columns, use the last column\n        if outcome_variable is None or outcome_variable not in data.columns:\n            outcome_variable = data.columns[-1]\n        \n        print(f"\\nOutcome variable: {outcome_variable}")\n        \n        # Create \'Good\' and \'Bad\' columns based on the outcome variable\n        median = data[outcome_variable].median()\n        data[\'Good\'] = (data[outcome_variable] &gt;= median).astype(int)\n        data[\'Bad\'] = (data[outcome_variable] &lt; median).astype(int)\n        \n        # Calculate WoE and other metrics\n        grouped = data.groupby(target_variable).agg({\n            \'Good\': \'sum\',\n            \'Bad\': \'sum\'\n        }).reset_index()\n        \n        grouped[\'Total\'] = grouped[\'Good\'] + grouped[\'Bad\']\n        grouped[\'GoodRate\'] = grouped[\'Good\'] / grouped[\'Total\']\n        grouped[\'BadRate\'] = grouped[\'Bad\'] / grouped[\'Total\']\n        \n        total_good = grouped[\'Good\'].sum()\n        total_bad = grouped[\'Bad\'].sum()\n        \n        grouped[\'WoE\'] = np.log((grouped[\'GoodRate\'] / (total_good / grouped[\'Total\'].sum())) / \n                                (grouped[\'BadRate\'] / (total_bad / grouped[\'Total\'].sum())))\n        \n        # Map numeric purposes to their descriptions\n        grouped[\'purpose_description\'] = grouped[target_variable].map(purpose_mapping)\n        \n        # Print grouped data for verification\n        print("\\nGrouped data:")\n        print(grouped)\n        \n        # Sort by WoE for better visualization\n        grouped = grouped.sort_values(\'WoE\')\n        \n        purposes = grouped[\'purpose_description\']\n        woe = grouped[\'WoE\']\n        good_rate = grouped[\'GoodRate\'] * 100\n        bad_rate = grouped[\'BadRate\'] * 100\n        \n        # Create the plot\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)\n        \n        # Stacked bar chart\n        ax1.barh(purposes, bad_rate, label=\'Bad\', color=\'#FF9999\')\n        ax1.barh(purposes, good_rate, left=bad_rate, label=\'Good\', color=\'#66B2FF\')\n        \n        ax1.set_title(\'Good/Bad Rate by Purpose\')\n        ax1.set_xlabel(\'Percentage\')\n        ax1.set_ylabel(\'Purpose\')\n        ax1.legend(loc=\'lower right\')\n        \n        # Add percentage labels\n        for i, (bad, good) in enumerate(zip(bad_rate, good_rate)):\n            ax1.text(bad/2, i, f\'{bad:.1f}%\', va=\'center\', ha=\'center\')\n            ax1.text(bad + good/2, i, f\'{good:.1f}%\', va=\'center\', ha=\'center\')\n        \n        # WoE chart\n        ax2.plot(woe, purposes, marker=\'o\')\n        ax2.set_title(\'Weight of Evidence (WoE) by Purpose\')\n        ax2.set_xlabel(\'WoE\')\n        ax2.set_ylabel(\'Purpose\')\n        ax2.axvline(x=0, color=\'r\', linestyle=\'--\')\n        \n        # Add WoE values as text\n        for i, (purpose, w) in enumerate(zip(purposes, woe)):\n            ax2.text(w, i, f\'{w:.2f}\', va=\'center\', ha=\'left\' if w &gt;= 0 else \'right\')\n        \n        plt.tight_layout()\n        plt.show()\n\n        # Create a new Orange table with the plot data\n        domain = Domain([DiscreteVariable(target_variable, values=purposes.tolist()),\n                         ContinuousVariable("WoE"),\n                         ContinuousVariable("Good_Rate"),\n                         ContinuousVariable("Bad_Rate")])\n        out_data = Table.from_numpy(domain, \n                                    X=np.column_stack((\n                                        grouped[target_variable],  # Use original numeric values\n                                        woe,\n                                        good_rate,\n                                        bad_rate\n                                    )))\n        return out_data\n    \n    except Exception as e:\n        print(f"Error creating the plot: {str(e)}")\n        return None\n\n# Usage of the function\nif in_data is not None:\n    out_data = plot_woe_bad_rate_by_variable(in_data, target_variable=\'purpose\', outcome_variable=None, figsize=(20, 12))\nelse:\n    print("No input data provided.")\n    out_data = None', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xa2\x00\x00\x00^\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="5" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf8\x7f\xff\xff\xff\xca\x00\x00\x00\x00\x00\x00\x03\xd0\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndef plot_woe_bad_rate_by_variable(in_data, target_variable, outcome_variable=None, figsize=(20, 12)):\n    try:\n        # Get the target variable from the domain\n        target_var = in_data.domain[target_variable]\n        if not isinstance(target_var, DiscreteVariable):\n            raise ValueError(f"The \'{target_variable}\' variable must be a DiscreteVariable.")\n        \n        # Create a dictionary to map numeric values to target names\n        target_mapping = {i: value for i, value in enumerate(target_var.values)}\n        \n        # Print target mapping for verification\n        print(f"{target_variable} Mapping:")\n        for key, value in target_mapping.items():\n            print(f"{key}: {value}")\n        \n        # Convert Orange data to pandas DataFrame\n        data = pd.DataFrame({\n            var.name: in_data.get_column(var.name)\n            for var in in_data.domain.variables\n        })\n        \n        # Print the first few rows of the DataFrame for verification\n        print("\\nFirst few rows of the DataFrame:")\n        print(data.head())\n        \n        # If outcome_variable is not specified or not in columns, use the last column\n        if outcome_variable is None or outcome_variable not in data.columns:\n            outcome_variable = data.columns[-1]\n        \n        print(f"\\nOutcome variable: {outcome_variable}")\n        \n        # Create \'Good\' and \'Bad\' columns based on the outcome variable\n        median = data[outcome_variable].median()\n        data[\'Good\'] = (data[outcome_variable] &gt;= median).astype(int)\n        data[\'Bad\'] = (data[outcome_variable] &lt; median).astype(int)\n        \n        # Calculate WoE and other metrics\n        grouped = data.groupby(target_variable).agg({\n            \'Good\': \'sum\',\n            \'Bad\': \'sum\'\n        }).reset_index()\n        \n        grouped[\'Total\'] = grouped[\'Good\'] + grouped[\'Bad\']\n        grouped[\'GoodRate\'] = grouped[\'Good\'] / grouped[\'Total\']\n        grouped[\'BadRate\'] = grouped[\'Bad\'] / grouped[\'Total\']\n        \n        total_good = grouped[\'Good\'].sum()\n        total_bad = grouped[\'Bad\'].sum()\n        \n        grouped[\'WoE\'] = np.log((grouped[\'GoodRate\'] / (total_good / grouped[\'Total\'].sum())) / \n                                (grouped[\'BadRate\'] / (total_bad / grouped[\'Total\'].sum())))\n        \n        # Map numeric targets to their descriptions\n        grouped[\'target_description\'] = grouped[target_variable].map(target_mapping)\n        \n        # Print grouped data for verification\n        print("\\nGrouped data:")\n        print(grouped)\n        \n        # Sort by WoE for better visualization\n        grouped = grouped.sort_values(\'WoE\')\n        \n        targets = grouped[\'target_description\']\n        woe = grouped[\'WoE\']\n        good_rate = grouped[\'GoodRate\'] * 100\n        bad_rate = grouped[\'BadRate\'] * 100\n        \n        # Create the plot\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)\n        \n        # Stacked bar chart\n        ax1.barh(targets, bad_rate, label=\'Bad\', color=\'#FF9999\')\n        ax1.barh(targets, good_rate, left=bad_rate, label=\'Good\', color=\'#66B2FF\')\n        \n        ax1.set_title(f\'Good/Bad Rate by {target_variable.capitalize()}\')\n        ax1.set_xlabel(\'Percentage\')\n        ax1.set_ylabel(target_variable.capitalize())\n        ax1.legend(loc=\'lower right\')\n        \n        # Add percentage labels\n        for i, (bad, good) in enumerate(zip(bad_rate, good_rate)):\n            ax1.text(bad/2, i, f\'{bad:.1f}%\', va=\'center\', ha=\'center\')\n            ax1.text(bad + good/2, i, f\'{good:.1f}%\', va=\'center\', ha=\'center\')\n        \n        # WoE chart\n        ax2.plot(woe, targets, marker=\'o\')\n        ax2.set_title(f\'Weight of Evidence (WoE) by {target_variable.capitalize()}\')\n        ax2.set_xlabel(\'WoE\')\n        ax2.set_ylabel(target_variable.capitalize())\n        ax2.axvline(x=0, color=\'r\', linestyle=\'--\')\n        \n        # Add WoE values as text\n        for i, (target, w) in enumerate(zip(targets, woe)):\n            ax2.text(w, i, f\'{w:.2f}\', va=\'center\', ha=\'left\' if w &gt;= 0 else \'right\')\n        \n        plt.tight_layout()\n        plt.show()\n\n        # Create a new Orange table with the plot data\n        domain = Domain([DiscreteVariable(target_variable, values=targets.tolist()),\n                         ContinuousVariable("WoE"),\n                         ContinuousVariable("Good_Rate"),\n                         ContinuousVariable("Bad_Rate")])\n        out_data = Table.from_numpy(domain, \n                                    X=np.column_stack((\n                                        grouped[target_variable],  # Use original numeric values\n                                        woe,\n                                        good_rate,\n                                        bad_rate\n                                    )))\n        return out_data\n    \n    except Exception as e:\n        print(f"Error creating the plot: {str(e)}")\n        return None\n\n# Example usage of the function\nif in_data is not None:\n     out_data = plot_woe_bad_rate_by_variable(in_data, target_variable=\'grade\', outcome_variable=None, figsize=(20, 12))\n# else:\n#     print("No input data provided.")\n#     out_data = None', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xa2\x00\x00\x00^\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="6" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf8\x7f\xff\xff\xff\xca\x00\x00\x00\x00\x00\x00\x03\xd0\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import Orange\nimport matplotlib.pyplot as plt\n\n# Função para criar o gráfico de barras com porcentagens\ndef criar_grafico_inadimplencia(data):\n    # Assumindo que \'good_bad\' é uma coluna discreta onde 0 indica inadimplente e 1 indica adimplente\n    inadimplentes = sum(1 for d in data if d[\'good_bad\'] == 0)\n    adimplentes = sum(1 for d in data if d[\'good_bad\'] == 1)\n    total = len(data)\n\n    # Criando o gráfico de barras\n    categorias = [\'Inadimplentes\', \'Adimplentes\']\n    valores = [inadimplentes, adimplentes]\n    porcentagens = [(inadimplentes / total) * 100, (adimplentes / total) * 100]\n\n    plt.figure(figsize=(10, 7))\n    barras = plt.bar(categorias, valores, color=[\'#FF9999\', \'#66B2FF\'])\n    \n    # Adicionando as porcentagens no topo das barras\n    for barra, porcentagem in zip(barras, porcentagens):\n        altura = barra.get_height()\n        plt.text(barra.get_x() + barra.get_width() / 2, altura, f\'{porcentagem:.1f}%\', \n                 ha=\'center\', va=\'bottom\', fontsize=12)\n\n    # Adicionando título e rótulos\n    plt.title(\'Quantidade e Porcentagem de Inadimplentes e Adimplentes\')\n    plt.xlabel(\'Status\')\n    plt.ylabel(\'Quantidade\')\n    plt.show()\n\n    # Criando uma nova tabela Orange com os resultados\n    domain = Orange.data.Domain([Orange.data.DiscreteVariable("Status", values=["Inadimplentes", "Adimplentes"]),\n                                 Orange.data.ContinuousVariable("Quantidade")])\n    \n    resultado = Orange.data.Table.from_list(domain, [\n        ["Inadimplentes", inadimplentes],\n        ["Adimplentes", adimplentes]\n    ])\n\n    return resultado\n\n# Exemplo de uso (assumindo que \'in_data\' é sua tabela Orange de entrada)\nif in_data is not None:\n    resultado = criar_grafico_inadimplencia(in_data)\n    print(resultado)\nelse:\n    print("Nenhum dado de entrada fornecido.")\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xa2\x00\x00\x00^\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="7" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf8\x7f\xff\xff\xff\xca\x00\x00\x00\x00\x00\x00\x03\xd0\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import Orange\nimport matplotlib.pyplot as plt\n\n# Função para criar gráfico de barras com porcentagens\ndef criar_grafico_barras(data, variavel):\n    # Verifica se a variável existe no dataset\n    if variavel not in data.domain:\n        print(f"Variável \'{variavel}\' não encontrada no dataset.")\n        return\n    \n    # Conta as ocorrências de cada valor da variável categórica\n    categorias = {}\n    for d in data:\n        valor = d[variavel].value\n        categorias[valor] = categorias.get(valor, 0) + 1\n    \n    # Converte o dicionário em listas e ordena do maior para o menor\n    categorias_ordenadas = sorted(categorias.items(), key=lambda x: x[1], reverse=True)\n    nomes_categorias, valores = zip(*categorias_ordenadas)\n    \n    total = sum(valores)\n    porcentagens = [(v / total) * 100 for v in valores]\n\n    # Criando o gráfico de barras\n    plt.figure(figsize=(10, 7))\n    barras = plt.bar(nomes_categorias, valores, color=[\'#FF9999\', \'#66B2FF\', \'#99FF99\', \'#FFCC99\'])\n\n    # Adicionando as porcentagens no topo das barras\n    for barra, porcentagem in zip(barras, porcentagens):\n        altura = barra.get_height()\n        plt.text(barra.get_x() + barra.get_width() / 2, altura, f\'{porcentagem:.1f}%\', \n                 ha=\'center\', va=\'bottom\', fontsize=12)\n\n    # Adicionando título e rótulos\n    plt.title(f\'Quantidade e Porcentagem por "{variavel}"\')\n    plt.xlabel(variavel)\n    plt.ylabel(\'Quantidade\')\n    plt.show()\n\n    # Criando uma nova tabela Orange com os resultados\n    domain = Orange.data.Domain([Orange.data.DiscreteVariable("Categoria", values=list(nomes_categorias)),\n                                 Orange.data.ContinuousVariable("Quantidade")])\n    \n    resultado = Orange.data.Table.from_list(domain, [\n        [categoria, valor] for categoria, valor in zip(nomes_categorias, valores)\n    ])\n\n    return resultado\n\n# Exemplo de uso (assumindo que \'in_data\' é sua tabela Orange de entrada)\nif in_data is not None:\n    # Substitua \'purpose\' por qualquer outra variável categórica do dataset\n    resultado = criar_grafico_barras(in_data, \'purpose\')\n    print(resultado)\nelse:\n    print("Nenhum dado de entrada fornecido.")\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xa2\x00\x00\x00^\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="8" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf8\x7f\xff\xff\xff\xca\x00\x00\x00\x00\x00\x00\x03\xd0\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndef plot_woe_bad_rate_by_variable(in_data, target_variable, outcome_variable=None, figsize=(20, 12)):\n    try:\n        # Get the target variable from the domain\n        target_var = in_data.domain[target_variable]\n        if not isinstance(target_var, DiscreteVariable):\n            raise ValueError(f"The \'{target_variable}\' variable must be a DiscreteVariable.")\n        \n        # Create a dictionary to map numeric values to target names\n        target_mapping = {i: value for i, value in enumerate(target_var.values)}\n        \n        # Print target mapping for verification\n        print(f"{target_variable} Mapping:")\n        for key, value in target_mapping.items():\n            print(f"{key}: {value}")\n        \n        # Convert Orange data to pandas DataFrame\n        data = pd.DataFrame({\n            var.name: in_data.get_column(var.name)\n            for var in in_data.domain.variables\n        })\n        \n        # Print the first few rows of the DataFrame for verification\n        print("\\nFirst few rows of the DataFrame:")\n        print(data.head())\n        \n        # If outcome_variable is not specified or not in columns, use the last column\n        if outcome_variable is None or outcome_variable not in data.columns:\n            outcome_variable = data.columns[-1]\n        \n        print(f"\\nOutcome variable: {outcome_variable}")\n        \n        # Create \'Good\' and \'Bad\' columns based on the outcome variable\n        median = data[outcome_variable].median()\n        data[\'Good\'] = (data[outcome_variable] &gt;= median).astype(int)\n        data[\'Bad\'] = (data[outcome_variable] &lt; median).astype(int)\n        \n        # Calculate WoE and other metrics\n        grouped = data.groupby(target_variable).agg({\n            \'Good\': \'sum\',\n            \'Bad\': \'sum\'\n        }).reset_index()\n        \n        grouped[\'Total\'] = grouped[\'Good\'] + grouped[\'Bad\']\n        grouped[\'GoodRate\'] = grouped[\'Good\'] / grouped[\'Total\']\n        grouped[\'BadRate\'] = grouped[\'Bad\'] / grouped[\'Total\']\n        \n        total_good = grouped[\'Good\'].sum()\n        total_bad = grouped[\'Bad\'].sum()\n        \n        grouped[\'WoE\'] = np.log((grouped[\'GoodRate\'] / (total_good / grouped[\'Total\'].sum())) / \n                                (grouped[\'BadRate\'] / (total_bad / grouped[\'Total\'].sum())))\n        \n        # Map numeric targets to their descriptions\n        grouped[\'target_description\'] = grouped[target_variable].map(target_mapping)\n        \n        # Print grouped data for verification\n        print("\\nGrouped data:")\n        print(grouped)\n        \n        # Sort by WoE for better visualization\n        grouped = grouped.sort_values(\'WoE\')\n        \n        targets = grouped[\'target_description\']\n        woe = grouped[\'WoE\']\n        good_rate = grouped[\'GoodRate\'] * 100\n        bad_rate = grouped[\'BadRate\'] * 100\n        \n        # Create the plot\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)\n        \n        # Stacked bar chart\n        ax1.barh(targets, bad_rate, label=\'Bad\', color=\'#FF9999\')\n        ax1.barh(targets, good_rate, left=bad_rate, label=\'Good\', color=\'#66B2FF\')\n        \n        ax1.set_title(f\'Good/Bad Rate by {target_variable.capitalize()}\')\n        ax1.set_xlabel(\'Percentage\')\n        ax1.set_ylabel(target_variable.capitalize())\n        ax1.legend(loc=\'lower right\')\n        \n        # Add percentage labels\n        for i, (bad, good) in enumerate(zip(bad_rate, good_rate)):\n            ax1.text(bad/2, i, f\'{bad:.1f}%\', va=\'center\', ha=\'center\')\n            ax1.text(bad + good/2, i, f\'{good:.1f}%\', va=\'center\', ha=\'center\')\n        \n        # WoE chart\n        ax2.plot(woe, targets, marker=\'o\')\n        ax2.set_title(f\'Weight of Evidence (WoE) by {target_variable.capitalize()}\')\n        ax2.set_xlabel(\'WoE\')\n        ax2.set_ylabel(target_variable.capitalize())\n        ax2.axvline(x=0, color=\'r\', linestyle=\'--\')\n        \n        # Add WoE values as text\n        for i, (target, w) in enumerate(zip(targets, woe)):\n            ax2.text(w, i, f\'{w:.2f}\', va=\'center\', ha=\'left\' if w &gt;= 0 else \'right\')\n        \n        plt.tight_layout()\n        plt.show()\n\n        # Create a new Orange table with the plot data\n        domain = Domain([DiscreteVariable(target_variable, values=targets.tolist()),\n                         ContinuousVariable("WoE"),\n                         ContinuousVariable("Good_Rate"),\n                         ContinuousVariable("Bad_Rate")])\n        out_data = Table.from_numpy(domain, \n                                    X=np.column_stack((\n                                        grouped[target_variable],  # Use original numeric values\n                                        woe,\n                                        good_rate,\n                                        bad_rate\n                                    )))\n        return out_data\n    \n    except Exception as e:\n        print(f"Error creating the plot: {str(e)}")\n        return None\n\n# Example usage of the function\nif in_data is not None:\n     out_data = plot_woe_bad_rate_by_variable(in_data, target_variable=\'emp_length\', outcome_variable=None, figsize=(20, 12))\n# else:\n#     print("No input data provided.")\n#     out_data = None', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xa2\x00\x00\x00^\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="9" format="pickle">gASVkgUAAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNzYXZl
ZFdpZGdldEdlb21ldHJ5lENCAdnQywADAAD///h/////ygAAAAAAAAPQ///4gP///9//////AAAD
zwAAAAECAAAAB4D///iA////3/////8AAAPPlIwHc29ydGluZ5RLAIwDc2lwlIwOX3VucGlja2xl
X2VudW2Uk5SMDFB5UXQ1LlF0Q29yZZSMCVNvcnRPcmRlcpRLAIeUUpSGlIwLX192ZXJzaW9uX1+U
SwKMEGNvbnRleHRfc2V0dGluZ3OUXZSMFW9yYW5nZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSU
k5QpgZR9lCiMBnZhbHVlc5R9lCiMCWNvbG9yX3ZhcpSMCGdvb2RfYmFklEtlhpSMDXNlbGVjdGVk
X3ZhcnOUXZSMC2luc3RhbGxtZW50lEtmhpRhSv3///+GlGgOSwJ1jAphdHRyaWJ1dGVzlH2UKIwJ
bG9hbl9hbW50lEsCjAtmdW5kZWRfYW1udJRLAowEdGVybZRLAYwIaW50X3JhdGWUSwJoHUsCjAVn
cmFkZZRLAYwJc3ViX2dyYWRllEsBjAplbXBfbGVuZ3RolEsBjA5ob21lX293bmVyc2hpcJRLAYwK
YW5udWFsX2luY5RLAowTdmVyaWZpY2F0aW9uX3N0YXR1c5RLAYwHaXNzdWVfZJRLAYwLbG9hbl9z
dGF0dXOUSwGMB3B1cnBvc2WUSwGMCmFkZHJfc3RhdGWUSwGMA2R0aZRLAowLZGVsaW5xXzJ5cnOU
SwKMDmlucV9sYXN0XzZtdGhzlEsCjBZtdGhzX3NpbmNlX2xhc3RfZGVsaW5xlEsCjBZtdGhzX3Np
bmNlX2xhc3RfcmVjb3JklEsCjAhvcGVuX2FjY5RLAowHcHViX3JlY5RLAowJcmV2b2xfYmFslEsC
jApyZXZvbF91dGlslEsCjAl0b3RhbF9hY2OUSwKME2luaXRpYWxfbGlzdF9zdGF0dXOUSwGMCW91
dF9wcm5jcJRLAowLdG90YWxfcHltbnSUSwKMD3RvdGFsX3JlY19wcm5jcJRLAowNdG90YWxfcmVj
X2ludJRLAowSdG90YWxfcmVjX2xhdGVfZmVllEsCjApyZWNvdmVyaWVzlEsCjBdjb2xsZWN0aW9u
X3JlY292ZXJ5X2ZlZZRLAowMbGFzdF9weW1udF9klEsBjA9sYXN0X3B5bW50X2FtbnSUSwKMGmNv
bGxlY3Rpb25zXzEyX210aHNfZXhfbWVklEsBjBttdGhzX3NpbmNlX2xhc3RfbWFqb3JfZGVyb2eU
SwKMEGFubnVhbF9pbmNfam9pbnSUSwKMCWR0aV9qb2ludJRLAowZdmVyaWZpY2F0aW9uX3N0YXR1
c19qb2ludJRLAowOYWNjX25vd19kZWxpbnGUSwGMDHRvdF9jb2xsX2FtdJRLAowLdG90X2N1cl9i
YWyUSwKMC29wZW5fYWNjXzZtlEsCjApvcGVuX2lsXzZtlEsCjAtvcGVuX2lsXzEybZRLAowLb3Bl
bl9pbF8yNG2USwKMEm10aHNfc2luY2VfcmNudF9pbJRLAowMdG90YWxfYmFsX2lslEsCjAdpbF91
dGlslEsCjAtvcGVuX3J2XzEybZRLAowLb3Blbl9ydl8yNG2USwKMCm1heF9iYWxfYmOUSwKMCGFs
bF91dGlslEsCjBB0b3RhbF9yZXZfaGlfbGltlEsCjAZpbnFfZmmUSwKMC3RvdGFsX2N1X3RslEsC
jAxpbnFfbGFzdF8xMm2USwJoGUsBdYwFbWV0YXOUfZQojARkZXNjlEsDjBBlYXJsaWVzdF9jcl9s
aW5llEsDdXViYXUu
</properties>
		<properties node_id="10" format="pickle">gASV8y0AAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjAxyZWNlbnRfcGF0aHOUXZQojB5v
cmFuZ2V3aWRnZXQudXRpbHMuZmlsZWRpYWxvZ3OUjApSZWNlbnRQYXRolJOUKYGUfZQojAdhYnNw
YXRolIxHQzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9Eb2N1bWVudHMvcmlzay1jcmVkaXQvbm90ZWJv
b2tzL3Jpc2tfdHJhdGFkby5jc3aUjAZwcmVmaXiUTowHcmVscGF0aJROjAV0aXRsZZSMAJSMBXNo
ZWV0lGgOjAtmaWxlX2Zvcm1hdJROdWJoBimBlH2UKGgJjD9DOi9Vc2Vycy9HcmHDum5hIE1vdG9z
L0RvY3VtZW50cy9yaXNrLWNyZWRpdC9ub3RlYm9va3Mvcmlzay5jc3aUaAtOaAxOaA1oDmgPaA5o
EE51YmgGKYGUfZQoaAmMYUM6L1VuaWJhbHNhcy9UcmFiYWxob3MvMjAyNC4yL0ludGVsaWdlbmNp
YSBkb3MgbmVnb2Npb3MvVEVEIDEvZGFkb3MvdGFiZWxhX2N1c3RvX2RlX3ZpZGFfMjAxNC5jc3aU
aAtOaAxOaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMYUM6L1VuaWJhbHNhcy9UcmFiYWxob3MvMjAy
NC4yL0ludGVsaWdlbmNpYSBkb3MgbmVnb2Npb3MvVEVEIDEvZGFkb3MvdGFiZWxhX2N1c3RvX2Rl
X3ZpZGFfMjAxOC5jc3aUaAtOaAxOaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMYUM6L1VuaWJhbHNh
cy9UcmFiYWxob3MvMjAyNC4yL0ludGVsaWdlbmNpYSBkb3MgbmVnb2Npb3MvVEVEIDEvZGFkb3Mv
dGFiZWxhX2N1c3RvX2RlX3ZpZGFfMjAyMS5jc3aUaAtOaAxOaA1oDmgPaA5oEE51YmgGKYGUfZQo
aAmMQUM6L1VzZXJzL01wZWRyL0Rvd25sb2Fkcy9Db3N0X29mX0xpdmluZ19JbmRleF9ieV9Db3Vu
dHJ5XzIwMjQuY3N2lGgLjAdiYXNlZGlylGgMjChDb3N0X29mX0xpdmluZ19JbmRleF9ieV9Db3Vu
dHJ5XzIwMjQuY3N2lGgNaA5oD2gOaBBOdWJoBimBlH2UKGgJjF9DOi9Vc2Vycy9HcmHDum5hIE1v
dG9zL0FwcERhdGEvTG9jYWwvUHJvZ3JhbXMvT3JhbmdlL0xpYi9zaXRlLXBhY2thZ2VzL09yYW5n
ZS9kYXRhc2V0cy9pcmlzLnRhYpRoC4wPc2FtcGxlLWRhdGFzZXRzlGgMjAhpcmlzLnRhYpRoDWgO
aA9oDmgQTnViaAYpgZR9lChoCYxiQzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9BcHBEYXRhL0xvY2Fs
L1Byb2dyYW1zL09yYW5nZS9MaWIvc2l0ZS1wYWNrYWdlcy9PcmFuZ2UvZGF0YXNldHMvdGl0YW5p
Yy50YWKUaAtoJWgMjAt0aXRhbmljLnRhYpRoDWgOaA9oDmgQTnViaAYpgZR9lChoCYxiQzovVXNl
cnMvR3Jhw7puYSBNb3Rvcy9BcHBEYXRhL0xvY2FsL1Byb2dyYW1zL09yYW5nZS9MaWIvc2l0ZS1w
YWNrYWdlcy9PcmFuZ2UvZGF0YXNldHMvaG91c2luZy50YWKUaAtoJWgMjAtob3VzaW5nLnRhYpRo
DWgOaA9oDmgQTnViaAYpgZR9lChoCYxoQzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9BcHBEYXRhL0xv
Y2FsL1Byb2dyYW1zL09yYW5nZS9MaWIvc2l0ZS1wYWNrYWdlcy9PcmFuZ2UvZGF0YXNldHMvaGVh
cnRfZGlzZWFzZS50YWKUaAtoJWgMjBFoZWFydF9kaXNlYXNlLnRhYpRoDWgOaA9oDmgQTnViaAYp
gZR9lChoCYxpQzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9BcHBEYXRhL0xvY2FsL1Byb2dyYW1zL09y
YW5nZS9MaWIvc2l0ZS1wYWNrYWdlcy9PcmFuZ2UvZGF0YXNldHMvYnJvd24tc2VsZWN0ZWQudGFi
lGgLaCVoDIwSYnJvd24tc2VsZWN0ZWQudGFilGgNaA5oD2gOaBBOdWJoBimBlH2UKGgJjF5DOi9V
c2Vycy9HcmHDum5hIE1vdG9zL0FwcERhdGEvTG9jYWwvUHJvZ3JhbXMvT3JhbmdlL0xpYi9zaXRl
LXBhY2thZ2VzL09yYW5nZS9kYXRhc2V0cy96b28udGFilGgLaCVoDIwHem9vLnRhYpRoDWgOaA9o
DmgQTnViZYwLcmVjZW50X3VybHOUXZSME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAAAA
AAEAAAAQAAAFAAAAAq8AAAACAAAALgAABP8AAAKuAAAAAAAAAAAFAAAAAAIAAAAuAAAE/wAAAq6U
jAtzaGVldF9uYW1lc5R9lIwGc291cmNllEsAjAN1cmyUaA6MDWRvbWFpbl9lZGl0b3KUfZSMC19f
dmVyc2lvbl9flEsBjBBjb250ZXh0X3NldHRpbmdzlF2UKIwVb3Jhbmdld2lkZ2V0LnNldHRpbmdz
lIwHQ29udGV4dJSTlCmBlH2UKIwGdmFsdWVzlH2UKIwJdmFyaWFibGVzlF2UaEN9lGhPXZQoXZQo
jAlGZWF0dXJlIDGUjBRPcmFuZ2UuZGF0YS52YXJpYWJsZZSMEkNvbnRpbnVvdXNWYXJpYWJsZZST
lEsAaA6IZV2UKIwJbG9hbl9hbW50lGhXSwBoDohlXZQojAtmdW5kZWRfYW1udJRoV0sAaA6IZV2U
KIwEdGVybZRoVYwQRGlzY3JldGVWYXJpYWJsZZSTlEsAjBQzNiBtb250aHMsIDYwIG1vbnRoc5SJ
ZV2UKIwIaW50X3JhdGWUaFdLAGgOiGVdlCiMC2luc3RhbGxtZW50lGhXSwBoDohlXZQojAVncmFk
ZZRoX0sAjBNBLCBCLCBDLCBELCBFLCBGLCBHlIllXZQojAlzdWJfZ3JhZGWUaF9LAIxTQTEsIEEy
LCBBMywgQTQsIEE1LCBCMSwgQjIsIEIzLCBCNCwgQjUsIEMxLCBDMiwgQzMsIEM0LCBDNSwgRDEs
IEQyLCBEMywgRDQsIEQ1LCAuLi6UiWVdlCiMCmVtcF9sZW5ndGiUaF9LAIxjMSB5ZWFyLCAyIHll
YXJzLCAzIHllYXJzLCA0IHllYXJzLCA1IHllYXJzLCA2IHllYXJzLCA3IHllYXJzLCA4IHllYXJz
LCA5IHllYXJzLCAxMCsgeWVhcnMsIDwgMSB5ZWFylIllXZQojA5ob21lX293bmVyc2hpcJRoX0sA
jBNNT1JUR0FHRSwgT1dOLCBSRU5UlIllXZQojAphbm51YWxfaW5jlGhXSwBoDohlXZQojBN2ZXJp
ZmljYXRpb25fc3RhdHVzlGhfSwCMJ05vdCBWZXJpZmllZCwgU291cmNlIFZlcmlmaWVkLCBWZXJp
ZmllZJSJZV2UKIwHaXNzdWVfZJRoX0sAjBZEZWMtMTEsIE5vdi0xMSwgT2N0LTExlIllXZQojAts
b2FuX3N0YXR1c5RoX0sAjGFDaGFyZ2VkIE9mZiwgQ3VycmVudCwgRGVmYXVsdCwgRnVsbHkgUGFp
ZCwgSW4gR3JhY2UgUGVyaW9kLCBMYXRlICgxNi0zMCBkYXlzKSwgTGF0ZSAoMzEtMTIwIGRheXMp
lIllXZQojAdwdXJwb3NllGhfSwCMmmNhciwgY3JlZGl0X2NhcmQsIGRlYnRfY29uc29saWRhdGlv
biwgaG9tZV9pbXByb3ZlbWVudCwgaG91c2UsIG1ham9yX3B1cmNoYXNlLCBtZWRpY2FsLCBtb3Zp
bmcsIG90aGVyLCByZW5ld2FibGVfZW5lcmd5LCBzbWFsbF9idXNpbmVzcywgdmFjYXRpb24sIHdl
ZGRpbmeUiWVdlCiMCmFkZHJfc3RhdGWUaF9LAIxTQUssIEFMLCBBUiwgQVosIENBLCBDTywgQ1Qs
IERDLCBERSwgRkwsIEdBLCBISSwgSUwsIEtTLCBLWSwgTEEsIE1BLCBNRCwgTUksIE1OLCAuLi6U
iWVdlCiMA2R0aZRoV0sAaA6IZV2UKIwLZGVsaW5xXzJ5cnOUaFdLAGgOiGVdlCiMDmlucV9sYXN0
XzZtdGhzlGhXSwBoDohlXZQojBZtdGhzX3NpbmNlX2xhc3RfZGVsaW5xlGhXSwBoDohlXZQojBZt
dGhzX3NpbmNlX2xhc3RfcmVjb3JklGhXSwBoDohlXZQojAhvcGVuX2FjY5RoV0sAaA6IZV2UKIwH
cHViX3JlY5RoV0sAaA6IZV2UKIwJcmV2b2xfYmFslGhXSwBoDohlXZQojApyZXZvbF91dGlslGhX
SwBoDohlXZQojAl0b3RhbF9hY2OUaFdLAGgOiGVdlCiME2luaXRpYWxfbGlzdF9zdGF0dXOUaF9L
AIwBZpSJZV2UKIwJb3V0X3BybmNwlGhXSwBoDohlXZQojAt0b3RhbF9weW1udJRoV0sAaA6IZV2U
KIwPdG90YWxfcmVjX3BybmNwlGhXSwBoDohlXZQojA10b3RhbF9yZWNfaW50lGhXSwBoDohlXZQo
jBJ0b3RhbF9yZWNfbGF0ZV9mZWWUaFdLAGgOiGVdlCiMCnJlY292ZXJpZXOUaFdLAGgOiGVdlCiM
F2NvbGxlY3Rpb25fcmVjb3ZlcnlfZmVllGhXSwBoDohlXZQojAxsYXN0X3B5bW50X2SUaF9LAIyj
QXByLTEyLCBBcHItMTMsIEFwci0xNCwgQXByLTE1LCBBdWctMTIsIEF1Zy0xMywgQXVnLTE0LCBB
dWctMTUsIERlYy0xMSwgRGVjLTEyLCBEZWMtMTMsIERlYy0xNCwgRGVjLTE1LCBGZWItMTIsIEZl
Yi0xMywgRmViLTE0LCBGZWItMTUsIEphbi0xMiwgSmFuLTEzLCBKYW4tMTQsIC4uLpSJZV2UKIwP
bGFzdF9weW1udF9hbW50lGhXSwBoDohlXZQojBpjb2xsZWN0aW9uc18xMl9tdGhzX2V4X21lZJRo
X0sAjAMwLjCUiGVdlCiMG210aHNfc2luY2VfbGFzdF9tYWpvcl9kZXJvZ5RoV0sAaA6IZV2UKIwQ
YW5udWFsX2luY19qb2ludJRoV0sAaA6IZV2UKIwJZHRpX2pvaW50lGhXSwBoDohlXZQojBl2ZXJp
ZmljYXRpb25fc3RhdHVzX2pvaW50lGhXSwBoDohlXZQojA5hY2Nfbm93X2RlbGlucZRoX0sAjAMw
LjCUiGVdlCiMDHRvdF9jb2xsX2FtdJRoV0sAaA6IZV2UKIwLdG90X2N1cl9iYWyUaFdLAGgOiGVd
lCiMC29wZW5fYWNjXzZtlGhXSwBoDohlXZQojApvcGVuX2lsXzZtlGhXSwBoDohlXZQojAtvcGVu
X2lsXzEybZRoV0sAaA6IZV2UKIwLb3Blbl9pbF8yNG2UaFdLAGgOiGVdlCiMEm10aHNfc2luY2Vf
cmNudF9pbJRoV0sAaA6IZV2UKIwMdG90YWxfYmFsX2lslGhXSwBoDohlXZQojAdpbF91dGlslGhX
SwBoDohlXZQojAtvcGVuX3J2XzEybZRoV0sAaA6IZV2UKIwLb3Blbl9ydl8yNG2UaFdLAGgOiGVd
lCiMCm1heF9iYWxfYmOUaFdLAGgOiGVdlCiMCGFsbF91dGlslGhXSwBoDohlXZQojBB0b3RhbF9y
ZXZfaGlfbGltlGhXSwBoDohlXZQojAZpbnFfZmmUaFdLAGgOiGVdlCiMC3RvdGFsX2N1X3RslGhX
SwBoDohlXZQojAxpbnFfbGFzdF8xMm2UaFdLAGgOiGVdlCiMCGdvb2RfYmFklGhfSwGMBDAsIDGU
iGVdlCiMDmVtcF9sZW5ndGhfaW50lGhXSwBoDohlXZQojBVlYXJsaWVzdF9jcl9saW5lX2RhdGWU
aFWMDFRpbWVWYXJpYWJsZZSTlEsAaA6IZV2UKIwbbXRoc19zaW5jZV9lYXJsaWVzdF9jcl9saW5l
lGhXSwBoDohlXZQojAh0ZXJtX2ludJRoV0sAaA6IZV2UKIwMaXNzdWVfZF9kYXRllGjkSwBoDohl
XZQojBJtdGhzX3NpbmNlX2lzc3VlX2SUaFdLAGgOiGVdlCiMBGRlc2OUaFWMDlN0cmluZ1Zhcmlh
YmxllJOUSwJoDollXZQojBBlYXJsaWVzdF9jcl9saW5llGjwSwJoDollZXNoRUsBdYwKYXR0cmli
dXRlc5QoaFRLAoaUaFlLAoaUaFtLAoaUaF1dlCiMCTM2IG1vbnRoc5SMCTYwIG1vbnRoc5RlhpRo
YksChpRoZEsChpRoZl2UKIwBQZSMAUKUjAFDlIwBRJSMAUWUjAFGlIwBR5RlhpRoaV2UKIwCQTGU
jAJBMpSMAkEzlIwCQTSUjAJBNZSMAkIxlIwCQjKUjAJCM5SMAkI0lIwCQjWUjAJDMZSMAkMylIwC
QzOUjAJDNJSMAkM1lIwCRDGUjAJEMpSMAkQzlIwCRDSUjAJENZSMAkUxlIwCRTKUjAJFM5SMAkU0
lIwCRTWUjAJGMZSMAkYylIwCRjOUjAJGNJSMAkY1lIwCRzGUjAJHMpSMAkczlIwCRzSUjAJHNZRl
hpRobF2UKIwGMSB5ZWFylIwHMiB5ZWFyc5SMBzMgeWVhcnOUjAc0IHllYXJzlIwHNSB5ZWFyc5SM
BzYgeWVhcnOUjAc3IHllYXJzlIwHOCB5ZWFyc5SMBzkgeWVhcnOUjAkxMCsgeWVhcnOUjAg8IDEg
eWVhcpRlhpRob12UKIwITU9SVEdBR0WUjANPV06UjARSRU5UlGWGlGhySwKGlGh0XZQojAxOb3Qg
VmVyaWZpZWSUjA9Tb3VyY2UgVmVyaWZpZWSUjAhWZXJpZmllZJRlhpRod12UKIwGRGVjLTExlIwG
Tm92LTExlIwGT2N0LTExlGWGlGh6XZQojAtDaGFyZ2VkIE9mZpSMB0N1cnJlbnSUjAdEZWZhdWx0
lIwKRnVsbHkgUGFpZJSMD0luIEdyYWNlIFBlcmlvZJSMEUxhdGUgKDE2LTMwIGRheXMplIwSTGF0
ZSAoMzEtMTIwIGRheXMplGWGlGh9XZQojANjYXKUjAtjcmVkaXRfY2FyZJSMEmRlYnRfY29uc29s
aWRhdGlvbpSMEGhvbWVfaW1wcm92ZW1lbnSUjAVob3VzZZSMDm1ham9yX3B1cmNoYXNllIwHbWVk
aWNhbJSMBm1vdmluZ5SMBW90aGVylIwQcmVuZXdhYmxlX2VuZXJneZSMDnNtYWxsX2J1c2luZXNz
lIwIdmFjYXRpb26UjAd3ZWRkaW5nlGWGlGiAXZQojAJBS5SMAkFMlIwCQVKUjAJBWpSMAkNBlIwC
Q0+UjAJDVJSMAkRDlIwCREWUjAJGTJSMAkdBlIwCSEmUjAJJTJSMAktTlIwCS1mUjAJMQZSMAk1B
lIwCTUSUjAJNSZSMAk1OlIwCTU+UjAJNU5SMAk1UlIwCTkOUjAJOSJSMAk5KlIwCTk2UjAJOVpSM
Ak5ZlIwCT0iUjAJPS5SMAk9SlIwCUEGUjAJSSZSMAlNDlIwCU0SUjAJUTpSMAlRYlIwCVVSUjAJW
QZSMAlZUlIwCV0GUjAJXSZSMAldWlIwCV1mUZYaUaINLAoaUaIVLAoaUaIdLAoaUaIlLAoaUaItL
AoaUaI1LAoaUaI9LAoaUaJFLAoaUaJNLAoaUaJVLAoaUaJddlGiYYYaUaJpLAoaUaJxLAoaUaJ5L
AoaUaKBLAoaUaKJLAoaUaKRLAoaUaKZLAoaUaKhdlCiMBkFwci0xMpSMBkFwci0xM5SMBkFwci0x
NJSMBkFwci0xNZSMBkF1Zy0xMpSMBkF1Zy0xM5SMBkF1Zy0xNJSMBkF1Zy0xNZSMBkRlYy0xMZSM
BkRlYy0xMpSMBkRlYy0xM5SMBkRlYy0xNJSMBkRlYy0xNZSMBkZlYi0xMpSMBkZlYi0xM5SMBkZl
Yi0xNJSMBkZlYi0xNZSMBkphbi0xMpSMBkphbi0xM5SMBkphbi0xNJSMBkphbi0xNZSMBkphbi0x
NpSMBkp1bC0xMpSMBkp1bC0xM5SMBkp1bC0xNJSMBkp1bC0xNZSMBkp1bi0xMpSMBkp1bi0xM5SM
Bkp1bi0xNJSMBkp1bi0xNZSMBk1hci0xMpSMBk1hci0xM5SMBk1hci0xNJSMBk1hci0xNZSMBk1h
eS0xMpSMBk1heS0xM5SMBk1heS0xNJSMBk1heS0xNZSMBk5vdi0xMZSMBk5vdi0xMpSMBk5vdi0x
M5SMBk5vdi0xNJSMBk5vdi0xNZSMBk9jdC0xMpSMBk9jdC0xM5SMBk9jdC0xNJSMBk9jdC0xNZSM
BlNlcC0xMpSMBlNlcC0xM5SMBlNlcC0xNJSMBlNlcC0xNZRlhpRoq0sChpRorV2UaK5hhpRosEsC
hpRosksChpRotEsChpRotksChpRouF2UaLlhhpRou0sChpRovUsChpRov0sChpRowUsChpRow0sC
hpRoxUsChpRox0sChpRoyUsChpRoy0sChpRozUsChpRoz0sChpRo0UsChpRo00sChpRo1UsChpRo
10sChpRo2UsChpRo20sChpRo3V2UKIwBMJSMATGUZYaUaOBLAoaUaOJLBIaUaOZLAoaUaOhLAoaU
aOpLBIaUaOxLAoaUdJSMBW1ldGFzlGjuSwOGlGjySwOGlIaUjApjbGFzc192YXJzlCmMEm1vZGlm
aWVkX3ZhcmlhYmxlc5RdlHViaEopgZR9lChoTX2UKGhPXZRoQ32UaE9dlChdlCiMCWxvYW5fYW1u
dJRoV0sAaA6IZV2UKIwLZnVuZGVkX2FtbnSUaFdLAGgOiGVdlCiMBHRlcm2UaF9LAIwUMzYgbW9u
dGhzLCA2MCBtb250aHOUiWVdlCiMCGludF9yYXRllGhXSwBoDohlXZQojAtpbnN0YWxsbWVudJRo
V0sAaA6IZV2UKIwFZ3JhZGWUaF9LAIwTQSwgQiwgQywgRCwgRSwgRiwgR5SJZV2UKIwJc3ViX2dy
YWRllGhfSwCMU0ExLCBBMiwgQTMsIEE0LCBBNSwgQjEsIEIyLCBCMywgQjQsIEI1LCBDMSwgQzIs
IEMzLCBDNCwgQzUsIEQxLCBEMiwgRDMsIEQ0LCBENSwgLi4ulIllXZQojAplbXBfbGVuZ3RolGhf
SwCMYzEgeWVhciwgMiB5ZWFycywgMyB5ZWFycywgNCB5ZWFycywgNSB5ZWFycywgNiB5ZWFycywg
NyB5ZWFycywgOCB5ZWFycywgOSB5ZWFycywgMTArIHllYXJzLCA8IDEgeWVhcpSJZV2UKIwOaG9t
ZV9vd25lcnNoaXCUaF9LAIwTTU9SVEdBR0UsIE9XTiwgUkVOVJSJZV2UKIwKYW5udWFsX2luY5Ro
V0sAaA6IZV2UKIwTdmVyaWZpY2F0aW9uX3N0YXR1c5RoX0sAjCdOb3QgVmVyaWZpZWQsIFNvdXJj
ZSBWZXJpZmllZCwgVmVyaWZpZWSUiWVdlCiMB2lzc3VlX2SUaF9LAIwWRGVjLTExLCBOb3YtMTEs
IE9jdC0xMZSJZV2UKIwLbG9hbl9zdGF0dXOUaF9LAIxhQ2hhcmdlZCBPZmYsIEN1cnJlbnQsIERl
ZmF1bHQsIEZ1bGx5IFBhaWQsIEluIEdyYWNlIFBlcmlvZCwgTGF0ZSAoMTYtMzAgZGF5cyksIExh
dGUgKDMxLTEyMCBkYXlzKZSJZV2UKIwHcHVycG9zZZRoX0sAjJpjYXIsIGNyZWRpdF9jYXJkLCBk
ZWJ0X2NvbnNvbGlkYXRpb24sIGhvbWVfaW1wcm92ZW1lbnQsIGhvdXNlLCBtYWpvcl9wdXJjaGFz
ZSwgbWVkaWNhbCwgbW92aW5nLCBvdGhlciwgcmVuZXdhYmxlX2VuZXJneSwgc21hbGxfYnVzaW5l
c3MsIHZhY2F0aW9uLCB3ZWRkaW5nlIllXZQojAphZGRyX3N0YXRllGhfSwCMU0FLLCBBTCwgQVIs
IEFaLCBDQSwgQ08sIENULCBEQywgREUsIEZMLCBHQSwgSEksIElMLCBLUywgS1ksIExBLCBNQSwg
TUQsIE1JLCBNTiwgLi4ulIllXZQojANkdGmUaFdLAGgOiGVdlCiMC2RlbGlucV8yeXJzlGhXSwBo
DohlXZQojA5pbnFfbGFzdF82bXRoc5RoV0sAaA6IZV2UKIwWbXRoc19zaW5jZV9sYXN0X2RlbGlu
cZRoV0sAaA6IZV2UKIwWbXRoc19zaW5jZV9sYXN0X3JlY29yZJRoV0sAaA6IZV2UKIwIb3Blbl9h
Y2OUaFdLAGgOiGVdlCiMB3B1Yl9yZWOUaFdLAGgOiGVdlCiMCXJldm9sX2JhbJRoV0sAaA6IZV2U
KIwKcmV2b2xfdXRpbJRoV0sAaA6IZV2UKIwJdG90YWxfYWNjlGhXSwBoDohlXZQojBNpbml0aWFs
X2xpc3Rfc3RhdHVzlGhfSwBomIllXZQojAlvdXRfcHJuY3CUaFdLAGgOiGVdlCiMC3RvdGFsX3B5
bW50lGhXSwBoDohlXZQojA90b3RhbF9yZWNfcHJuY3CUaFdLAGgOiGVdlCiMDXRvdGFsX3JlY19p
bnSUaFdLAGgOiGVdlCiMEnRvdGFsX3JlY19sYXRlX2ZlZZRoV0sAaA6IZV2UKIwKcmVjb3Zlcmll
c5RoV0sAaA6IZV2UKIwXY29sbGVjdGlvbl9yZWNvdmVyeV9mZWWUaFdLAGgOiGVdlCiMDGxhc3Rf
cHltbnRfZJRoX0sAjKNBcHItMTIsIEFwci0xMywgQXByLTE0LCBBcHItMTUsIEF1Zy0xMiwgQXVn
LTEzLCBBdWctMTQsIEF1Zy0xNSwgRGVjLTExLCBEZWMtMTIsIERlYy0xMywgRGVjLTE0LCBEZWMt
MTUsIEZlYi0xMiwgRmViLTEzLCBGZWItMTQsIEZlYi0xNSwgSmFuLTEyLCBKYW4tMTMsIEphbi0x
NCwgLi4ulIllXZQojA9sYXN0X3B5bW50X2FtbnSUaFdLAGgOiGVdlCiMGmNvbGxlY3Rpb25zXzEy
X210aHNfZXhfbWVklGhfSwCMAzAuMJSIZV2UKIwbbXRoc19zaW5jZV9sYXN0X21ham9yX2Rlcm9n
lGhXSwBoDohlXZQojBBhbm51YWxfaW5jX2pvaW50lGhXSwBoDohlXZQojAlkdGlfam9pbnSUaFdL
AGgOiGVdlCiMGXZlcmlmaWNhdGlvbl9zdGF0dXNfam9pbnSUaFdLAGgOiGVdlCiMDmFjY19ub3df
ZGVsaW5xlGhfSwCMAzAuMJSIZV2UKIwMdG90X2NvbGxfYW10lGhXSwBoDohlXZQojAt0b3RfY3Vy
X2JhbJRoV0sAaA6IZV2UKIwLb3Blbl9hY2NfNm2UaFdLAGgOiGVdlCiMCm9wZW5faWxfNm2UaFdL
AGgOiGVdlCiMC29wZW5faWxfMTJtlGhXSwBoDohlXZQojAtvcGVuX2lsXzI0bZRoV0sAaA6IZV2U
KIwSbXRoc19zaW5jZV9yY250X2lslGhXSwBoDohlXZQojAx0b3RhbF9iYWxfaWyUaFdLAGgOiGVd
lCiMB2lsX3V0aWyUaFdLAGgOiGVdlCiMC29wZW5fcnZfMTJtlGhXSwBoDohlXZQojAtvcGVuX3J2
XzI0bZRoV0sAaA6IZV2UKIwKbWF4X2JhbF9iY5RoV0sAaA6IZV2UKIwIYWxsX3V0aWyUaFdLAGgO
iGVdlCiMEHRvdGFsX3Jldl9oaV9saW2UaFdLAGgOiGVdlCiMBmlucV9maZRoV0sAaA6IZV2UKIwL
dG90YWxfY3VfdGyUaFdLAGgOiGVdlCiMDGlucV9sYXN0XzEybZRoV0sAaA6IZV2UKIwIZ29vZF9i
YWSUaF9LAYwEMCwgMZSIZV2UKIwEZGVzY5Ro8EsCaA6JZV2UKIwQZWFybGllc3RfY3JfbGluZZRo
8EsCaA6JZWVzaEVLAXVo8yiMCWxvYW5fYW1udJRLAoaUjAtmdW5kZWRfYW1udJRLAoaUjAR0ZXJt
lF2UKIwJMzYgbW9udGhzlIwJNjAgbW9udGhzlGWGlIwIaW50X3JhdGWUSwKGlIwLaW5zdGFsbG1l
bnSUSwKGlIwFZ3JhZGWUXZQoaP5o/2oAAQAAagEBAABqAgEAAGoDAQAAagQBAABlhpSMCXN1Yl9n
cmFkZZRdlCiMAkExlIwCQTKUjAJBM5SMAkE0lIwCQTWUjAJCMZSMAkIylIwCQjOUjAJCNJSMAkI1
lIwCQzGUjAJDMpSMAkMzlIwCQzSUjAJDNZSMAkQxlIwCRDKUjAJEM5SMAkQ0lIwCRDWUjAJFMZSM
AkUylIwCRTOUjAJFNJSMAkU1lIwCRjGUjAJGMpSMAkYzlIwCRjSUjAJGNZSMAkcxlIwCRzKUjAJH
M5SMAkc0lIwCRzWUZYaUjAplbXBfbGVuZ3RolF2UKIwGMSB5ZWFylIwHMiB5ZWFyc5SMBzMgeWVh
cnOUjAc0IHllYXJzlIwHNSB5ZWFyc5SMBzYgeWVhcnOUjAc3IHllYXJzlIwHOCB5ZWFyc5SMBzkg
eWVhcnOUjAkxMCsgeWVhcnOUjAg8IDEgeWVhcpRlhpSMDmhvbWVfb3duZXJzaGlwlF2UKIwITU9S
VEdBR0WUjANPV06UjARSRU5UlGWGlIwKYW5udWFsX2luY5RLAoaUjBN2ZXJpZmljYXRpb25fc3Rh
dHVzlF2UKIwMTm90IFZlcmlmaWVklIwPU291cmNlIFZlcmlmaWVklIwIVmVyaWZpZWSUZYaUjAdp
c3N1ZV9klF2UKIwGRGVjLTExlIwGTm92LTExlIwGT2N0LTExlGWGlIwLbG9hbl9zdGF0dXOUXZQo
jAtDaGFyZ2VkIE9mZpSMB0N1cnJlbnSUjAdEZWZhdWx0lIwKRnVsbHkgUGFpZJSMD0luIEdyYWNl
IFBlcmlvZJSMEUxhdGUgKDE2LTMwIGRheXMplIwSTGF0ZSAoMzEtMTIwIGRheXMplGWGlIwHcHVy
cG9zZZRdlCiMA2NhcpSMC2NyZWRpdF9jYXJklIwSZGVidF9jb25zb2xpZGF0aW9ulIwQaG9tZV9p
bXByb3ZlbWVudJSMBWhvdXNllIwObWFqb3JfcHVyY2hhc2WUjAdtZWRpY2FslIwGbW92aW5nlIwF
b3RoZXKUjBByZW5ld2FibGVfZW5lcmd5lIwOc21hbGxfYnVzaW5lc3OUjAh2YWNhdGlvbpSMB3dl
ZGRpbmeUZYaUjAphZGRyX3N0YXRllF2UKIwCQUuUjAJBTJSMAkFSlIwCQVqUjAJDQZSMAkNPlIwC
Q1SUjAJEQ5SMAkRFlIwCRkyUjAJHQZSMAkhJlIwCSUyUjAJLU5SMAktZlIwCTEGUjAJNQZSMAk1E
lIwCTUmUjAJNTpSMAk1PlIwCTVOUjAJNVJSMAk5DlIwCTkiUjAJOSpSMAk5NlIwCTlaUjAJOWZSM
Ak9IlIwCT0uUjAJPUpSMAlBBlIwCUkmUjAJTQ5SMAlNElIwCVE6UjAJUWJSMAlVUlIwCVkGUjAJW
VJSMAldBlIwCV0mUjAJXVpSMAldZlGWGlIwDZHRplEsChpSMC2RlbGlucV8yeXJzlEsChpSMDmlu
cV9sYXN0XzZtdGhzlEsChpSMFm10aHNfc2luY2VfbGFzdF9kZWxpbnGUSwKGlIwWbXRoc19zaW5j
ZV9sYXN0X3JlY29yZJRLAoaUjAhvcGVuX2FjY5RLAoaUjAdwdWJfcmVjlEsChpSMCXJldm9sX2Jh
bJRLAoaUjApyZXZvbF91dGlslEsChpSMCXRvdGFsX2FjY5RLAoaUjBNpbml0aWFsX2xpc3Rfc3Rh
dHVzlF2UaJhhhpSMCW91dF9wcm5jcJRLAoaUjAt0b3RhbF9weW1udJRLAoaUjA90b3RhbF9yZWNf
cHJuY3CUSwKGlIwNdG90YWxfcmVjX2ludJRLAoaUjBJ0b3RhbF9yZWNfbGF0ZV9mZWWUSwKGlIwK
cmVjb3Zlcmllc5RLAoaUjBdjb2xsZWN0aW9uX3JlY292ZXJ5X2ZlZZRLAoaUjAxsYXN0X3B5bW50
X2SUXZQojAZBcHItMTKUjAZBcHItMTOUjAZBcHItMTSUjAZBcHItMTWUjAZBdWctMTKUjAZBdWct
MTOUjAZBdWctMTSUjAZBdWctMTWUjAZEZWMtMTGUjAZEZWMtMTKUjAZEZWMtMTOUjAZEZWMtMTSU
jAZEZWMtMTWUjAZGZWItMTKUjAZGZWItMTOUjAZGZWItMTSUjAZGZWItMTWUjAZKYW4tMTKUjAZK
YW4tMTOUjAZKYW4tMTSUjAZKYW4tMTWUjAZKYW4tMTaUjAZKdWwtMTKUjAZKdWwtMTOUjAZKdWwt
MTSUjAZKdWwtMTWUjAZKdW4tMTKUjAZKdW4tMTOUjAZKdW4tMTSUjAZKdW4tMTWUjAZNYXItMTKU
jAZNYXItMTOUjAZNYXItMTSUjAZNYXItMTWUjAZNYXktMTKUjAZNYXktMTOUjAZNYXktMTSUjAZN
YXktMTWUjAZOb3YtMTGUjAZOb3YtMTKUjAZOb3YtMTOUjAZOb3YtMTSUjAZOb3YtMTWUjAZPY3Qt
MTKUjAZPY3QtMTOUjAZPY3QtMTSUjAZPY3QtMTWUjAZTZXAtMTKUjAZTZXAtMTOUjAZTZXAtMTSU
jAZTZXAtMTWUZYaUjA9sYXN0X3B5bW50X2FtbnSUSwKGlIwaY29sbGVjdGlvbnNfMTJfbXRoc19l
eF9tZWSUXZSMAzAuMJRhhpSMG210aHNfc2luY2VfbGFzdF9tYWpvcl9kZXJvZ5RLAoaUjBBhbm51
YWxfaW5jX2pvaW50lEsChpSMCWR0aV9qb2ludJRLAoaUjBl2ZXJpZmljYXRpb25fc3RhdHVzX2pv
aW50lEsChpSMDmFjY19ub3dfZGVsaW5xlF2UjAMwLjCUYYaUjAx0b3RfY29sbF9hbXSUSwKGlIwL
dG90X2N1cl9iYWyUSwKGlIwLb3Blbl9hY2NfNm2USwKGlIwKb3Blbl9pbF82bZRLAoaUjAtvcGVu
X2lsXzEybZRLAoaUjAtvcGVuX2lsXzI0bZRLAoaUjBJtdGhzX3NpbmNlX3JjbnRfaWyUSwKGlIwM
dG90YWxfYmFsX2lslEsChpSMB2lsX3V0aWyUSwKGlIwLb3Blbl9ydl8xMm2USwKGlIwLb3Blbl9y
dl8yNG2USwKGlIwKbWF4X2JhbF9iY5RLAoaUjAhhbGxfdXRpbJRLAoaUjBB0b3RhbF9yZXZfaGlf
bGltlEsChpSMBmlucV9maZRLAoaUjAt0b3RhbF9jdV90bJRLAoaUjAxpbnFfbGFzdF8xMm2USwKG
lIwIZ29vZF9iYWSUXZQoavIBAABq8wEAAGWGlHSUavwBAACMBGRlc2OUSwOGlIwQZWFybGllc3Rf
Y3JfbGluZZRLA4aUhpRqAAIAAClqAQIAAF2UdWJldS4=
</properties>
		<properties node_id="11" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf9u\x00\x00\x00\xf9\xff\xff\xff\r\x00\x00\x02\xec\xff\xff\xf9v\x00\x00\x01\x0e\xff\xff\xff\x0c\x00\x00\x02\xeb\x00\x00\x00\x01\x00\x00\x00\x00\x07\x80\xff\xff\xf9v\x00\x00\x01\x0e\xff\xff\xff\x0c\x00\x00\x02\xeb', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rows': [], 'columns': []}, 'stored_sort': [], '__version__': 1}</properties>
		<properties node_id="12" format="literal">{'compatibility_mode': False, 'controlAreaVisible': True, 'number_of_folds': 10, 'replacement': False, 'sampleSizeNumber': 1, 'sampleSizePercentage': 70, 'sampleSizeSqlPercentage': 0.1, 'sampleSizeSqlTime': 1, 'sampling_type': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xfb\xd4\x00\x00\x00\xfb\xff\xff\xfc\xac\x00\x00\x02\x89\xff\xff\xfb\xd5\x00\x00\x01\x10\xff\xff\xfc\xab\x00\x00\x02\x88\x00\x00\x00\x01\x00\x00\x00\x00\x07\x80\xff\xff\xfb\xd5\x00\x00\x01\x10\xff\xff\xfc\xab\x00\x00\x02\x88', 'selectedFold': 1, 'sql_dl': False, 'stratify': False, 'use_seed': True, '__version__': 2}</properties>
		<properties node_id="13" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf93\x00\x00\x00\xeb\xff\xff\xfe\xcc\x00\x00\x02\xde\xff\xff\xf94\x00\x00\x01\x00\xff\xff\xfe\xcb\x00\x00\x02\xdd\x00\x00\x00\x01\x00\x00\x00\x00\x07\x80\xff\xff\xf94\x00\x00\x01\x00\xff\xff\xfe\xcb\x00\x00\x02\xdd', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rowscolumns': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]}, 'stored_sort': [], '__version__': 1}</properties>
		<properties node_id="14" format="pickle">gASVPgkAAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNpZ25v
cmVfbmV3X2ZlYXR1cmVzlImME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAP//+i8AAAAb
///9tAAAArD///owAAAAMP///bMAAAKvAAAAAQAAAAAHgP//+jAAAAAw///9swAAAq+UjBJ1c2Vf
aW5wdXRfZmVhdHVyZXOUiYwLX192ZXJzaW9uX1+USwGMEGNvbnRleHRfc2V0dGluZ3OUXZSMFW9y
YW5nZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9lCiMBnZhbHVlc5R9lCiMEWRvbWFp
bl9yb2xlX2hpbnRzlH2UKIwLZnVuZGVkX2FtbnSUSwKGlIwJYXZhaWxhYmxllEsAhpSMC2luc3Rh
bGxtZW50lEsChpRoFUsBhpSMCnJldm9sX3V0aWyUSwKGlGgVSwKGlIwJb3V0X3BybmNwlEsChpRo
FUsDhpSMC3RvdGFsX3B5bW50lEsChpRoFUsEhpSMD3RvdGFsX3JlY19wcm5jcJRLAoaUaBVLBYaU
jA10b3RhbF9yZWNfaW50lEsChpRoFUsGhpSMEnRvdGFsX3JlY19sYXRlX2ZlZZRLAoaUaBVLB4aU
jBZtdGhzX3NpbmNlX2xhc3RfcmVjb3JklEsChpRoFUsIhpSMFm10aHNfc2luY2VfbGFzdF9kZWxp
bnGUSwKGlGgVSwmGlIwKcmVjb3Zlcmllc5RLAoaUaBVLCoaUjBdjb2xsZWN0aW9uX3JlY292ZXJ5
X2ZlZZRLAoaUaBVLC4aUjAxpbnFfbGFzdF8xMm2USwKGlGgVSwyGlIwPbGFzdF9weW1udF9hbW50
lEsChpRoFUsNhpSMGmNvbGxlY3Rpb25zXzEyX210aHNfZXhfbWVklEsBhpRoFUsOhpSMCGFsbF91
dGlslEsChpRoFUsPhpSMDHRvdF9jb2xsX2FtdJRLAoaUaBVLEIaUjAt0b3RhbF9jdV90bJRLAoaU
aBVLEYaUjAtkZWxpbnFfMnlyc5RLAoaUaBVLEoaUjA5hY2Nfbm93X2RlbGlucZRLAYaUaBVLE4aU
jAptYXhfYmFsX2JjlEsChpRoFUsUhpSMBmlucV9maZRLAoaUaBVLFYaUjBB0b3RhbF9yZXZfaGlf
bGltlEsChpRoFUsWhpSMC2xvYW5fc3RhdHVzlEsBhpRoFUsXhpSMB3B1Yl9yZWOUSwKGlGgVSxiG
lIwbbXRoc19zaW5jZV9sYXN0X21ham9yX2Rlcm9nlEsChpRoFUsZhpSMEGFubnVhbF9pbmNfam9p
bnSUSwKGlGgVSxqGlIwEZGVzY5RLA4aUaBVLG4aUjBBlYXJsaWVzdF9jcl9saW5llEsDhpRoFUsc
hpSMCWR0aV9qb2ludJRLAoaUaBVLHYaUjAx0b3RhbF9iYWxfaWyUSwKGlGgVSx6GlIwLb3Blbl9y
dl8yNG2USwKGlGgVSx+GlIwHaWxfdXRpbJRLAoaUaBVLIIaUjAtvcGVuX3J2XzEybZRLAoaUaBVL
IYaUjBJtdGhzX3NpbmNlX3JjbnRfaWyUSwKGlGgVSyKGlIwZdmVyaWZpY2F0aW9uX3N0YXR1c19q
b2ludJRLAoaUaBVLI4aUjAt0b3RfY3VyX2JhbJRLAoaUaBVLJIaUjAtvcGVuX2FjY182bZRLAoaU
aBVLJYaUjAtvcGVuX2lsXzI0bZRLAoaUaBVLJoaUjAtvcGVuX2lsXzEybZRLAoaUaBVLJ4aUjApv
cGVuX2lsXzZtlEsChpRoFUsohpSMCUZlYXR1cmUgMZRLAoaUjAlhdHRyaWJ1dGWUSwCGlIwJbG9h
bl9hbW50lEsChpRokUsBhpSMBHRlcm2USwGGlGiRSwKGlIwIaW50X3JhdGWUSwKGlGiRSwOGlIwF
Z3JhZGWUSwGGlGiRSwSGlIwJc3ViX2dyYWRllEsBhpRokUsFhpSMCmVtcF9sZW5ndGiUSwGGlGiR
SwaGlIwOaG9tZV9vd25lcnNoaXCUSwGGlGiRSweGlIwKYW5udWFsX2luY5RLAoaUaJFLCIaUjBN2
ZXJpZmljYXRpb25fc3RhdHVzlEsBhpRokUsJhpSMB2lzc3VlX2SUSwGGlGiRSwqGlIwHcHVycG9z
ZZRLAYaUaJFLC4aUjAphZGRyX3N0YXRllEsBhpRokUsMhpSMA2R0aZRLAoaUaJFLDYaUjA5pbnFf
bGFzdF82bXRoc5RLAoaUaJFLDoaUjAhvcGVuX2FjY5RLAoaUaJFLD4aUjAlyZXZvbF9iYWyUSwKG
lGiRSxCGlIwJdG90YWxfYWNjlEsChpRokUsRhpSME2luaXRpYWxfbGlzdF9zdGF0dXOUSwGGlGiR
SxKGlIwMbGFzdF9weW1udF9klEsBhpRokUsThpSMDmVtcF9sZW5ndGhfaW50lEsChpRokUsUhpSM
FWVhcmxpZXN0X2NyX2xpbmVfZGF0ZZRLBIaUaJFLFYaUjBttdGhzX3NpbmNlX2VhcmxpZXN0X2Ny
X2xpbmWUSwKGlGiRSxaGlIwIdGVybV9pbnSUSwKGlGiRSxeGlIwMaXNzdWVfZF9kYXRllEsEhpRo
kUsYhpSMEm10aHNfc2luY2VfaXNzdWVfZJRLAoaUaJFLGYaUjAhnb29kX2JhZJRLAYaUjAVjbGFz
c5RLAIaUdUr+////hpRoB0sBdYwKYXR0cmlidXRlc5R9lChoj0sCaJNLAmgTSwJolksBaJlLAmgX
SwJonEsBaJ9LAWiiSwFopUsBaKhLAmirSwForksBaFlLAWixSwFotEsBaLdLAmhKSwJouksCaC9L
AmgsSwJovUsCaFxLAmjASwJoGksCaMNLAmjGSwFoHUsCaCBLAmgjSwJoJksCaClLAmgySwJoNUsC
aMlLAWg7SwJoPksBaF9LAmhiSwJoa0sCaH1LAmhNSwFoREsCaIBLAmiDSwJojEsCaIlLAmiGSwJo
eksCaG5LAmh0SwJod0sCaHFLAmhQSwJoQUsCaFZLAmhTSwJoR0sCaDhLAmjMSwJoz0sEaNJLAmjV
SwJo2EsEaNtLAmjeSwF1jAVtZXRhc5R9lChoZUsDaGhLA3V1YmF1Lg==
</properties>
		<properties node_id="15" format="pickle">gASVXQQAAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNpZ25v
cmVfbmV3X2ZlYXR1cmVzlImME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAP//+6oAAADc
///+AgAAA0f///urAAAA8f///gEAAANGAAAAAQAAAAAHgP//+6sAAADx///+AQAAA0aUjBJ1c2Vf
aW5wdXRfZmVhdHVyZXOUiYwLX192ZXJzaW9uX1+USwGMEGNvbnRleHRfc2V0dGluZ3OUXZSMFW9y
YW5nZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9lCiMBnZhbHVlc5R9lCiMEWRvbWFp
bl9yb2xlX2hpbnRzlH2UKIwEdGVybZRLAYaUjAlhdmFpbGFibGWUSwCGlIwJRmVhdHVyZSAxlEsC
hpRoFUsBhpSMBWdyYWRllEsBhpRoFUsChpSMCXN1Yl9ncmFkZZRLAYaUaBVLA4aUjAplbXBfbGVu
Z3RolEsBhpRoFUsEhpSMDmhvbWVfb3duZXJzaGlwlEsBhpRoFUsFhpSME3ZlcmlmaWNhdGlvbl9z
dGF0dXOUSwGGlGgVSwaGlIwHaXNzdWVfZJRLAYaUaBVLB4aUjAphZGRyX3N0YXRllEsBhpRoFUsI
hpSMB3B1cnBvc2WUSwGGlGgVSwmGlIwTaW5pdGlhbF9saXN0X3N0YXR1c5RLAYaUaBVLCoaUjAxs
YXN0X3B5bW50X2SUSwGGlGgVSwuGlIwVZWFybGllc3RfY3JfbGluZV9kYXRllEsEhpRoFUsMhpSM
DGlzc3VlX2RfZGF0ZZRLBIaUaBVLDYaUjAhnb29kX2JhZJRLAYaUaBVLDoaUjAlsb2FuX2FtbnSU
SwKGlIwJYXR0cmlidXRllEsAhpSMCGludF9yYXRllEsChpRoQ0sBhpSMCmFubnVhbF9pbmOUSwKG
lGhDSwKGlIwDZHRplEsChpRoQ0sDhpSMDmlucV9sYXN0XzZtdGhzlEsChpRoQ0sEhpSMCG9wZW5f
YWNjlEsChpRoQ0sFhpSMCXJldm9sX2JhbJRLAoaUaENLBoaUjAl0b3RhbF9hY2OUSwKGlGhDSweG
lIwOZW1wX2xlbmd0aF9pbnSUSwKGlGhDSwiGlIwbbXRoc19zaW5jZV9lYXJsaWVzdF9jcl9saW5l
lEsChpRoQ0sJhpSMCHRlcm1faW50lEsChpRoQ0sKhpSMEm10aHNfc2luY2VfaXNzdWVfZJRLAoaU
aENLC4aUdUr+////hpRoB0sBdYwKYXR0cmlidXRlc5R9lChoF0sCaEFLAmgTSwFoRUsCaBpLAWgd
SwFoIEsBaCNLAWhISwJoJksBaClLAWgvSwFoLEsBaEtLAmhOSwJoUUsCaFRLAmhXSwJoMksBaDVL
AWhaSwJoOEsEaF1LAmhgSwJoO0sEaGNLAmg+SwF1jAVtZXRhc5R9lHViYXUu
</properties>
		<properties node_id="16" format="pickle">gASV6gAAAAAAAAB9lCiMCGF1dG9zZW5klIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNzYXZlZFdp
ZGdldEdlb21ldHJ5lENCAdnQywADAAD///sOAAAAvf///XEAAALG///7DwAAANL///1wAAACxQAA
AAEAAAAAB4D///sPAAAA0v///XAAAALFlIwJdmFyX2hpbnRzlH2UTowgT3JhbmdlLndpZGdldHMu
ZGF0YS5vd2Rpc2NyZXRpemWUjAdWYXJIaW50lJOUaAeMB01ldGhvZHOUk5RLAYWUUpQphpSBlHOM
C19fdmVyc2lvbl9flEsDdS4=
</properties>
		<properties node_id="17" format="pickle">gASVXQQAAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNpZ25v
cmVfbmV3X2ZlYXR1cmVzlImME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAP//+lwAAADH
///94QAAA1z///pdAAAA3P///eAAAANbAAAAAQAAAAAHgP//+l0AAADc///94AAAA1uUjBJ1c2Vf
aW5wdXRfZmVhdHVyZXOUiYwLX192ZXJzaW9uX1+USwGMEGNvbnRleHRfc2V0dGluZ3OUXZSMFW9y
YW5nZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9lCiMBnZhbHVlc5R9lCiMEWRvbWFp
bl9yb2xlX2hpbnRzlH2UKIwJRmVhdHVyZSAxlEsChpSMCWF2YWlsYWJsZZRLAIaUjAlsb2FuX2Ft
bnSUSwKGlGgVSwGGlIwIaW50X3JhdGWUSwKGlGgVSwKGlIwKYW5udWFsX2luY5RLAoaUaBVLA4aU
jANkdGmUSwKGlGgVSwSGlIwOaW5xX2xhc3RfNm10aHOUSwKGlGgVSwWGlIwIb3Blbl9hY2OUSwKG
lGgVSwaGlIwJcmV2b2xfYmFslEsChpRoFUsHhpSMCXRvdGFsX2FjY5RLAoaUaBVLCIaUjA5lbXBf
bGVuZ3RoX2ludJRLAoaUaBVLCYaUjBVlYXJsaWVzdF9jcl9saW5lX2RhdGWUSwSGlGgVSwqGlIwb
bXRoc19zaW5jZV9lYXJsaWVzdF9jcl9saW5llEsChpRoFUsLhpSMDGlzc3VlX2RfZGF0ZZRLBIaU
aBVLDIaUjBJtdGhzX3NpbmNlX2lzc3VlX2SUSwKGlGgVSw2GlIwIdGVybV9pbnSUSwKGlGgVSw6G
lIwIZ29vZF9iYWSUSwGGlGgVSw+GlIwEdGVybZRLAYaUjAlhdHRyaWJ1dGWUSwCGlIwFZ3JhZGWU
SwGGlGhGSwGGlIwJc3ViX2dyYWRllEsBhpRoRksChpSMCmVtcF9sZW5ndGiUSwGGlGhGSwOGlIwO
aG9tZV9vd25lcnNoaXCUSwGGlGhGSwSGlIwTdmVyaWZpY2F0aW9uX3N0YXR1c5RLAYaUaEZLBYaU
jAdpc3N1ZV9klEsBhpRoRksGhpSMB3B1cnBvc2WUSwGGlGhGSweGlIwKYWRkcl9zdGF0ZZRLAYaU
aEZLCIaUjBNpbml0aWFsX2xpc3Rfc3RhdHVzlEsBhpRoRksJhpSMDGxhc3RfcHltbnRfZJRLAYaU
aEZLCoaUdUr+////hpRoB0sBdYwKYXR0cmlidXRlc5R9lChoE0sCaBdLAmhESwFoGksCaEhLAWhL
SwFoTksBaFFLAWgdSwJoVEsBaFdLAWhaSwFoXUsBaCBLAmgjSwJoJksCaClLAmgsSwJoYEsBaGNL
AWgvSwJoMksEaDVLAmg+SwJoOEsEaDtLAmhBSwF1jAVtZXRhc5R9lHViYXUu
</properties>
		<properties node_id="18" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf8\x7f\xff\xff\xff\xca\x00\x00\x00\x00\x00\x00\x03\xd0\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'from Orange.data import Table, Domain, DiscreteVariable, ContinuousVariable\nfrom Orange.preprocess import Preprocess\nimport numpy as np\nimport pandas as pd\n\nclass CatCombiner(Preprocess):\n    def __init__(self, category_mapping=None, debug=False):\n        self.category_mapping = category_mapping or {\n            \'grade\': [],\n            \'home_ownership\': [[\'OTHER\', \'NONE\', \'RENT\', \'ANY\']],\n            \'purpose\': [\n                [\'small_business\', \'educational\', \'renewable_energy\', \'moving\'],\n                [\'other\', \'house\', \'medical\', \'vacation\'],\n                [\'wedding\', \'home_improvement\', \'major_purchase\', \'car\'],\n            ],\n            \'addr_state\': [\n                [\'NE\', \'IA\', \'NV\', \'HI\', \'FL\'],\n                [\'AL\', \'NM\', \'NJ\'],\n                [\'OK\', \'MO\', \'MD\', \'NC\'],\n                [\'AR\', \'TN\', \'MI\', \'UT\', \'VA\', \'LA\', \'PA\', \'AZ\', \'OH\', \'RI\', \'KY\', \'DE\', \'IN\'],\n                [\'MA\', \'SD\', \'GA\', \'MN\', \'WI\', \'WA\', \'OR\', \'IL\', \'CT\'],\n                [\'MS\', \'MT\', \'SC\', \'VT\', \'KS\', \'CO\', \'AK\', \'NH\', \'WV\', \'WY\', \'ID\', \'DC\', \'ME\'],\n            ],\n            \'initial_list_status\': [],\n            \'verification_status\': [],\n            \'sub_grade\': [\n                [\'G1\', \'F5\', \'G5\', \'G3\', \'G2\', \'F4\', \'F3\', \'G4\', \'F2\'],\n                [\'E5\', \'F1\', \'E4\', \'E3\', \'E2\'],\n                [\'E1\', \'D5\', \'D4\'],\n                [\'D3\', \'D2\', \'D1\'],\n                [\'C5\', \'C4\', \'C3\'],\n                [\'C2\', \'C1\', \'B5\'],\n                [\'B4\', \'B3\'],\n                [\'B2\', \'B1\'],\n                [\'A5\', \'A4\'],\n                [\'A3\', \'A2\', \'A1\']\n            ],\n            \'term\': [],\n            \'emp_length\': [\n                [1, 3],\n                [4, 6],\n                [7, 9]\n            ],\n            \'inq_last_6mths\': [\n                [4, 33]\n            ],\n        }\n        self.debug = debug\n\n    def __call__(self, data):\n        X = Table(data)\n        domain = data.domain\n        new_attrs = []\n\n        for attr in domain.attributes:\n            if attr.name in self.category_mapping:\n                values = list(attr.values)\n                for group in self.category_mapping[attr.name]:\n                    if all(isinstance(e, str) for e in group):\n                        new_value = \'_\'.join(group)\n                        for value in group:\n                            if value in values:\n                                values[values.index(value)] = new_value\n                    else:\n                        new_value = f\'{group[0]}-{group[1]}\'\n                        for i in range(group[0], group[1] + 1):\n                            if str(i) in values:\n                                values[values.index(str(i))] = new_value\n                new_attr = DiscreteVariable.make(attr.name, values=list(set(values)))\n                new_attrs.append(new_attr)\n                if self.debug:\n                    print(f\'Bundle categories of {attr.name}.\')\n                    print(f\'Original categories: {attr.values}.\')\n                    print(f\'Bundled categories: {new_attr.values}.\')\n                    print()\n            else:\n                new_attrs.append(attr)\n\n        new_domain = Domain(new_attrs, domain.class_vars, domain.metas)\n        return X.transform(new_domain)\n\nclass CatImputer(Preprocess):\n    def __init__(self, impute_mapping=None):\n        self.impute_mapping = impute_mapping or {\n            \'mths_since_last_delinq\': \'never_delinquent\',\n            \'tot_cur_bal\': \'missing\',\n        }\n        self.missing = \'nan\'\n\n    def __call__(self, data):\n        X = Table(data)\n        domain = data.domain\n        new_attrs = []\n\n        for attr in domain.attributes:\n            if attr.name in self.impute_mapping:\n                values = list(attr.values)\n                if self.missing in values:\n                    values[values.index(self.missing)] = self.impute_mapping[attr.name]\n                new_attr = DiscreteVariable.make(attr.name, values=values)\n                new_attrs.append(new_attr)\n            else:\n                new_attrs.append(attr)\n\n        new_domain = Domain(new_attrs, domain.class_vars, domain.metas)\n        return X.transform(new_domain)\n\nclass CatOneHotEncoder(Preprocess):\n    def __init__(self):\n        self.reference_categories = [\n            \'&gt;28.1K\', \'60\', \'&gt;22.0\', \'G\',\n            \'G1_F5_G5_G3_G2_F4_F3_G4_F2\', \n            \'0\', \'OTHER_NONE_RENT_ANY\', \'&lt;=20.0K\',\n            \'Verified\', \'small_business_educational_renewable_energy_moving\',\n            \'NE_IA_NV_HI_FL\', \'&gt;28.0\', \'4-33\', \'&lt;=4.0\',\n            \'&lt;=6.0\', \'&lt;=2.0K\', \'&lt;=8.0\', \'f\', \'missing\', \'&lt;=151.0\'\n        ]\n\n    def __call__(self, data):\n        X = Table(data)\n        domain = data.domain\n        new_attrs = []\n\n        for attr in domain.attributes:\n            if isinstance(attr, DiscreteVariable):\n                for value in attr.values:\n                    if value not in self.reference_categories:\n                        new_attr = ContinuousVariable.make(f"{attr.name}_{value}")\n                        new_attrs.append(new_attr)\n\n        new_domain = Domain(new_attrs, domain.class_vars, domain.metas)\n        new_X = np.zeros((len(X), len(new_attrs)), dtype=np.int8)\n\n        for i, instance in enumerate(X):\n            for j, new_attr in enumerate(new_attrs):\n                orig_attr_name, value = new_attr.name.rsplit(\'_\', 1)\n                orig_attr = domain[orig_attr_name]\n                if instance[orig_attr] == value:\n                    new_X[i, j] = 1\n\n        return Table(new_domain, new_X, X.Y, X.metas)\n\n# Uso:\n# data = Table("your_dataset.csv")\n# cat_combiner = CatCombiner()\n# cat_imputer = CatImputer()\n# cat_one_hot_encoder = CatOneHotEncoder()\n\n# preprocessed_data = cat_one_hot_encoder(cat_imputer(cat_combiner(data)))', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xa2\x00\x00\x00^\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="19" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf9u\x00\x00\x00\xf9\xff\xff\xff\r\x00\x00\x02\xec\xff\xff\xf9v\x00\x00\x01\x0e\xff\xff\xff\x0c\x00\x00\x02\xeb\x00\x00\x00\x01\x00\x00\x00\x00\x07\x80\xff\xff\xf9v\x00\x00\x01\x0e\xff\xff\xff\x0c\x00\x00\x02\xeb', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rows': [], 'columns': []}, 'stored_sort': [], '__version__': 1}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
