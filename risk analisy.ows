<?xml version='1.0' encoding='utf-8'?>
<scheme version="2.0" title="" description="">
	<nodes>
		<node id="0" name="File" qualified_name="Orange.widgets.data.owfile.OWFile" project_name="Orange3" version="" title="File" position="(167.0, 113.0)" />
		<node id="1" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table" position="(365.0, 113.0)" />
		<node id="2" name="Distributions" qualified_name="Orange.widgets.visualize.owdistributions.OWDistributions" project_name="Orange3" version="" title="Distributions" position="(801.0, 291.0)" />
		<node id="3" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script" position="(759.0, -5.0)" />
		<node id="4" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (1)" position="(794.0, 68.0)" />
		<node id="5" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="inadiplentes" position="(804.0, 132.0)" />
		<node id="6" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (2)" position="(772.0, 390.0)" />
		<node id="7" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (3)" position="(742.0, 470.0)" />
		<node id="8" name="Feature Statistics" qualified_name="Orange.widgets.data.owfeaturestatistics.OWFeatureStatistics" project_name="Orange3" version="" title="Feature Statistics" position="(630.0, 505.0)" />
		<node id="9" name="File" qualified_name="Orange.widgets.data.owfile.OWFile" project_name="Orange3" version="" title="File (1)" position="(136.0, 793.0)" />
		<node id="10" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table (1)" position="(318.0, 795.0)" />
		<node id="11" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table (2)" position="(811.0, 796.0)" />
		<node id="12" name="Select Columns" qualified_name="Orange.widgets.data.owselectcolumns.OWSelectAttributes" project_name="Orange3" version="" title="Select Columns" position="(509.0, 796.0)" />
		<node id="13" name="Select Columns" qualified_name="Orange.widgets.data.owselectcolumns.OWSelectAttributes" project_name="Orange3" version="" title="Select Columns (1)" position="(921.0, 695.0)" />
		<node id="14" name="Select Columns" qualified_name="Orange.widgets.data.owselectcolumns.OWSelectAttributes" project_name="Orange3" version="" title="Select Columns (2)" position="(957.0, 824.0)" />
		<node id="15" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (4)" position="(1533.0, 913.0)" />
		<node id="16" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table (4)" position="(1155.0, 859.0)" />
		<node id="17" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table (5)" position="(1186.0, 671.0)" />
		<node id="18" name="Merge Data" qualified_name="Orange.widgets.data.owmergedata.OWMergeData" project_name="Orange3" version="" title="Merge Data" position="(1335.0, 672.0)" />
		<node id="19" name="Data Sampler" qualified_name="Orange.widgets.data.owdatasampler.OWDataSampler" project_name="Orange3" version="" title="Data Sampler (1)" position="(660.0, 792.0)" />
		<node id="20" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (5)" position="(1570.0, 811.0)" />
		<node id="21" name="Scatter Plot" qualified_name="Orange.widgets.visualize.owscatterplot.OWScatterPlot" project_name="Orange3" version="" title="Scatter Plot" position="(248.0, 479.0)" />
		<node id="22" name="Preprocess" qualified_name="Orange.widgets.data.owpreprocess.OWPreprocess" project_name="Orange3" version="" title="Preprocess" position="(1089.0, 676.0)" />
		<node id="23" name="Predictions" qualified_name="Orange.widgets.evaluate.owpredictions.OWPredictions" project_name="Orange3" version="" title="Predictions" position="(1349.0, 476.0)" />
		<node id="24" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table (3)" position="(1397.0, 767.0)" />
		<node id="25" name="Logistic Regression" qualified_name="Orange.widgets.model.owlogisticregression.OWLogisticRegression" project_name="Orange3" version="" title="Logistic Regression" position="(1443.0, 691.0)" />
		<node id="26" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (6)" position="(434.0, 520.0)" />
		<node id="27" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table (7)" position="(1430.0, 357.0)" />
		<node id="28" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (7)" position="(1624.0, 609.0)" />
		<node id="29" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWTable" project_name="Orange3" version="" title="Data Table (6)" position="(1632.0, 449.0)" />
		<node id="30" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script (8)" position="(129.0, 280.0)" />
	</nodes>
	<links>
		<link id="0" source_node_id="0" sink_node_id="1" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="1" source_node_id="1" sink_node_id="2" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="2" source_node_id="1" sink_node_id="3" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="3" source_node_id="1" sink_node_id="4" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="4" source_node_id="1" sink_node_id="5" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="5" source_node_id="1" sink_node_id="6" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="6" source_node_id="1" sink_node_id="7" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="7" source_node_id="1" sink_node_id="8" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="8" source_node_id="9" sink_node_id="10" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="9" source_node_id="11" sink_node_id="13" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="10" source_node_id="11" sink_node_id="14" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="11" source_node_id="10" sink_node_id="12" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="12" source_node_id="12" sink_node_id="19" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="13" source_node_id="1" sink_node_id="21" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="14" source_node_id="13" sink_node_id="22" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="15" source_node_id="22" sink_node_id="17" source_channel="Preprocessed Data" sink_channel="Data" enabled="true" source_channel_id="preprocessed_data" sink_channel_id="data" />
		<link id="16" source_node_id="19" sink_node_id="23" source_channel="Data Sample" sink_channel="Data" enabled="true" source_channel_id="data_sample" sink_channel_id="data" />
		<link id="17" source_node_id="18" sink_node_id="24" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="18" source_node_id="18" sink_node_id="25" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="19" source_node_id="25" sink_node_id="20" source_channel="Model" sink_channel="Object" enabled="true" source_channel_id="model" sink_channel_id="object" />
		<link id="20" source_node_id="16" sink_node_id="18" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="21" source_node_id="14" sink_node_id="16" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="22" source_node_id="17" sink_node_id="18" source_channel="Selected Data" sink_channel="Extra Data" enabled="true" source_channel_id="selected_data" sink_channel_id="extra_data" />
		<link id="23" source_node_id="1" sink_node_id="26" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="24" source_node_id="25" sink_node_id="23" source_channel="Model" sink_channel="Predictors" enabled="true" source_channel_id="model" sink_channel_id="predictors" />
		<link id="25" source_node_id="19" sink_node_id="11" source_channel="Data Sample" sink_channel="Data" enabled="true" source_channel_id="data_sample" sink_channel_id="data" />
		<link id="26" source_node_id="23" sink_node_id="27" source_channel="Predictions" sink_channel="Data" enabled="true" source_channel_id="annotated" sink_channel_id="data" />
		<link id="27" source_node_id="27" sink_node_id="28" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
		<link id="28" source_node_id="28" sink_node_id="29" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="29" source_node_id="1" sink_node_id="30" source_channel="Selected Data" sink_channel="Data" enabled="true" source_channel_id="selected_data" sink_channel_id="data" />
	</links>
	<annotations />
	<thumbnail />
	<node_properties>
		<properties node_id="0" format="pickle">gASVGHUAAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjAxyZWNlbnRfcGF0aHOUXZQojB5v
cmFuZ2V3aWRnZXQudXRpbHMuZmlsZWRpYWxvZ3OUjApSZWNlbnRQYXRolJOUKYGUfZQojAdhYnNw
YXRolIxHQzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9Eb2N1bWVudHMvcmlzay1jcmVkaXQvbm90ZWJv
b2tzL3Jpc2tfdHJhdGFkby5jc3aUjAZwcmVmaXiUTowHcmVscGF0aJROjAV0aXRsZZSMAJSMBXNo
ZWV0lGgOjAtmaWxlX2Zvcm1hdJROdWJoBimBlH2UKGgJjDUvaG9tZS9ub2lzZS9Eb2N1bWVudG9z
L3Jpc2stY3JlZGl0L25vdGVib29rcy9yaXNrLmNzdpRoC05oDE5oDWgOaA9oDmgQTnViaAYpgZR9
lChoCYw/QzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9Eb2N1bWVudHMvcmlzay1jcmVkaXQvbm90ZWJv
b2tzL3Jpc2suY3N2lGgLTmgMTmgNaA5oD2gOaBBOdWJoBimBlH2UKGgJjGFDOi9VbmliYWxzYXMv
VHJhYmFsaG9zLzIwMjQuMi9JbnRlbGlnZW5jaWEgZG9zIG5lZ29jaW9zL1RFRCAxL2RhZG9zL3Rh
YmVsYV9jdXN0b19kZV92aWRhXzIwMTQuY3N2lGgLTmgMTmgNaA5oD2gOaBBOdWJoBimBlH2UKGgJ
jGFDOi9VbmliYWxzYXMvVHJhYmFsaG9zLzIwMjQuMi9JbnRlbGlnZW5jaWEgZG9zIG5lZ29jaW9z
L1RFRCAxL2RhZG9zL3RhYmVsYV9jdXN0b19kZV92aWRhXzIwMTguY3N2lGgLTmgMTmgNaA5oD2gO
aBBOdWJoBimBlH2UKGgJjGFDOi9VbmliYWxzYXMvVHJhYmFsaG9zLzIwMjQuMi9JbnRlbGlnZW5j
aWEgZG9zIG5lZ29jaW9zL1RFRCAxL2RhZG9zL3RhYmVsYV9jdXN0b19kZV92aWRhXzIwMjEuY3N2
lGgLTmgMTmgNaA5oD2gOaBBOdWJoBimBlH2UKGgJjEFDOi9Vc2Vycy9NcGVkci9Eb3dubG9hZHMv
Q29zdF9vZl9MaXZpbmdfSW5kZXhfYnlfQ291bnRyeV8yMDI0LmNzdpRoC4wHYmFzZWRpcpRoDIwo
Q29zdF9vZl9MaXZpbmdfSW5kZXhfYnlfQ291bnRyeV8yMDI0LmNzdpRoDWgOaA9oDmgQTnViaAYp
gZR9lChoCYxfQzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9BcHBEYXRhL0xvY2FsL1Byb2dyYW1zL09y
YW5nZS9MaWIvc2l0ZS1wYWNrYWdlcy9PcmFuZ2UvZGF0YXNldHMvaXJpcy50YWKUaAuMD3NhbXBs
ZS1kYXRhc2V0c5RoDIwIaXJpcy50YWKUaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMYkM6L1VzZXJz
L0dyYcO6bmEgTW90b3MvQXBwRGF0YS9Mb2NhbC9Qcm9ncmFtcy9PcmFuZ2UvTGliL3NpdGUtcGFj
a2FnZXMvT3JhbmdlL2RhdGFzZXRzL3RpdGFuaWMudGFilGgLaChoDIwLdGl0YW5pYy50YWKUaA1o
DmgPaA5oEE51YmgGKYGUfZQoaAmMYkM6L1VzZXJzL0dyYcO6bmEgTW90b3MvQXBwRGF0YS9Mb2Nh
bC9Qcm9ncmFtcy9PcmFuZ2UvTGliL3NpdGUtcGFja2FnZXMvT3JhbmdlL2RhdGFzZXRzL2hvdXNp
bmcudGFilGgLaChoDIwLaG91c2luZy50YWKUaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMaEM6L1Vz
ZXJzL0dyYcO6bmEgTW90b3MvQXBwRGF0YS9Mb2NhbC9Qcm9ncmFtcy9PcmFuZ2UvTGliL3NpdGUt
cGFja2FnZXMvT3JhbmdlL2RhdGFzZXRzL2hlYXJ0X2Rpc2Vhc2UudGFilGgLaChoDIwRaGVhcnRf
ZGlzZWFzZS50YWKUaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMaUM6L1VzZXJzL0dyYcO6bmEgTW90
b3MvQXBwRGF0YS9Mb2NhbC9Qcm9ncmFtcy9PcmFuZ2UvTGliL3NpdGUtcGFja2FnZXMvT3Jhbmdl
L2RhdGFzZXRzL2Jyb3duLXNlbGVjdGVkLnRhYpRoC2goaAyMEmJyb3duLXNlbGVjdGVkLnRhYpRo
DWgOaA9oDmgQTnViaAYpgZR9lChoCYxeQzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9BcHBEYXRhL0xv
Y2FsL1Byb2dyYW1zL09yYW5nZS9MaWIvc2l0ZS1wYWNrYWdlcy9PcmFuZ2UvZGF0YXNldHMvem9v
LnRhYpRoC2goaAyMB3pvby50YWKUaA1oDmgPaA5oEE51YmWMC3JlY2VudF91cmxzlF2UjBNzYXZl
ZFdpZGdldEdlb21ldHJ5lENCAdnQywADAAAAAAFAAAAAYAAAA8EAAAKDAAABQQAAAH4AAAPAAAAC
ggAAAAAAAAAABQAAAAFBAAAAfgAAA8AAAAKClIwLc2hlZXRfbmFtZXOUfZSMBnNvdXJjZZRLAIwD
dXJslGgOjA1kb21haW5fZWRpdG9ylH2UjAtfX3ZlcnNpb25fX5RLAYwQY29udGV4dF9zZXR0aW5n
c5RdlCiMFW9yYW5nZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9lCiMBnZhbHVlc5R9
lCiMCXZhcmlhYmxlc5RdlGhGfZRoUl2UKF2UKIwJRmVhdHVyZSAxlIwUT3JhbmdlLmRhdGEudmFy
aWFibGWUjBJDb250aW51b3VzVmFyaWFibGWUk5RLAGgOiGVdlCiMClVubmFtZWQ6IDCUaFpLAGgO
iGVdlCiMAmlklGhaSwBoDohlXZQojAltZW1iZXJfaWSUaFpLAGgOiGVdlCiMCWxvYW5fYW1udJRo
WksAaA6IZV2UKIwLZnVuZGVkX2FtbnSUaFpLAGgOiGVdlCiMD2Z1bmRlZF9hbW50X2ludpRoWksA
aA6IZV2UKIwEdGVybZRoWIwQRGlzY3JldGVWYXJpYWJsZZSTlEsAjBQzNiBtb250aHMsIDYwIG1v
bnRoc5SJZV2UKIwIaW50X3JhdGWUaFpLAGgOiGVdlCiMC2luc3RhbGxtZW50lGhaSwBoDohlXZQo
jAVncmFkZZRoaksAjBNBLCBCLCBDLCBELCBFLCBGLCBHlIllXZQojAlzdWJfZ3JhZGWUaGpLAIxT
QTEsIEEyLCBBMywgQTQsIEE1LCBCMSwgQjIsIEIzLCBCNCwgQjUsIEMxLCBDMiwgQzMsIEM0LCBD
NSwgRDEsIEQyLCBEMywgRDQsIEQ1LCAuLi6UiWVdlCiMCmVtcF9sZW5ndGiUaGpLAIxjMSB5ZWFy
LCAyIHllYXJzLCAzIHllYXJzLCA0IHllYXJzLCA1IHllYXJzLCA2IHllYXJzLCA3IHllYXJzLCA4
IHllYXJzLCA5IHllYXJzLCAxMCsgeWVhcnMsIDwgMSB5ZWFylIllXZQojA5ob21lX293bmVyc2hp
cJRoaksAjCBNT1JUR0FHRSwgTk9ORSwgT1RIRVIsIE9XTiwgUkVOVJSJZV2UKIwKYW5udWFsX2lu
Y5RoWksAaA6IZV2UKIwTdmVyaWZpY2F0aW9uX3N0YXR1c5RoaksAjCdOb3QgVmVyaWZpZWQsIFNv
dXJjZSBWZXJpZmllZCwgVmVyaWZpZWSUiWVdlCiMB2lzc3VlX2SUaGpLAIyjQXByLTA4LCBBcHIt
MDksIEFwci0xMCwgQXByLTExLCBBdWctMDcsIEF1Zy0wOCwgQXVnLTA5LCBBdWctMTAsIEF1Zy0x
MSwgRGVjLTA3LCBEZWMtMDgsIERlYy0wOSwgRGVjLTEwLCBEZWMtMTEsIERlYy0xMywgRmViLTA4
LCBGZWItMDksIEZlYi0xMCwgRmViLTExLCBKYW4tMDgsIC4uLpSJZV2UKIwLbG9hbl9zdGF0dXOU
aGpLAIzKQ2hhcmdlZCBPZmYsIEN1cnJlbnQsIERlZmF1bHQsIERvZXMgbm90IG1lZXQgdGhlIGNy
ZWRpdCBwb2xpY3kuIFN0YXR1czpDaGFyZ2VkIE9mZiwgRG9lcyBub3QgbWVldCB0aGUgY3JlZGl0
IHBvbGljeS4gU3RhdHVzOkZ1bGx5IFBhaWQsIEZ1bGx5IFBhaWQsIEluIEdyYWNlIFBlcmlvZCwg
TGF0ZSAoMTYtMzAgZGF5cyksIExhdGUgKDMxLTEyMCBkYXlzKZSJZV2UKIwKcHltbnRfcGxhbpRo
aksAjARuLCB5lIllXZQojAdwdXJwb3NllGhqSwCMp2NhciwgY3JlZGl0X2NhcmQsIGRlYnRfY29u
c29saWRhdGlvbiwgZWR1Y2F0aW9uYWwsIGhvbWVfaW1wcm92ZW1lbnQsIGhvdXNlLCBtYWpvcl9w
dXJjaGFzZSwgbWVkaWNhbCwgbW92aW5nLCBvdGhlciwgcmVuZXdhYmxlX2VuZXJneSwgc21hbGxf
YnVzaW5lc3MsIHZhY2F0aW9uLCB3ZWRkaW5nlIllXZQojAphZGRyX3N0YXRllGhqSwCMU0FLLCBB
TCwgQVIsIEFaLCBDQSwgQ08sIENULCBEQywgREUsIEZMLCBHQSwgSEksIElBLCBJRCwgSUwsIElO
LCBLUywgS1ksIExBLCBNQSwgLi4ulIllXZQojANkdGmUaFpLAGgOiGVdlCiMC2RlbGlucV8yeXJz
lGhaSwBoDohlXZQojA5pbnFfbGFzdF82bXRoc5RoWksAaA6IZV2UKIwWbXRoc19zaW5jZV9sYXN0
X2RlbGlucZRoWksAaA6IZV2UKIwWbXRoc19zaW5jZV9sYXN0X3JlY29yZJRoWksAaA6IZV2UKIwI
b3Blbl9hY2OUaFpLAGgOiGVdlCiMB3B1Yl9yZWOUaFpLAGgOiGVdlCiMCXJldm9sX2JhbJRoWksA
aA6IZV2UKIwKcmV2b2xfdXRpbJRoWksAaA6IZV2UKIwJdG90YWxfYWNjlGhaSwBoDohlXZQojBNp
bml0aWFsX2xpc3Rfc3RhdHVzlGhqSwCMBGYsIHeUiWVdlCiMCW91dF9wcm5jcJRoWksAaA6IZV2U
KIwNb3V0X3BybmNwX2ludpRoWksAaA6IZV2UKIwLdG90YWxfcHltbnSUaFpLAGgOiGVdlCiMD3Rv
dGFsX3B5bW50X2ludpRoWksAaA6IZV2UKIwPdG90YWxfcmVjX3BybmNwlGhaSwBoDohlXZQojA10
b3RhbF9yZWNfaW50lGhaSwBoDohlXZQojBJ0b3RhbF9yZWNfbGF0ZV9mZWWUaFpLAGgOiGVdlCiM
CnJlY292ZXJpZXOUaFpLAGgOiGVdlCiMF2NvbGxlY3Rpb25fcmVjb3ZlcnlfZmVllGhaSwBoDohl
XZQojAxsYXN0X3B5bW50X2SUaGpLAIyjQXByLTA4LCBBcHItMDksIEFwci0xMCwgQXByLTExLCBB
cHItMTIsIEFwci0xMywgQXByLTE0LCBBcHItMTUsIEF1Zy0wOCwgQXVnLTA5LCBBdWctMTAsIEF1
Zy0xMSwgQXVnLTEyLCBBdWctMTMsIEF1Zy0xNCwgQXVnLTE1LCBEZWMtMDcsIERlYy0wOCwgRGVj
LTA5LCBEZWMtMTAsIC4uLpSJZV2UKIwPbGFzdF9weW1udF9hbW50lGhaSwBoDohlXZQojBpjb2xs
ZWN0aW9uc18xMl9tdGhzX2V4X21lZJRoWksAaA6IZV2UKIwbbXRoc19zaW5jZV9sYXN0X21ham9y
X2Rlcm9nlGhaSwBoDohlXZQojAtwb2xpY3lfY29kZZRoaksAjAExlIhlXZQojBBhcHBsaWNhdGlv
bl90eXBllGhqSwCMCklORElWSURVQUyUiWVdlCiMEGFubnVhbF9pbmNfam9pbnSUaFpLAGgOiGVd
lCiMCWR0aV9qb2ludJRoWksAaA6IZV2UKIwZdmVyaWZpY2F0aW9uX3N0YXR1c19qb2ludJRoWksA
aA6IZV2UKIwOYWNjX25vd19kZWxpbnGUaFpLAGgOiGVdlCiMDHRvdF9jb2xsX2FtdJRoWksAaA6I
ZV2UKIwLdG90X2N1cl9iYWyUaFpLAGgOiGVdlCiMC29wZW5fYWNjXzZtlGhaSwBoDohlXZQojApv
cGVuX2lsXzZtlGhaSwBoDohlXZQojAtvcGVuX2lsXzEybZRoWksAaA6IZV2UKIwLb3Blbl9pbF8y
NG2UaFpLAGgOiGVdlCiMEm10aHNfc2luY2VfcmNudF9pbJRoWksAaA6IZV2UKIwMdG90YWxfYmFs
X2lslGhaSwBoDohlXZQojAdpbF91dGlslGhaSwBoDohlXZQojAtvcGVuX3J2XzEybZRoWksAaA6I
ZV2UKIwLb3Blbl9ydl8yNG2UaFpLAGgOiGVdlCiMCm1heF9iYWxfYmOUaFpLAGgOiGVdlCiMCGFs
bF91dGlslGhaSwBoDohlXZQojBB0b3RhbF9yZXZfaGlfbGltlGhaSwBoDohlXZQojAZpbnFfZmmU
aFpLAGgOiGVdlCiMC3RvdGFsX2N1X3RslGhaSwBoDohlXZQojAxpbnFfbGFzdF8xMm2UaFpLAGgO
iGVdlCiMDmVtcF9sZW5ndGhfaW50lGhaSwBoDohlXZQojBVlYXJsaWVzdF9jcl9saW5lX2RhdGWU
aFiMDFRpbWVWYXJpYWJsZZSTlEsAaA6IZV2UKIwbbXRoc19zaW5jZV9lYXJsaWVzdF9jcl9saW5l
lGhaSwBoDohlXZQojAh0ZXJtX2ludJRoWksAaA6IZV2UKIwMaXNzdWVfZF9kYXRllGj3SwBoDohl
XZQojBJtdGhzX3NpbmNlX2lzc3VlX2SUaFpLAGgOiGVdlCiMCGdvb2RfYmFklGhqSwCMBDAsIDGU
iGVdlCiMCWVtcF90aXRsZZRoWIwOU3RyaW5nVmFyaWFibGWUk5RLAmgOiWVdlCiMA3VybJRqBgEA
AEsCaA6JZV2UKIwEZGVzY5RqBgEAAEsCaA6JZV2UKIwFdGl0bGWUagYBAABLAmgOiWVdlCiMCHpp
cF9jb2RllGoGAQAASwJoDollXZQojBBlYXJsaWVzdF9jcl9saW5llGoGAQAASwJoDollXZQojAxu
ZXh0X3B5bW50X2SUagYBAABLAmgOiWVdlCiMEmxhc3RfY3JlZGl0X3B1bGxfZJRqBgEAAEsCaA6J
ZWVzaEhLAXWMCmF0dHJpYnV0ZXOUKGhXSwKGlGhcSwKGlGheSwKGlGhgSwKGlGhiSwKGlGhkSwKG
lGhmSwKGlGhoXZQojAkzNiBtb250aHOUjAk2MCBtb250aHOUZYaUaG1LAoaUaG9LAoaUaHFdlCiM
AUGUjAFClIwBQ5SMAUSUjAFFlIwBRpSMAUeUZYaUaHRdlCiMAkExlIwCQTKUjAJBM5SMAkE0lIwC
QTWUjAJCMZSMAkIylIwCQjOUjAJCNJSMAkI1lIwCQzGUjAJDMpSMAkMzlIwCQzSUjAJDNZSMAkQx
lIwCRDKUjAJEM5SMAkQ0lIwCRDWUjAJFMZSMAkUylIwCRTOUjAJFNJSMAkU1lIwCRjGUjAJGMpSM
AkYzlIwCRjSUjAJGNZSMAkcxlIwCRzKUjAJHM5SMAkc0lIwCRzWUZYaUaHddlCiMBjEgeWVhcpSM
BzIgeWVhcnOUjAczIHllYXJzlIwHNCB5ZWFyc5SMBzUgeWVhcnOUjAc2IHllYXJzlIwHNyB5ZWFy
c5SMBzggeWVhcnOUjAc5IHllYXJzlIwJMTArIHllYXJzlIwIPCAxIHllYXKUZYaUaHpdlCiMCE1P
UlRHQUdFlIwETk9ORZSMBU9USEVSlIwDT1dOlIwEUkVOVJRlhpRofUsChpRof12UKIwMTm90IFZl
cmlmaWVklIwPU291cmNlIFZlcmlmaWVklIwIVmVyaWZpZWSUZYaUaIJdlCiMBkFwci0wOJSMBkFw
ci0wOZSMBkFwci0xMJSMBkFwci0xMZSMBkF1Zy0wN5SMBkF1Zy0wOJSMBkF1Zy0wOZSMBkF1Zy0x
MJSMBkF1Zy0xMZSMBkRlYy0wN5SMBkRlYy0wOJSMBkRlYy0wOZSMBkRlYy0xMJSMBkRlYy0xMZSM
BkRlYy0xM5SMBkZlYi0wOJSMBkZlYi0wOZSMBkZlYi0xMJSMBkZlYi0xMZSMBkphbi0wOJSMBkph
bi0wOZSMBkphbi0xMJSMBkphbi0xMZSMBkp1bC0wN5SMBkp1bC0wOJSMBkp1bC0wOZSMBkp1bC0x
MJSMBkp1bC0xMZSMBkp1bi0wN5SMBkp1bi0wOJSMBkp1bi0wOZSMBkp1bi0xMJSMBkp1bi0xMZSM
Bk1hci0wOJSMBk1hci0wOZSMBk1hci0xMJSMBk1hci0xMZSMBk1heS0wOJSMBk1heS0wOZSMBk1h
eS0xMJSMBk1heS0xMZSMBk5vdi0wN5SMBk5vdi0wOJSMBk5vdi0wOZSMBk5vdi0xMJSMBk5vdi0x
MZSMBk5vdi0xM5SMBk9jdC0wN5SMBk9jdC0wOJSMBk9jdC0wOZSMBk9jdC0xMJSMBk9jdC0xMZSM
BlNlcC0wN5SMBlNlcC0wOJSMBlNlcC0wOZSMBlNlcC0xMJSMBlNlcC0xMZRlhpRohV2UKIwLQ2hh
cmdlZCBPZmaUjAdDdXJyZW50lIwHRGVmYXVsdJSMM0RvZXMgbm90IG1lZXQgdGhlIGNyZWRpdCBw
b2xpY3kuIFN0YXR1czpDaGFyZ2VkIE9mZpSMMkRvZXMgbm90IG1lZXQgdGhlIGNyZWRpdCBwb2xp
Y3kuIFN0YXR1czpGdWxseSBQYWlklIwKRnVsbHkgUGFpZJSMD0luIEdyYWNlIFBlcmlvZJSMEUxh
dGUgKDE2LTMwIGRheXMplIwSTGF0ZSAoMzEtMTIwIGRheXMplGWGlGiIXZQojAFulIwBeZRlhpRo
i12UKIwDY2FylIwLY3JlZGl0X2NhcmSUjBJkZWJ0X2NvbnNvbGlkYXRpb26UjAtlZHVjYXRpb25h
bJSMEGhvbWVfaW1wcm92ZW1lbnSUjAVob3VzZZSMDm1ham9yX3B1cmNoYXNllIwHbWVkaWNhbJSM
Bm1vdmluZ5SMBW90aGVylIwQcmVuZXdhYmxlX2VuZXJneZSMDnNtYWxsX2J1c2luZXNzlIwIdmFj
YXRpb26UjAd3ZWRkaW5nlGWGlGiOXZQojAJBS5SMAkFMlIwCQVKUjAJBWpSMAkNBlIwCQ0+UjAJD
VJSMAkRDlIwCREWUjAJGTJSMAkdBlIwCSEmUjAJJQZSMAklElIwCSUyUjAJJTpSMAktTlIwCS1mU
jAJMQZSMAk1BlIwCTUSUjAJNRZSMAk1JlIwCTU6UjAJNT5SMAk1TlIwCTVSUjAJOQ5SMAk5FlIwC
TkiUjAJOSpSMAk5NlIwCTlaUjAJOWZSMAk9IlIwCT0uUjAJPUpSMAlBBlIwCUkmUjAJTQ5SMAlNE
lIwCVE6UjAJUWJSMAlVUlIwCVkGUjAJWVJSMAldBlIwCV0mUjAJXVpSMAldZlGWGlGiRSwKGlGiT
SwKGlGiVSwKGlGiXSwKGlGiZSwKGlGibSwKGlGidSwKGlGifSwKGlGihSwKGlGijSwKGlGilXZQo
jAFmlIwBd5RlhpRoqEsChpRoqksChpRorEsChpRorksChpRosEsChpRosksChpRotEsChpRotksC
hpRouEsChpRoul2UKIwGQXByLTA4lIwGQXByLTA5lIwGQXByLTEwlIwGQXByLTExlIwGQXByLTEy
lIwGQXByLTEzlIwGQXByLTE0lIwGQXByLTE1lIwGQXVnLTA4lIwGQXVnLTA5lIwGQXVnLTEwlIwG
QXVnLTExlIwGQXVnLTEylIwGQXVnLTEzlIwGQXVnLTE0lIwGQXVnLTE1lIwGRGVjLTA3lIwGRGVj
LTA4lIwGRGVjLTA5lIwGRGVjLTEwlIwGRGVjLTExlIwGRGVjLTEylIwGRGVjLTEzlIwGRGVjLTE0
lIwGRGVjLTE1lIwGRmViLTA4lIwGRmViLTA5lIwGRmViLTEwlIwGRmViLTExlIwGRmViLTEylIwG
RmViLTEzlIwGRmViLTE0lIwGRmViLTE1lIwGSmFuLTA4lIwGSmFuLTA5lIwGSmFuLTEwlIwGSmFu
LTExlIwGSmFuLTEylIwGSmFuLTEzlIwGSmFuLTE0lIwGSmFuLTE1lIwGSmFuLTE2lIwGSnVsLTA4
lIwGSnVsLTA5lIwGSnVsLTEwlIwGSnVsLTExlIwGSnVsLTEylIwGSnVsLTEzlIwGSnVsLTE0lIwG
SnVsLTE1lIwGSnVuLTA4lIwGSnVuLTA5lIwGSnVuLTEwlIwGSnVuLTExlIwGSnVuLTEylIwGSnVu
LTEzlIwGSnVuLTE0lIwGSnVuLTE1lIwGTWFyLTA4lIwGTWFyLTA5lIwGTWFyLTEwlIwGTWFyLTEx
lIwGTWFyLTEylIwGTWFyLTEzlIwGTWFyLTE0lIwGTWFyLTE1lIwGTWF5LTA4lIwGTWF5LTA5lIwG
TWF5LTEwlIwGTWF5LTExlIwGTWF5LTEylIwGTWF5LTEzlIwGTWF5LTE0lIwGTWF5LTE1lIwGTm92
LTA4lIwGTm92LTA5lIwGTm92LTEwlIwGTm92LTExlIwGTm92LTEylIwGTm92LTEzlIwGTm92LTE0
lIwGTm92LTE1lIwGT2N0LTA4lIwGT2N0LTA5lIwGT2N0LTEwlIwGT2N0LTExlIwGT2N0LTEylIwG
T2N0LTEzlIwGT2N0LTE0lIwGT2N0LTE1lIwGU2VwLTA4lIwGU2VwLTA5lIwGU2VwLTEwlIwGU2Vw
LTExlIwGU2VwLTEylIwGU2VwLTEzlIwGU2VwLTE0lIwGU2VwLTE1lGWGlGi9SwKGlGi/SwKGlGjB
SwKGlGjDXZRoxGGGlGjGXZRox2GGlGjJSwKGlGjLSwKGlGjNSwKGlGjPSwKGlGjRSwKGlGjTSwKG
lGjVSwKGlGjXSwKGlGjZSwKGlGjbSwKGlGjdSwKGlGjfSwKGlGjhSwKGlGjjSwKGlGjlSwKGlGjn
SwKGlGjpSwKGlGjrSwKGlGjtSwKGlGjvSwKGlGjxSwKGlGjzSwKGlGj1SwSGlGj5SwKGlGj7SwKG
lGj9SwSGlGj/SwKGlGoBAQAAXZQojAEwlGjEZYaUdJSMBW1ldGFzlChqBAEAAEsDhpRqCAEAAEsD
hpRqCgEAAEsDhpRqDAEAAEsDhpRqDgEAAEsDhpRqEAEAAEsDhpRqEgEAAEsDhpRqFAEAAEsDhpR0
lIwKY2xhc3NfdmFyc5QpjBJtb2RpZmllZF92YXJpYWJsZXOUXZR1YmhNKYGUfZQoaFB9lChoUl2U
aEZ9lGhSXZQoXZQojAlGZWF0dXJlIDGUaFpLAGgOiGVdlCiMClVubmFtZWQ6IDCUaFpLAGgOiGVd
lCiMAmlklGhaSwBoDohlXZQojAltZW1iZXJfaWSUaFpLAGgOiGVdlCiMCWxvYW5fYW1udJRoWksA
aA6IZV2UKIwLZnVuZGVkX2FtbnSUaFpLAGgOiGVdlCiMD2Z1bmRlZF9hbW50X2ludpRoWksAaA6I
ZV2UKIwEdGVybZRoaksAjBQzNiBtb250aHMsIDYwIG1vbnRoc5SJZV2UKIwIaW50X3JhdGWUaFpL
AGgOiGVdlCiMC2luc3RhbGxtZW50lGhaSwBoDohlXZQojAVncmFkZZRoaksAjBNBLCBCLCBDLCBE
LCBFLCBGLCBHlIllXZQojAlzdWJfZ3JhZGWUaGpLAIxTQTEsIEEyLCBBMywgQTQsIEE1LCBCMSwg
QjIsIEIzLCBCNCwgQjUsIEMxLCBDMiwgQzMsIEM0LCBDNSwgRDEsIEQyLCBEMywgRDQsIEQ1LCAu
Li6UiWVdlCiMCmVtcF9sZW5ndGiUaGpLAIxjMSB5ZWFyLCAyIHllYXJzLCAzIHllYXJzLCA0IHll
YXJzLCA1IHllYXJzLCA2IHllYXJzLCA3IHllYXJzLCA4IHllYXJzLCA5IHllYXJzLCAxMCsgeWVh
cnMsIDwgMSB5ZWFylIllXZQojA5ob21lX293bmVyc2hpcJRoaksAjBpNT1JUR0FHRSwgT1RIRVIs
IE9XTiwgUkVOVJSJZV2UKIwKYW5udWFsX2luY5RoWksAaA6IZV2UKIwTdmVyaWZpY2F0aW9uX3N0
YXR1c5RoaksAjCdOb3QgVmVyaWZpZWQsIFNvdXJjZSBWZXJpZmllZCwgVmVyaWZpZWSUiWVdlCiM
B2lzc3VlX2SUaGpLAIyeQXByLTExLCBBdWctMTAsIEF1Zy0xMSwgRGVjLTEwLCBEZWMtMTEsIEZl
Yi0xMSwgSmFuLTExLCBKdWwtMTAsIEp1bC0xMSwgSnVuLTEwLCBKdW4tMTEsIE1hci0xMSwgTWF5
LTEwLCBNYXktMTEsIE5vdi0xMCwgTm92LTExLCBPY3QtMTAsIE9jdC0xMSwgU2VwLTEwLCBTZXAt
MTGUiWVdlCiMC2xvYW5fc3RhdHVzlGhqSwCMYUNoYXJnZWQgT2ZmLCBDdXJyZW50LCBEZWZhdWx0
LCBGdWxseSBQYWlkLCBJbiBHcmFjZSBQZXJpb2QsIExhdGUgKDE2LTMwIGRheXMpLCBMYXRlICgz
MS0xMjAgZGF5cymUiWVdlCiMCnB5bW50X3BsYW6UaGpLAIwEbiwgeZSJZV2UKIwHcHVycG9zZZRo
aksAjKdjYXIsIGNyZWRpdF9jYXJkLCBkZWJ0X2NvbnNvbGlkYXRpb24sIGVkdWNhdGlvbmFsLCBo
b21lX2ltcHJvdmVtZW50LCBob3VzZSwgbWFqb3JfcHVyY2hhc2UsIG1lZGljYWwsIG1vdmluZywg
b3RoZXIsIHJlbmV3YWJsZV9lbmVyZ3ksIHNtYWxsX2J1c2luZXNzLCB2YWNhdGlvbiwgd2VkZGlu
Z5SJZV2UKIwKYWRkcl9zdGF0ZZRoaksAjFNBSywgQUwsIEFSLCBBWiwgQ0EsIENPLCBDVCwgREMs
IERFLCBGTCwgR0EsIEhJLCBJQSwgSUwsIEtTLCBLWSwgTEEsIE1BLCBNRCwgTUksIC4uLpSJZV2U
KIwDZHRplGhaSwBoDohlXZQojAtkZWxpbnFfMnlyc5RoWksAaA6IZV2UKIwOaW5xX2xhc3RfNm10
aHOUaFpLAGgOiGVdlCiMFm10aHNfc2luY2VfbGFzdF9kZWxpbnGUaFpLAGgOiGVdlCiMFm10aHNf
c2luY2VfbGFzdF9yZWNvcmSUaFpLAGgOiGVdlCiMCG9wZW5fYWNjlGhaSwBoDohlXZQojAdwdWJf
cmVjlGhaSwBoDohlXZQojAlyZXZvbF9iYWyUaFpLAGgOiGVdlCiMCnJldm9sX3V0aWyUaFpLAGgO
iGVdlCiMCXRvdGFsX2FjY5RoWksAaA6IZV2UKIwTaW5pdGlhbF9saXN0X3N0YXR1c5RoaksAagQC
AACJZV2UKIwJb3V0X3BybmNwlGhaSwBoDohlXZQojA1vdXRfcHJuY3BfaW52lGhaSwBoDohlXZQo
jAt0b3RhbF9weW1udJRoWksAaA6IZV2UKIwPdG90YWxfcHltbnRfaW52lGhaSwBoDohlXZQojA90
b3RhbF9yZWNfcHJuY3CUaFpLAGgOiGVdlCiMDXRvdGFsX3JlY19pbnSUaFpLAGgOiGVdlCiMEnRv
dGFsX3JlY19sYXRlX2ZlZZRoWksAaA6IZV2UKIwKcmVjb3Zlcmllc5RoWksAaA6IZV2UKIwXY29s
bGVjdGlvbl9yZWNvdmVyeV9mZWWUaFpLAGgOiGVdlCiMDGxhc3RfcHltbnRfZJRoaksAjKNBcHIt
MTEsIEFwci0xMiwgQXByLTEzLCBBcHItMTQsIEFwci0xNSwgQXVnLTEwLCBBdWctMTEsIEF1Zy0x
MiwgQXVnLTEzLCBBdWctMTQsIEF1Zy0xNSwgRGVjLTEwLCBEZWMtMTEsIERlYy0xMiwgRGVjLTEz
LCBEZWMtMTQsIERlYy0xNSwgRmViLTExLCBGZWItMTIsIEZlYi0xMywgLi4ulIllXZQojA9sYXN0
X3B5bW50X2FtbnSUaFpLAGgOiGVdlCiMDG5leHRfcHltbnRfZJRoaksAjA5GZWItMTYsIEphbi0x
NpSJZV2UKIwSbGFzdF9jcmVkaXRfcHVsbF9klGhqSwCMo0Fwci0xMSwgQXByLTEyLCBBcHItMTMs
IEFwci0xNCwgQXByLTE1LCBBdWctMTAsIEF1Zy0xMSwgQXVnLTEyLCBBdWctMTMsIEF1Zy0xNCwg
QXVnLTE1LCBEZWMtMTAsIERlYy0xMSwgRGVjLTEyLCBEZWMtMTMsIERlYy0xNCwgRGVjLTE1LCBG
ZWItMTEsIEZlYi0xMiwgRmViLTEzLCAuLi6UiWVdlCiMGmNvbGxlY3Rpb25zXzEyX210aHNfZXhf
bWVklGhqSwCMAzAuMJSIZV2UKIwbbXRoc19zaW5jZV9sYXN0X21ham9yX2Rlcm9nlGhaSwBoDohl
XZQojAtwb2xpY3lfY29kZZRoaksAaMSIZV2UKIwQYXBwbGljYXRpb25fdHlwZZRoaksAjApJTkRJ
VklEVUFMlIllXZQojBBhbm51YWxfaW5jX2pvaW50lGhaSwBoDohlXZQojAlkdGlfam9pbnSUaFpL
AGgOiGVdlCiMGXZlcmlmaWNhdGlvbl9zdGF0dXNfam9pbnSUaFpLAGgOiGVdlCiMDmFjY19ub3df
ZGVsaW5xlGhqSwCMAzAuMJSIZV2UKIwMdG90X2NvbGxfYW10lGhaSwBoDohlXZQojAt0b3RfY3Vy
X2JhbJRoWksAaA6IZV2UKIwLb3Blbl9hY2NfNm2UaFpLAGgOiGVdlCiMCm9wZW5faWxfNm2UaFpL
AGgOiGVdlCiMC29wZW5faWxfMTJtlGhaSwBoDohlXZQojAtvcGVuX2lsXzI0bZRoWksAaA6IZV2U
KIwSbXRoc19zaW5jZV9yY250X2lslGhaSwBoDohlXZQojAx0b3RhbF9iYWxfaWyUaFpLAGgOiGVd
lCiMB2lsX3V0aWyUaFpLAGgOiGVdlCiMC29wZW5fcnZfMTJtlGhaSwBoDohlXZQojAtvcGVuX3J2
XzI0bZRoWksAaA6IZV2UKIwKbWF4X2JhbF9iY5RoWksAaA6IZV2UKIwIYWxsX3V0aWyUaFpLAGgO
iGVdlCiMEHRvdGFsX3Jldl9oaV9saW2UaFpLAGgOiGVdlCiMBmlucV9maZRoWksAaA6IZV2UKIwL
dG90YWxfY3VfdGyUaFpLAGgOiGVdlCiMDGlucV9sYXN0XzEybZRoWksAaA6IZV2UKIwOZW1wX2xl
bmd0aF9pbnSUaFpLAGgOiGVdlCiMFWVhcmxpZXN0X2NyX2xpbmVfZGF0ZZRo90sAaA6IZV2UKIwb
bXRoc19zaW5jZV9lYXJsaWVzdF9jcl9saW5llGhaSwBoDohlXZQojAh0ZXJtX2ludJRoWksAaA6I
ZV2UKIwMaXNzdWVfZF9kYXRllGj3SwBoDohlXZQojBJtdGhzX3NpbmNlX2lzc3VlX2SUaFpLAGgO
iGVdlCiMCGdvb2RfYmFklGhqSwGMBDAsIDGUiGVdlCiMCWVtcF90aXRsZZRqBgEAAEsCaA6JZV2U
KIwDdXJslGoGAQAASwJoDollXZQojARkZXNjlGoGAQAASwJoDollXZQojAV0aXRsZZRqBgEAAEsC
aA6JZV2UKIwIemlwX2NvZGWUagYBAABLAmgOiWVdlCiMEGVhcmxpZXN0X2NyX2xpbmWUagYBAABL
AmgOiWVlc2hISwF1ahUBAAAoaq4CAABLAoaUarACAABLAoaUarICAABLAoaUarQCAABLAoaUarYC
AABLAoaUargCAABLAoaUaroCAABLAoaUarwCAABdlCiMCTM2IG1vbnRoc5SMCTYwIG1vbnRoc5Rl
hpRqvwIAAEsChpRqwQIAAEsChpRqwwIAAF2UKGokAQAAaiUBAABqJgEAAGonAQAAaigBAABqKQEA
AGoqAQAAZYaUasYCAABdlCiMAkExlIwCQTKUjAJBM5SMAkE0lIwCQTWUjAJCMZSMAkIylIwCQjOU
jAJCNJSMAkI1lIwCQzGUjAJDMpSMAkMzlIwCQzSUjAJDNZSMAkQxlIwCRDKUjAJEM5SMAkQ0lIwC
RDWUjAJFMZSMAkUylIwCRTOUjAJFNJSMAkU1lIwCRjGUjAJGMpSMAkYzlIwCRjSUjAJGNZSMAkcx
lIwCRzKUjAJHM5SMAkc0lIwCRzWUZYaUaskCAABdlCiMBjEgeWVhcpSMBzIgeWVhcnOUjAczIHll
YXJzlIwHNCB5ZWFyc5SMBzUgeWVhcnOUjAc2IHllYXJzlIwHNyB5ZWFyc5SMBzggeWVhcnOUjAc5
IHllYXJzlIwJMTArIHllYXJzlIwIPCAxIHllYXKUZYaUaswCAABdlCiMCE1PUlRHQUdFlIwFT1RI
RVKUjANPV06UjARSRU5UlGWGlGrPAgAASwKGlGrRAgAAXZQojAxOb3QgVmVyaWZpZWSUjA9Tb3Vy
Y2UgVmVyaWZpZWSUjAhWZXJpZmllZJRlhpRq1AIAAF2UKIwGQXByLTExlIwGQXVnLTEwlIwGQXVn
LTExlIwGRGVjLTEwlIwGRGVjLTExlIwGRmViLTExlIwGSmFuLTExlIwGSnVsLTEwlIwGSnVsLTEx
lIwGSnVuLTEwlIwGSnVuLTExlIwGTWFyLTExlIwGTWF5LTEwlIwGTWF5LTExlIwGTm92LTEwlIwG
Tm92LTExlIwGT2N0LTEwlIwGT2N0LTExlIwGU2VwLTEwlIwGU2VwLTExlGWGlGrXAgAAXZQojAtD
aGFyZ2VkIE9mZpSMB0N1cnJlbnSUjAdEZWZhdWx0lIwKRnVsbHkgUGFpZJSMD0luIEdyYWNlIFBl
cmlvZJSMEUxhdGUgKDE2LTMwIGRheXMplIwSTGF0ZSAoMzEtMTIwIGRheXMplGWGlGraAgAAXZQo
arIBAABqswEAAGWGlGrdAgAAXZQojANjYXKUjAtjcmVkaXRfY2FyZJSMEmRlYnRfY29uc29saWRh
dGlvbpSMC2VkdWNhdGlvbmFslIwQaG9tZV9pbXByb3ZlbWVudJSMBWhvdXNllIwObWFqb3JfcHVy
Y2hhc2WUjAdtZWRpY2FslIwGbW92aW5nlIwFb3RoZXKUjBByZW5ld2FibGVfZW5lcmd5lIwOc21h
bGxfYnVzaW5lc3OUjAh2YWNhdGlvbpSMB3dlZGRpbmeUZYaUauACAABdlCiMAkFLlIwCQUyUjAJB
UpSMAkFalIwCQ0GUjAJDT5SMAkNUlIwCREOUjAJERZSMAkZMlIwCR0GUjAJISZSMAklBlIwCSUyU
jAJLU5SMAktZlIwCTEGUjAJNQZSMAk1ElIwCTUmUjAJNTpSMAk1PlIwCTVOUjAJNVJSMAk5DlIwC
TkiUjAJOSpSMAk5NlIwCTlaUjAJOWZSMAk9IlIwCT0uUjAJPUpSMAlBBlIwCUkmUjAJTQ5SMAlNE
lIwCVE6UjAJUWJSMAlVUlIwCVkGUjAJWVJSMAldBlIwCV0mUjAJXVpSMAldZlGWGlGrjAgAASwKG
lGrlAgAASwKGlGrnAgAASwKGlGrpAgAASwKGlGrrAgAASwKGlGrtAgAASwKGlGrvAgAASwKGlGrx
AgAASwKGlGrzAgAASwKGlGr1AgAASwKGlGr3AgAAXZRqBAIAAGGGlGr5AgAASwKGlGr7AgAASwKG
lGr9AgAASwKGlGr/AgAASwKGlGoBAwAASwKGlGoDAwAASwKGlGoFAwAASwKGlGoHAwAASwKGlGoJ
AwAASwKGlGoLAwAAXZQojAZBcHItMTGUjAZBcHItMTKUjAZBcHItMTOUjAZBcHItMTSUjAZBcHIt
MTWUjAZBdWctMTCUjAZBdWctMTGUjAZBdWctMTKUjAZBdWctMTOUjAZBdWctMTSUjAZBdWctMTWU
jAZEZWMtMTCUjAZEZWMtMTGUjAZEZWMtMTKUjAZEZWMtMTOUjAZEZWMtMTSUjAZEZWMtMTWUjAZG
ZWItMTGUjAZGZWItMTKUjAZGZWItMTOUjAZGZWItMTSUjAZGZWItMTWUjAZKYW4tMTGUjAZKYW4t
MTKUjAZKYW4tMTOUjAZKYW4tMTSUjAZKYW4tMTWUjAZKYW4tMTaUjAZKdWwtMTCUjAZKdWwtMTGU
jAZKdWwtMTKUjAZKdWwtMTOUjAZKdWwtMTSUjAZKdWwtMTWUjAZKdW4tMTGUjAZKdW4tMTKUjAZK
dW4tMTOUjAZKdW4tMTSUjAZKdW4tMTWUjAZNYXItMTGUjAZNYXItMTKUjAZNYXItMTOUjAZNYXIt
MTSUjAZNYXItMTWUjAZNYXktMTGUjAZNYXktMTKUjAZNYXktMTOUjAZNYXktMTSUjAZNYXktMTWU
jAZOb3YtMTCUjAZOb3YtMTGUjAZOb3YtMTKUjAZOb3YtMTOUjAZOb3YtMTSUjAZOb3YtMTWUjAZP
Y3QtMTCUjAZPY3QtMTGUjAZPY3QtMTKUjAZPY3QtMTOUjAZPY3QtMTSUjAZPY3QtMTWUjAZTZXAt
MTCUjAZTZXAtMTGUjAZTZXAtMTKUjAZTZXAtMTOUjAZTZXAtMTSUjAZTZXAtMTWUZYaUag4DAABL
AoaUahADAABdlCiMBkZlYi0xNpSMBkphbi0xNpRlhpRqEwMAAF2UKIwGQXByLTExlIwGQXByLTEy
lIwGQXByLTEzlIwGQXByLTE0lIwGQXByLTE1lIwGQXVnLTEwlIwGQXVnLTExlIwGQXVnLTEylIwG
QXVnLTEzlIwGQXVnLTE0lIwGQXVnLTE1lIwGRGVjLTEwlIwGRGVjLTExlIwGRGVjLTEylIwGRGVj
LTEzlIwGRGVjLTE0lIwGRGVjLTE1lIwGRmViLTExlIwGRmViLTEylIwGRmViLTEzlIwGRmViLTE0
lIwGRmViLTE1lIwGSmFuLTExlIwGSmFuLTEylIwGSmFuLTEzlIwGSmFuLTE0lIwGSmFuLTE1lIwG
SmFuLTE2lIwGSnVsLTEwlIwGSnVsLTExlIwGSnVsLTEylIwGSnVsLTEzlIwGSnVsLTE0lIwGSnVs
LTE1lIwGSnVuLTEwlIwGSnVuLTExlIwGSnVuLTEylIwGSnVuLTEzlIwGSnVuLTE0lIwGSnVuLTE1
lIwGTWFyLTExlIwGTWFyLTEylIwGTWFyLTEzlIwGTWFyLTE0lIwGTWFyLTE1lIwGTWF5LTExlIwG
TWF5LTEylIwGTWF5LTEzlIwGTWF5LTE0lIwGTWF5LTE1lIwGTm92LTEwlIwGTm92LTExlIwGTm92
LTEylIwGTm92LTEzlIwGTm92LTE0lIwGTm92LTE1lIwGT2N0LTEwlIwGT2N0LTExlIwGT2N0LTEy
lIwGT2N0LTEzlIwGT2N0LTE0lIwGT2N0LTE1lIwGU2VwLTEwlIwGU2VwLTExlIwGU2VwLTEylIwG
U2VwLTEzlIwGU2VwLTE0lIwGU2VwLTE1lGWGlGoWAwAAXZRqFwMAAGGGlGoZAwAASwKGlGobAwAA
XZRoxGGGlGodAwAAXZRqHgMAAGGGlGogAwAASwKGlGoiAwAASwKGlGokAwAASwKGlGomAwAAXZRq
JwMAAGGGlGopAwAASwKGlGorAwAASwKGlGotAwAASwKGlGovAwAASwKGlGoxAwAASwKGlGozAwAA
SwKGlGo1AwAASwKGlGo3AwAASwKGlGo5AwAASwKGlGo7AwAASwKGlGo9AwAASwKGlGo/AwAASwKG
lGpBAwAASwKGlGpDAwAASwKGlGpFAwAASwKGlGpHAwAASwKGlGpJAwAASwKGlGpLAwAASwKGlGpN
AwAASwSGlGpPAwAASwKGlGpRAwAASwKGlGpTAwAASwSGlGpVAwAASwKGlGpXAwAAXZQoapcCAABo
xGWGlHSUapoCAAAoaloDAABLA4aUalwDAABLA4aUal4DAABLA4aUamADAABLA4aUamIDAABLA4aU
amQDAABLA4aUdJRqpAIAAClqpQIAAF2UdWJoTSmBlH2UKGhQfZQojAl2YXJpYWJsZXOUXZSMDWRv
bWFpbl9lZGl0b3KUfZRq6QQAAF2UKF2UKIwJRmVhdHVyZSAxlGhaSwBoDohlXZQojAlsb2FuX2Ft
bnSUaFpLAGgOiGVdlCiMC2Z1bmRlZF9hbW50lGhaSwBoDohlXZQojAR0ZXJtlGhqSwCMFDM2IG1v
bnRocywgNjAgbW9udGhzlIllXZQojAhpbnRfcmF0ZZRoWksAaA6IZV2UKIwLaW5zdGFsbG1lbnSU
aFpLAGgOiGVdlCiMBWdyYWRllGhqSwCME0EsIEIsIEMsIEQsIEUsIEYsIEeUiWVdlCiMCXN1Yl9n
cmFkZZRoaksAjFNBMSwgQTIsIEEzLCBBNCwgQTUsIEIxLCBCMiwgQjMsIEI0LCBCNSwgQzEsIEMy
LCBDMywgQzQsIEM1LCBEMSwgRDIsIEQzLCBENCwgRDUsIC4uLpSJZV2UKIwKZW1wX2xlbmd0aJRo
aksAjGMxIHllYXIsIDIgeWVhcnMsIDMgeWVhcnMsIDQgeWVhcnMsIDUgeWVhcnMsIDYgeWVhcnMs
IDcgeWVhcnMsIDggeWVhcnMsIDkgeWVhcnMsIDEwKyB5ZWFycywgPCAxIHllYXKUiWVdlCiMDmhv
bWVfb3duZXJzaGlwlGhqSwCME01PUlRHQUdFLCBPV04sIFJFTlSUiWVdlCiMCmFubnVhbF9pbmOU
aFpLAGgOiGVdlCiME3ZlcmlmaWNhdGlvbl9zdGF0dXOUaGpLAIwnTm90IFZlcmlmaWVkLCBTb3Vy
Y2UgVmVyaWZpZWQsIFZlcmlmaWVklIllXZQojAdpc3N1ZV9klGhqSwCMFkRlYy0xMSwgTm92LTEx
LCBPY3QtMTGUiWVdlCiMC2xvYW5fc3RhdHVzlGhqSwCMYUNoYXJnZWQgT2ZmLCBDdXJyZW50LCBE
ZWZhdWx0LCBGdWxseSBQYWlkLCBJbiBHcmFjZSBQZXJpb2QsIExhdGUgKDE2LTMwIGRheXMpLCBM
YXRlICgzMS0xMjAgZGF5cymUiWVdlCiMB3B1cnBvc2WUaGpLAIyaY2FyLCBjcmVkaXRfY2FyZCwg
ZGVidF9jb25zb2xpZGF0aW9uLCBob21lX2ltcHJvdmVtZW50LCBob3VzZSwgbWFqb3JfcHVyY2hh
c2UsIG1lZGljYWwsIG1vdmluZywgb3RoZXIsIHJlbmV3YWJsZV9lbmVyZ3ksIHNtYWxsX2J1c2lu
ZXNzLCB2YWNhdGlvbiwgd2VkZGluZ5SJZV2UKIwKYWRkcl9zdGF0ZZRoaksAjFNBSywgQUwsIEFS
LCBBWiwgQ0EsIENPLCBDVCwgREMsIERFLCBGTCwgR0EsIEhJLCBJTCwgS1MsIEtZLCBMQSwgTUEs
IE1ELCBNSSwgTU4sIC4uLpSJZV2UKIwDZHRplGhaSwBoDohlXZQojAtkZWxpbnFfMnlyc5RoWksA
aA6IZV2UKIwOaW5xX2xhc3RfNm10aHOUaFpLAGgOiGVdlCiMFm10aHNfc2luY2VfbGFzdF9kZWxp
bnGUaFpLAGgOiGVdlCiMFm10aHNfc2luY2VfbGFzdF9yZWNvcmSUaFpLAGgOiGVdlCiMCG9wZW5f
YWNjlGhaSwBoDohlXZQojAdwdWJfcmVjlGhaSwBoDohlXZQojAlyZXZvbF9iYWyUaFpLAGgOiGVd
lCiMCnJldm9sX3V0aWyUaFpLAGgOiGVdlCiMCXRvdGFsX2FjY5RoWksAaA6IZV2UKIwTaW5pdGlh
bF9saXN0X3N0YXR1c5RoaksAagQCAACJZV2UKIwJb3V0X3BybmNwlGhaSwBoDohlXZQojAt0b3Rh
bF9weW1udJRoWksAaA6IZV2UKIwPdG90YWxfcmVjX3BybmNwlGhaSwBoDohlXZQojA10b3RhbF9y
ZWNfaW50lGhaSwBoDohlXZQojBJ0b3RhbF9yZWNfbGF0ZV9mZWWUaFpLAGgOiGVdlCiMCnJlY292
ZXJpZXOUaFpLAGgOiGVdlCiMF2NvbGxlY3Rpb25fcmVjb3ZlcnlfZmVllGhaSwBoDohlXZQojAxs
YXN0X3B5bW50X2SUaGpLAIyjQXByLTEyLCBBcHItMTMsIEFwci0xNCwgQXByLTE1LCBBdWctMTIs
IEF1Zy0xMywgQXVnLTE0LCBBdWctMTUsIERlYy0xMSwgRGVjLTEyLCBEZWMtMTMsIERlYy0xNCwg
RGVjLTE1LCBGZWItMTIsIEZlYi0xMywgRmViLTE0LCBGZWItMTUsIEphbi0xMiwgSmFuLTEzLCBK
YW4tMTQsIC4uLpSJZV2UKIwPbGFzdF9weW1udF9hbW50lGhaSwBoDohlXZQojBpjb2xsZWN0aW9u
c18xMl9tdGhzX2V4X21lZJRoaksAjAMwLjCUiGVdlCiMG210aHNfc2luY2VfbGFzdF9tYWpvcl9k
ZXJvZ5RoWksAaA6IZV2UKIwQYW5udWFsX2luY19qb2ludJRoWksAaA6IZV2UKIwJZHRpX2pvaW50
lGhaSwBoDohlXZQojBl2ZXJpZmljYXRpb25fc3RhdHVzX2pvaW50lGhaSwBoDohlXZQojA5hY2Nf
bm93X2RlbGlucZRoaksAjAMwLjCUiGVdlCiMDHRvdF9jb2xsX2FtdJRoWksAaA6IZV2UKIwLdG90
X2N1cl9iYWyUaFpLAGgOiGVdlCiMC29wZW5fYWNjXzZtlGhaSwBoDohlXZQojApvcGVuX2lsXzZt
lGhaSwBoDohlXZQojAtvcGVuX2lsXzEybZRoWksAaA6IZV2UKIwLb3Blbl9pbF8yNG2UaFpLAGgO
iGVdlCiMEm10aHNfc2luY2VfcmNudF9pbJRoWksAaA6IZV2UKIwMdG90YWxfYmFsX2lslGhaSwBo
DohlXZQojAdpbF91dGlslGhaSwBoDohlXZQojAtvcGVuX3J2XzEybZRoWksAaA6IZV2UKIwLb3Bl
bl9ydl8yNG2UaFpLAGgOiGVdlCiMCm1heF9iYWxfYmOUaFpLAGgOiGVdlCiMCGFsbF91dGlslGha
SwBoDohlXZQojBB0b3RhbF9yZXZfaGlfbGltlGhaSwBoDohlXZQojAZpbnFfZmmUaFpLAGgOiGVd
lCiMC3RvdGFsX2N1X3RslGhaSwBoDohlXZQojAxpbnFfbGFzdF8xMm2UaFpLAGgOiGVdlCiMCGdv
b2RfYmFklGhqSwGMBDAsIDGUiGVdlCiMDmVtcF9sZW5ndGhfaW50lGhaSwBoDohlXZQojBVlYXJs
aWVzdF9jcl9saW5lX2RhdGWUaPdLAGgOiGVdlCiMG210aHNfc2luY2VfZWFybGllc3RfY3JfbGlu
ZZRoWksAaA6IZV2UKIwIdGVybV9pbnSUaFpLAGgOiGVdlCiMDGlzc3VlX2RfZGF0ZZRo90sAaA6I
ZV2UKIwSbXRoc19zaW5jZV9pc3N1ZV9klGhaSwBoDohlXZQojARkZXNjlGoGAQAASwJoDollXZQo
jBBlYXJsaWVzdF9jcl9saW5llGoGAQAASwJoDollZXNoSEsBdWoVAQAAKIwJRmVhdHVyZSAxlEsC
hpSMCWxvYW5fYW1udJRLAoaUjAtmdW5kZWRfYW1udJRLAoaUjAR0ZXJtlF2UKIwJMzYgbW9udGhz
lIwJNjAgbW9udGhzlGWGlIwIaW50X3JhdGWUSwKGlIwLaW5zdGFsbG1lbnSUSwKGlIwFZ3JhZGWU
XZQoaiQBAABqJQEAAGomAQAAaicBAABqKAEAAGopAQAAaioBAABlhpSMCXN1Yl9ncmFkZZRdlCiM
AkExlIwCQTKUjAJBM5SMAkE0lIwCQTWUjAJCMZSMAkIylIwCQjOUjAJCNJSMAkI1lIwCQzGUjAJD
MpSMAkMzlIwCQzSUjAJDNZSMAkQxlIwCRDKUjAJEM5SMAkQ0lIwCRDWUjAJFMZSMAkUylIwCRTOU
jAJFNJSMAkU1lIwCRjGUjAJGMpSMAkYzlIwCRjSUjAJGNZSMAkcxlIwCRzKUjAJHM5SMAkc0lIwC
RzWUZYaUjAplbXBfbGVuZ3RolF2UKIwGMSB5ZWFylIwHMiB5ZWFyc5SMBzMgeWVhcnOUjAc0IHll
YXJzlIwHNSB5ZWFyc5SMBzYgeWVhcnOUjAc3IHllYXJzlIwHOCB5ZWFyc5SMBzkgeWVhcnOUjAkx
MCsgeWVhcnOUjAg8IDEgeWVhcpRlhpSMDmhvbWVfb3duZXJzaGlwlF2UKIwITU9SVEdBR0WUjANP
V06UjARSRU5UlGWGlIwKYW5udWFsX2luY5RLAoaUjBN2ZXJpZmljYXRpb25fc3RhdHVzlF2UKIwM
Tm90IFZlcmlmaWVklIwPU291cmNlIFZlcmlmaWVklIwIVmVyaWZpZWSUZYaUjAdpc3N1ZV9klF2U
KIwGRGVjLTExlIwGTm92LTExlIwGT2N0LTExlGWGlIwLbG9hbl9zdGF0dXOUXZQojAtDaGFyZ2Vk
IE9mZpSMB0N1cnJlbnSUjAdEZWZhdWx0lIwKRnVsbHkgUGFpZJSMD0luIEdyYWNlIFBlcmlvZJSM
EUxhdGUgKDE2LTMwIGRheXMplIwSTGF0ZSAoMzEtMTIwIGRheXMplGWGlIwHcHVycG9zZZRdlCiM
A2NhcpSMC2NyZWRpdF9jYXJklIwSZGVidF9jb25zb2xpZGF0aW9ulIwQaG9tZV9pbXByb3ZlbWVu
dJSMBWhvdXNllIwObWFqb3JfcHVyY2hhc2WUjAdtZWRpY2FslIwGbW92aW5nlIwFb3RoZXKUjBBy
ZW5ld2FibGVfZW5lcmd5lIwOc21hbGxfYnVzaW5lc3OUjAh2YWNhdGlvbpSMB3dlZGRpbmeUZYaU
jAphZGRyX3N0YXRllF2UKIwCQUuUjAJBTJSMAkFSlIwCQVqUjAJDQZSMAkNPlIwCQ1SUjAJEQ5SM
AkRFlIwCRkyUjAJHQZSMAkhJlIwCSUyUjAJLU5SMAktZlIwCTEGUjAJNQZSMAk1ElIwCTUmUjAJN
TpSMAk1PlIwCTVOUjAJNVJSMAk5DlIwCTkiUjAJOSpSMAk5NlIwCTlaUjAJOWZSMAk9IlIwCT0uU
jAJPUpSMAlBBlIwCUkmUjAJTQ5SMAlNElIwCVE6UjAJUWJSMAlVUlIwCVkGUjAJWVJSMAldBlIwC
V0mUjAJXVpSMAldZlGWGlIwDZHRplEsChpSMC2RlbGlucV8yeXJzlEsChpSMDmlucV9sYXN0XzZt
dGhzlEsChpSMFm10aHNfc2luY2VfbGFzdF9kZWxpbnGUSwKGlIwWbXRoc19zaW5jZV9sYXN0X3Jl
Y29yZJRLAoaUjAhvcGVuX2FjY5RLAoaUjAdwdWJfcmVjlEsChpSMCXJldm9sX2JhbJRLAoaUjApy
ZXZvbF91dGlslEsChpSMCXRvdGFsX2FjY5RLAoaUjBNpbml0aWFsX2xpc3Rfc3RhdHVzlF2UagQC
AABhhpSMCW91dF9wcm5jcJRLAoaUjAt0b3RhbF9weW1udJRLAoaUjA90b3RhbF9yZWNfcHJuY3CU
SwKGlIwNdG90YWxfcmVjX2ludJRLAoaUjBJ0b3RhbF9yZWNfbGF0ZV9mZWWUSwKGlIwKcmVjb3Zl
cmllc5RLAoaUjBdjb2xsZWN0aW9uX3JlY292ZXJ5X2ZlZZRLAoaUjAxsYXN0X3B5bW50X2SUXZQo
jAZBcHItMTKUjAZBcHItMTOUjAZBcHItMTSUjAZBcHItMTWUjAZBdWctMTKUjAZBdWctMTOUjAZB
dWctMTSUjAZBdWctMTWUjAZEZWMtMTGUjAZEZWMtMTKUjAZEZWMtMTOUjAZEZWMtMTSUjAZEZWMt
MTWUjAZGZWItMTKUjAZGZWItMTOUjAZGZWItMTSUjAZGZWItMTWUjAZKYW4tMTKUjAZKYW4tMTOU
jAZKYW4tMTSUjAZKYW4tMTWUjAZKYW4tMTaUjAZKdWwtMTKUjAZKdWwtMTOUjAZKdWwtMTSUjAZK
dWwtMTWUjAZKdW4tMTKUjAZKdW4tMTOUjAZKdW4tMTSUjAZKdW4tMTWUjAZNYXItMTKUjAZNYXIt
MTOUjAZNYXItMTSUjAZNYXItMTWUjAZNYXktMTKUjAZNYXktMTOUjAZNYXktMTSUjAZNYXktMTWU
jAZOb3YtMTGUjAZOb3YtMTKUjAZOb3YtMTOUjAZOb3YtMTSUjAZOb3YtMTWUjAZPY3QtMTKUjAZP
Y3QtMTOUjAZPY3QtMTSUjAZPY3QtMTWUjAZTZXAtMTKUjAZTZXAtMTOUjAZTZXAtMTSUjAZTZXAt
MTWUZYaUjA9sYXN0X3B5bW50X2FtbnSUSwKGlIwaY29sbGVjdGlvbnNfMTJfbXRoc19leF9tZWSU
XZSMAzAuMJRhhpSMG210aHNfc2luY2VfbGFzdF9tYWpvcl9kZXJvZ5RLAoaUjBBhbm51YWxfaW5j
X2pvaW50lEsChpSMCWR0aV9qb2ludJRLAoaUjBl2ZXJpZmljYXRpb25fc3RhdHVzX2pvaW50lEsC
hpSMDmFjY19ub3dfZGVsaW5xlF2UjAMwLjCUYYaUjAx0b3RfY29sbF9hbXSUSwKGlIwLdG90X2N1
cl9iYWyUSwKGlIwLb3Blbl9hY2NfNm2USwKGlIwKb3Blbl9pbF82bZRLAoaUjAtvcGVuX2lsXzEy
bZRLAoaUjAtvcGVuX2lsXzI0bZRLAoaUjBJtdGhzX3NpbmNlX3JjbnRfaWyUSwKGlIwMdG90YWxf
YmFsX2lslEsChpSMB2lsX3V0aWyUSwKGlIwLb3Blbl9ydl8xMm2USwKGlIwLb3Blbl9ydl8yNG2U
SwKGlIwKbWF4X2JhbF9iY5RLAoaUjAhhbGxfdXRpbJRLAoaUjBB0b3RhbF9yZXZfaGlfbGltlEsC
hpSMBmlucV9maZRLAoaUjAt0b3RhbF9jdV90bJRLAoaUjAxpbnFfbGFzdF8xMm2USwKGlIwIZ29v
ZF9iYWSUXZQoapcCAABoxGWGlIwOZW1wX2xlbmd0aF9pbnSUSwKGlIwVZWFybGllc3RfY3JfbGlu
ZV9kYXRllEsEhpSMG210aHNfc2luY2VfZWFybGllc3RfY3JfbGluZZRLAoaUjAh0ZXJtX2ludJRL
AoaUjAxpc3N1ZV9kX2RhdGWUSwSGlIwSbXRoc19zaW5jZV9pc3N1ZV9klEsChpR0lGqaAgAAjARk
ZXNjlEsDhpSMEGVhcmxpZXN0X2NyX2xpbmWUSwOGlIaUaqQCAAApaqUCAABdlHViaE0pgZR9lCho
UH2UKIwJdmFyaWFibGVzlF2UjA1kb21haW5fZWRpdG9ylH2UatAGAABdlChdlCiMCWxvYW5fYW1u
dJRoWksAaA6IZV2UKIwLZnVuZGVkX2FtbnSUaFpLAGgOiGVdlCiMBHRlcm2UaGpLAIwUMzYgbW9u
dGhzLCA2MCBtb250aHOUiWVdlCiMCGludF9yYXRllGhaSwBoDohlXZQojAtpbnN0YWxsbWVudJRo
WksAaA6IZV2UKIwFZ3JhZGWUaGpLAIwTQSwgQiwgQywgRCwgRSwgRiwgR5SJZV2UKIwJc3ViX2dy
YWRllGhqSwCMU0ExLCBBMiwgQTMsIEE0LCBBNSwgQjEsIEIyLCBCMywgQjQsIEI1LCBDMSwgQzIs
IEMzLCBDNCwgQzUsIEQxLCBEMiwgRDMsIEQ0LCBENSwgLi4ulIllXZQojAplbXBfbGVuZ3RolGhq
SwCMYzEgeWVhciwgMiB5ZWFycywgMyB5ZWFycywgNCB5ZWFycywgNSB5ZWFycywgNiB5ZWFycywg
NyB5ZWFycywgOCB5ZWFycywgOSB5ZWFycywgMTArIHllYXJzLCA8IDEgeWVhcpSJZV2UKIwOaG9t
ZV9vd25lcnNoaXCUaGpLAIwTTU9SVEdBR0UsIE9XTiwgUkVOVJSJZV2UKIwKYW5udWFsX2luY5Ro
WksAaA6IZV2UKIwTdmVyaWZpY2F0aW9uX3N0YXR1c5RoaksAjCdOb3QgVmVyaWZpZWQsIFNvdXJj
ZSBWZXJpZmllZCwgVmVyaWZpZWSUiWVdlCiMB2lzc3VlX2SUaGpLAIwWRGVjLTExLCBOb3YtMTEs
IE9jdC0xMZSJZV2UKIwLbG9hbl9zdGF0dXOUaGpLAIxhQ2hhcmdlZCBPZmYsIEN1cnJlbnQsIERl
ZmF1bHQsIEZ1bGx5IFBhaWQsIEluIEdyYWNlIFBlcmlvZCwgTGF0ZSAoMTYtMzAgZGF5cyksIExh
dGUgKDMxLTEyMCBkYXlzKZSJZV2UKIwHcHVycG9zZZRoaksAjJpjYXIsIGNyZWRpdF9jYXJkLCBk
ZWJ0X2NvbnNvbGlkYXRpb24sIGhvbWVfaW1wcm92ZW1lbnQsIGhvdXNlLCBtYWpvcl9wdXJjaGFz
ZSwgbWVkaWNhbCwgbW92aW5nLCBvdGhlciwgcmVuZXdhYmxlX2VuZXJneSwgc21hbGxfYnVzaW5l
c3MsIHZhY2F0aW9uLCB3ZWRkaW5nlIllXZQojAphZGRyX3N0YXRllGhqSwCMU0FLLCBBTCwgQVIs
IEFaLCBDQSwgQ08sIENULCBEQywgREUsIEZMLCBHQSwgSEksIElMLCBLUywgS1ksIExBLCBNQSwg
TUQsIE1JLCBNTiwgLi4ulIllXZQojANkdGmUaFpLAGgOiGVdlCiMC2RlbGlucV8yeXJzlGhaSwBo
DohlXZQojA5pbnFfbGFzdF82bXRoc5RoWksAaA6IZV2UKIwWbXRoc19zaW5jZV9sYXN0X2RlbGlu
cZRoWksAaA6IZV2UKIwWbXRoc19zaW5jZV9sYXN0X3JlY29yZJRoWksAaA6IZV2UKIwIb3Blbl9h
Y2OUaFpLAGgOiGVdlCiMB3B1Yl9yZWOUaFpLAGgOiGVdlCiMCXJldm9sX2JhbJRoWksAaA6IZV2U
KIwKcmV2b2xfdXRpbJRoWksAaA6IZV2UKIwJdG90YWxfYWNjlGhaSwBoDohlXZQojBNpbml0aWFs
X2xpc3Rfc3RhdHVzlGhqSwBqBAIAAIllXZQojAlvdXRfcHJuY3CUaFpLAGgOiGVdlCiMC3RvdGFs
X3B5bW50lGhaSwBoDohlXZQojA90b3RhbF9yZWNfcHJuY3CUaFpLAGgOiGVdlCiMDXRvdGFsX3Jl
Y19pbnSUaFpLAGgOiGVdlCiMEnRvdGFsX3JlY19sYXRlX2ZlZZRoWksAaA6IZV2UKIwKcmVjb3Zl
cmllc5RoWksAaA6IZV2UKIwXY29sbGVjdGlvbl9yZWNvdmVyeV9mZWWUaFpLAGgOiGVdlCiMDGxh
c3RfcHltbnRfZJRoaksAjKNBcHItMTIsIEFwci0xMywgQXByLTE0LCBBcHItMTUsIEF1Zy0xMiwg
QXVnLTEzLCBBdWctMTQsIEF1Zy0xNSwgRGVjLTExLCBEZWMtMTIsIERlYy0xMywgRGVjLTE0LCBE
ZWMtMTUsIEZlYi0xMiwgRmViLTEzLCBGZWItMTQsIEZlYi0xNSwgSmFuLTEyLCBKYW4tMTMsIEph
bi0xNCwgLi4ulIllXZQojA9sYXN0X3B5bW50X2FtbnSUaFpLAGgOiGVdlCiMGmNvbGxlY3Rpb25z
XzEyX210aHNfZXhfbWVklGhqSwCMAzAuMJSIZV2UKIwbbXRoc19zaW5jZV9sYXN0X21ham9yX2Rl
cm9nlGhaSwBoDohlXZQojBBhbm51YWxfaW5jX2pvaW50lGhaSwBoDohlXZQojAlkdGlfam9pbnSU
aFpLAGgOiGVdlCiMGXZlcmlmaWNhdGlvbl9zdGF0dXNfam9pbnSUaFpLAGgOiGVdlCiMDmFjY19u
b3dfZGVsaW5xlGhqSwCMAzAuMJSIZV2UKIwMdG90X2NvbGxfYW10lGhaSwBoDohlXZQojAt0b3Rf
Y3VyX2JhbJRoWksAaA6IZV2UKIwLb3Blbl9hY2NfNm2UaFpLAGgOiGVdlCiMCm9wZW5faWxfNm2U
aFpLAGgOiGVdlCiMC29wZW5faWxfMTJtlGhaSwBoDohlXZQojAtvcGVuX2lsXzI0bZRoWksAaA6I
ZV2UKIwSbXRoc19zaW5jZV9yY250X2lslGhaSwBoDohlXZQojAx0b3RhbF9iYWxfaWyUaFpLAGgO
iGVdlCiMB2lsX3V0aWyUaFpLAGgOiGVdlCiMC29wZW5fcnZfMTJtlGhaSwBoDohlXZQojAtvcGVu
X3J2XzI0bZRoWksAaA6IZV2UKIwKbWF4X2JhbF9iY5RoWksAaA6IZV2UKIwIYWxsX3V0aWyUaFpL
AGgOiGVdlCiMEHRvdGFsX3Jldl9oaV9saW2UaFpLAGgOiGVdlCiMBmlucV9maZRoWksAaA6IZV2U
KIwLdG90YWxfY3VfdGyUaFpLAGgOiGVdlCiMDGlucV9sYXN0XzEybZRoWksAaA6IZV2UKIwIZ29v
ZF9iYWSUaGpLAYwEMCwgMZSIZV2UKIwEZGVzY5RqBgEAAEsCaA6JZV2UKIwQZWFybGllc3RfY3Jf
bGluZZRqBgEAAEsCaA6JZWVzaEhLAXVqFQEAAChq1gYAAEsChpRq2AYAAEsChpRq2gYAAF2UKIwJ
MzYgbW9udGhzlIwJNjAgbW9udGhzlGWGlGrdBgAASwKGlGrfBgAASwKGlGrhBgAAXZQoaiQBAABq
JQEAAGomAQAAaicBAABqKAEAAGopAQAAaioBAABlhpRq5AYAAF2UKIwCQTGUjAJBMpSMAkEzlIwC
QTSUjAJBNZSMAkIxlIwCQjKUjAJCM5SMAkI0lIwCQjWUjAJDMZSMAkMylIwCQzOUjAJDNJSMAkM1
lIwCRDGUjAJEMpSMAkQzlIwCRDSUjAJENZSMAkUxlIwCRTKUjAJFM5SMAkU0lIwCRTWUjAJGMZSM
AkYylIwCRjOUjAJGNJSMAkY1lIwCRzGUjAJHMpSMAkczlIwCRzSUjAJHNZRlhpRq5wYAAF2UKIwG
MSB5ZWFylIwHMiB5ZWFyc5SMBzMgeWVhcnOUjAc0IHllYXJzlIwHNSB5ZWFyc5SMBzYgeWVhcnOU
jAc3IHllYXJzlIwHOCB5ZWFyc5SMBzkgeWVhcnOUjAkxMCsgeWVhcnOUjAg8IDEgeWVhcpRlhpRq
6gYAAF2UKIwITU9SVEdBR0WUjANPV06UjARSRU5UlGWGlGrtBgAASwKGlGrvBgAAXZQojAxOb3Qg
VmVyaWZpZWSUjA9Tb3VyY2UgVmVyaWZpZWSUjAhWZXJpZmllZJRlhpRq8gYAAF2UKIwGRGVjLTEx
lIwGTm92LTExlIwGT2N0LTExlGWGlGr1BgAAXZQojAtDaGFyZ2VkIE9mZpSMB0N1cnJlbnSUjAdE
ZWZhdWx0lIwKRnVsbHkgUGFpZJSMD0luIEdyYWNlIFBlcmlvZJSMEUxhdGUgKDE2LTMwIGRheXMp
lIwSTGF0ZSAoMzEtMTIwIGRheXMplGWGlGr4BgAAXZQojANjYXKUjAtjcmVkaXRfY2FyZJSMEmRl
YnRfY29uc29saWRhdGlvbpSMEGhvbWVfaW1wcm92ZW1lbnSUjAVob3VzZZSMDm1ham9yX3B1cmNo
YXNllIwHbWVkaWNhbJSMBm1vdmluZ5SMBW90aGVylIwQcmVuZXdhYmxlX2VuZXJneZSMDnNtYWxs
X2J1c2luZXNzlIwIdmFjYXRpb26UjAd3ZWRkaW5nlGWGlGr7BgAAXZQojAJBS5SMAkFMlIwCQVKU
jAJBWpSMAkNBlIwCQ0+UjAJDVJSMAkRDlIwCREWUjAJGTJSMAkdBlIwCSEmUjAJJTJSMAktTlIwC
S1mUjAJMQZSMAk1BlIwCTUSUjAJNSZSMAk1OlIwCTU+UjAJNU5SMAk1UlIwCTkOUjAJOSJSMAk5K
lIwCTk2UjAJOVpSMAk5ZlIwCT0iUjAJPS5SMAk9SlIwCUEGUjAJSSZSMAlNDlIwCU0SUjAJUTpSM
AlRYlIwCVVSUjAJWQZSMAlZUlIwCV0GUjAJXSZSMAldWlIwCV1mUZYaUav4GAABLAoaUagAHAABL
AoaUagIHAABLAoaUagQHAABLAoaUagYHAABLAoaUaggHAABLAoaUagoHAABLAoaUagwHAABLAoaU
ag4HAABLAoaUahAHAABLAoaUahIHAABdlGoEAgAAYYaUahQHAABLAoaUahYHAABLAoaUahgHAABL
AoaUahoHAABLAoaUahwHAABLAoaUah4HAABLAoaUaiAHAABLAoaUaiIHAABdlCiMBkFwci0xMpSM
BkFwci0xM5SMBkFwci0xNJSMBkFwci0xNZSMBkF1Zy0xMpSMBkF1Zy0xM5SMBkF1Zy0xNJSMBkF1
Zy0xNZSMBkRlYy0xMZSMBkRlYy0xMpSMBkRlYy0xM5SMBkRlYy0xNJSMBkRlYy0xNZSMBkZlYi0x
MpSMBkZlYi0xM5SMBkZlYi0xNJSMBkZlYi0xNZSMBkphbi0xMpSMBkphbi0xM5SMBkphbi0xNJSM
Bkphbi0xNZSMBkphbi0xNpSMBkp1bC0xMpSMBkp1bC0xM5SMBkp1bC0xNJSMBkp1bC0xNZSMBkp1
bi0xMpSMBkp1bi0xM5SMBkp1bi0xNJSMBkp1bi0xNZSMBk1hci0xMpSMBk1hci0xM5SMBk1hci0x
NJSMBk1hci0xNZSMBk1heS0xMpSMBk1heS0xM5SMBk1heS0xNJSMBk1heS0xNZSMBk5vdi0xMZSM
Bk5vdi0xMpSMBk5vdi0xM5SMBk5vdi0xNJSMBk5vdi0xNZSMBk9jdC0xMpSMBk9jdC0xM5SMBk9j
dC0xNJSMBk9jdC0xNZSMBlNlcC0xMpSMBlNlcC0xM5SMBlNlcC0xNJSMBlNlcC0xNZRlhpRqJQcA
AEsChpRqJwcAAF2UaigHAABhhpRqKgcAAEsChpRqLAcAAEsChpRqLgcAAEsChpRqMAcAAEsChpRq
MgcAAF2UajMHAABhhpRqNQcAAEsChpRqNwcAAEsChpRqOQcAAEsChpRqOwcAAEsChpRqPQcAAEsC
hpRqPwcAAEsChpRqQQcAAEsChpRqQwcAAEsChpRqRQcAAEsChpRqRwcAAEsChpRqSQcAAEsChpRq
SwcAAEsChpRqTQcAAEsChpRqTwcAAEsChpRqUQcAAEsChpRqUwcAAEsChpRqVQcAAEsChpRqVwcA
AF2UKGqXAgAAaMRlhpR0lGqaAgAAaloHAABLA4aUalwHAABLA4aUhpRqpAIAAClqpQIAAF2UdWJo
TSmBlH2UKGhQfZQojAl2YXJpYWJsZXOUXZSMDWRvbWFpbl9lZGl0b3KUfZRqXAgAAF2UKF2UKIwJ
bG9hbl9hbW50lGhaSwBoDohlXZQojAtmdW5kZWRfYW1udJRoWksAaA6IZV2UKIwEdGVybZRoaksA
jBQzNiBtb250aHMsIDYwIG1vbnRoc5SJZV2UKIwIaW50X3JhdGWUaFpLAGgOiGVdlCiMC2luc3Rh
bGxtZW50lGhaSwBoDohlXZQojAVncmFkZZRoaksAjBNBLCBCLCBDLCBELCBFLCBGLCBHlIllXZQo
jAlzdWJfZ3JhZGWUaGpLAIxTQTEsIEEyLCBBMywgQTQsIEE1LCBCMSwgQjIsIEIzLCBCNCwgQjUs
IEMxLCBDMiwgQzMsIEM0LCBDNSwgRDEsIEQyLCBEMywgRDQsIEQ1LCAuLi6UiWVdlCiMCmVtcF9s
ZW5ndGiUaGpLAIxjMSB5ZWFyLCAyIHllYXJzLCAzIHllYXJzLCA0IHllYXJzLCA1IHllYXJzLCA2
IHllYXJzLCA3IHllYXJzLCA4IHllYXJzLCA5IHllYXJzLCAxMCsgeWVhcnMsIDwgMSB5ZWFylIll
XZQojA5ob21lX293bmVyc2hpcJRoaksAjBpNT1JUR0FHRSwgT1RIRVIsIE9XTiwgUkVOVJSJZV2U
KIwKYW5udWFsX2luY5RoWksAaA6IZV2UKIwTdmVyaWZpY2F0aW9uX3N0YXR1c5RoaksAjCdOb3Qg
VmVyaWZpZWQsIFNvdXJjZSBWZXJpZmllZCwgVmVyaWZpZWSUiWVdlCiMB2lzc3VlX2SUaGpLAIxW
QXByLTExLCBBdWctMTEsIERlYy0xMSwgRmViLTExLCBKdWwtMTEsIEp1bi0xMSwgTWFyLTExLCBN
YXktMTEsIE5vdi0xMSwgT2N0LTExLCBTZXAtMTGUiWVdlCiMC2xvYW5fc3RhdHVzlGhqSwCMYUNo
YXJnZWQgT2ZmLCBDdXJyZW50LCBEZWZhdWx0LCBGdWxseSBQYWlkLCBJbiBHcmFjZSBQZXJpb2Qs
IExhdGUgKDE2LTMwIGRheXMpLCBMYXRlICgzMS0xMjAgZGF5cymUiWVdlCiMB3B1cnBvc2WUaGpL
AIyaY2FyLCBjcmVkaXRfY2FyZCwgZGVidF9jb25zb2xpZGF0aW9uLCBob21lX2ltcHJvdmVtZW50
LCBob3VzZSwgbWFqb3JfcHVyY2hhc2UsIG1lZGljYWwsIG1vdmluZywgb3RoZXIsIHJlbmV3YWJs
ZV9lbmVyZ3ksIHNtYWxsX2J1c2luZXNzLCB2YWNhdGlvbiwgd2VkZGluZ5SJZV2UKIwKYWRkcl9z
dGF0ZZRoaksAjFNBSywgQUwsIEFSLCBBWiwgQ0EsIENPLCBDVCwgREMsIERFLCBGTCwgR0EsIEhJ
LCBJTCwgS1MsIEtZLCBMQSwgTUEsIE1ELCBNSSwgTU4sIC4uLpSJZV2UKIwDZHRplGhaSwBoDohl
XZQojAtkZWxpbnFfMnlyc5RoWksAaA6IZV2UKIwOaW5xX2xhc3RfNm10aHOUaFpLAGgOiGVdlCiM
Fm10aHNfc2luY2VfbGFzdF9kZWxpbnGUaFpLAGgOiGVdlCiMFm10aHNfc2luY2VfbGFzdF9yZWNv
cmSUaFpLAGgOiGVdlCiMCG9wZW5fYWNjlGhaSwBoDohlXZQojAdwdWJfcmVjlGhaSwBoDohlXZQo
jAlyZXZvbF9iYWyUaFpLAGgOiGVdlCiMCnJldm9sX3V0aWyUaFpLAGgOiGVdlCiMCXRvdGFsX2Fj
Y5RoWksAaA6IZV2UKIwTaW5pdGlhbF9saXN0X3N0YXR1c5RoaksAagQCAACJZV2UKIwJb3V0X3By
bmNwlGhaSwBoDohlXZQojAt0b3RhbF9weW1udJRoWksAaA6IZV2UKIwPdG90YWxfcmVjX3BybmNw
lGhaSwBoDohlXZQojA10b3RhbF9yZWNfaW50lGhaSwBoDohlXZQojBJ0b3RhbF9yZWNfbGF0ZV9m
ZWWUaFpLAGgOiGVdlCiMCnJlY292ZXJpZXOUaFpLAGgOiGVdlCiMF2NvbGxlY3Rpb25fcmVjb3Zl
cnlfZmVllGhaSwBoDohlXZQojAxsYXN0X3B5bW50X2SUaGpLAIyjQXByLTExLCBBcHItMTIsIEFw
ci0xMywgQXByLTE0LCBBcHItMTUsIEF1Zy0xMSwgQXVnLTEyLCBBdWctMTMsIEF1Zy0xNCwgQXVn
LTE1LCBEZWMtMTEsIERlYy0xMiwgRGVjLTEzLCBEZWMtMTQsIERlYy0xNSwgRmViLTEyLCBGZWIt
MTMsIEZlYi0xNCwgRmViLTE1LCBKYW4tMTIsIC4uLpSJZV2UKIwPbGFzdF9weW1udF9hbW50lGha
SwBoDohlXZQojBpjb2xsZWN0aW9uc18xMl9tdGhzX2V4X21lZJRoaksAjAMwLjCUiGVdlCiMG210
aHNfc2luY2VfbGFzdF9tYWpvcl9kZXJvZ5RoWksAaA6IZV2UKIwQYW5udWFsX2luY19qb2ludJRo
WksAaA6IZV2UKIwJZHRpX2pvaW50lGhaSwBoDohlXZQojBl2ZXJpZmljYXRpb25fc3RhdHVzX2pv
aW50lGhaSwBoDohlXZQojA5hY2Nfbm93X2RlbGlucZRoaksAjAMwLjCUiGVdlCiMDHRvdF9jb2xs
X2FtdJRoWksAaA6IZV2UKIwLdG90X2N1cl9iYWyUaFpLAGgOiGVdlCiMC29wZW5fYWNjXzZtlGha
SwBoDohlXZQojApvcGVuX2lsXzZtlGhaSwBoDohlXZQojAtvcGVuX2lsXzEybZRoWksAaA6IZV2U
KIwLb3Blbl9pbF8yNG2UaFpLAGgOiGVdlCiMEm10aHNfc2luY2VfcmNudF9pbJRoWksAaA6IZV2U
KIwMdG90YWxfYmFsX2lslGhaSwBoDohlXZQojAdpbF91dGlslGhaSwBoDohlXZQojAtvcGVuX3J2
XzEybZRoWksAaA6IZV2UKIwLb3Blbl9ydl8yNG2UaFpLAGgOiGVdlCiMCm1heF9iYWxfYmOUaFpL
AGgOiGVdlCiMCGFsbF91dGlslGhaSwBoDohlXZQojBB0b3RhbF9yZXZfaGlfbGltlGhaSwBoDohl
XZQojAZpbnFfZmmUaFpLAGgOiGVdlCiMC3RvdGFsX2N1X3RslGhaSwBoDohlXZQojAxpbnFfbGFz
dF8xMm2UaFpLAGgOiGVdlCiMCGdvb2RfYmFklGhqSwGMBDAsIDGUiGVdlCiMBGRlc2OUagYBAABL
AmgOiWVdlCiMEGVhcmxpZXN0X2NyX2xpbmWUagYBAABLAmgOiWVlc2hISwF1ahUBAAAoamIIAABL
AoaUamQIAABLAoaUamYIAABdlCiMCTM2IG1vbnRoc5SMCTYwIG1vbnRoc5RlhpRqaQgAAEsChpRq
awgAAEsChpRqbQgAAF2UKGokAQAAaiUBAABqJgEAAGonAQAAaigBAABqKQEAAGoqAQAAZYaUanAI
AABdlCiMAkExlIwCQTKUjAJBM5SMAkE0lIwCQTWUjAJCMZSMAkIylIwCQjOUjAJCNJSMAkI1lIwC
QzGUjAJDMpSMAkMzlIwCQzSUjAJDNZSMAkQxlIwCRDKUjAJEM5SMAkQ0lIwCRDWUjAJFMZSMAkUy
lIwCRTOUjAJFNJSMAkU1lIwCRjGUjAJGMpSMAkYzlIwCRjSUjAJGNZSMAkcxlIwCRzKUjAJHM5SM
Akc0lIwCRzWUZYaUanMIAABdlCiMBjEgeWVhcpSMBzIgeWVhcnOUjAczIHllYXJzlIwHNCB5ZWFy
c5SMBzUgeWVhcnOUjAc2IHllYXJzlIwHNyB5ZWFyc5SMBzggeWVhcnOUjAc5IHllYXJzlIwJMTAr
IHllYXJzlIwIPCAxIHllYXKUZYaUanYIAABdlCiMCE1PUlRHQUdFlIwFT1RIRVKUjANPV06UjARS
RU5UlGWGlGp5CAAASwKGlGp7CAAAXZQojAxOb3QgVmVyaWZpZWSUjA9Tb3VyY2UgVmVyaWZpZWSU
jAhWZXJpZmllZJRlhpRqfggAAF2UKIwGQXByLTExlIwGQXVnLTExlIwGRGVjLTExlIwGRmViLTEx
lIwGSnVsLTExlIwGSnVuLTExlIwGTWFyLTExlIwGTWF5LTExlIwGTm92LTExlIwGT2N0LTExlIwG
U2VwLTExlGWGlGqBCAAAXZQojAtDaGFyZ2VkIE9mZpSMB0N1cnJlbnSUjAdEZWZhdWx0lIwKRnVs
bHkgUGFpZJSMD0luIEdyYWNlIFBlcmlvZJSMEUxhdGUgKDE2LTMwIGRheXMplIwSTGF0ZSAoMzEt
MTIwIGRheXMplGWGlGqECAAAXZQojANjYXKUjAtjcmVkaXRfY2FyZJSMEmRlYnRfY29uc29saWRh
dGlvbpSMEGhvbWVfaW1wcm92ZW1lbnSUjAVob3VzZZSMDm1ham9yX3B1cmNoYXNllIwHbWVkaWNh
bJSMBm1vdmluZ5SMBW90aGVylIwQcmVuZXdhYmxlX2VuZXJneZSMDnNtYWxsX2J1c2luZXNzlIwI
dmFjYXRpb26UjAd3ZWRkaW5nlGWGlGqHCAAAXZQojAJBS5SMAkFMlIwCQVKUjAJBWpSMAkNBlIwC
Q0+UjAJDVJSMAkRDlIwCREWUjAJGTJSMAkdBlIwCSEmUjAJJTJSMAktTlIwCS1mUjAJMQZSMAk1B
lIwCTUSUjAJNSZSMAk1OlIwCTU+UjAJNU5SMAk1UlIwCTkOUjAJOSJSMAk5KlIwCTk2UjAJOVpSM
Ak5ZlIwCT0iUjAJPS5SMAk9SlIwCUEGUjAJSSZSMAlNDlIwCU0SUjAJUTpSMAlRYlIwCVVSUjAJW
QZSMAlZUlIwCV0GUjAJXSZSMAldWlIwCV1mUZYaUaooIAABLAoaUaowIAABLAoaUao4IAABLAoaU
apAIAABLAoaUapIIAABLAoaUapQIAABLAoaUapYIAABLAoaUapgIAABLAoaUapoIAABLAoaUapwI
AABLAoaUap4IAABdlGoEAgAAYYaUaqAIAABLAoaUaqIIAABLAoaUaqQIAABLAoaUaqYIAABLAoaU
aqgIAABLAoaUaqoIAABLAoaUaqwIAABLAoaUaq4IAABdlCiMBkFwci0xMZSMBkFwci0xMpSMBkFw
ci0xM5SMBkFwci0xNJSMBkFwci0xNZSMBkF1Zy0xMZSMBkF1Zy0xMpSMBkF1Zy0xM5SMBkF1Zy0x
NJSMBkF1Zy0xNZSMBkRlYy0xMZSMBkRlYy0xMpSMBkRlYy0xM5SMBkRlYy0xNJSMBkRlYy0xNZSM
BkZlYi0xMpSMBkZlYi0xM5SMBkZlYi0xNJSMBkZlYi0xNZSMBkphbi0xMpSMBkphbi0xM5SMBkph
bi0xNJSMBkphbi0xNZSMBkphbi0xNpSMBkp1bC0xMZSMBkp1bC0xMpSMBkp1bC0xM5SMBkp1bC0x
NJSMBkp1bC0xNZSMBkp1bi0xMZSMBkp1bi0xMpSMBkp1bi0xM5SMBkp1bi0xNJSMBkp1bi0xNZSM
Bk1hci0xMZSMBk1hci0xMpSMBk1hci0xM5SMBk1hci0xNJSMBk1hci0xNZSMBk1heS0xMZSMBk1h
eS0xMpSMBk1heS0xM5SMBk1heS0xNJSMBk1heS0xNZSMBk5vdi0xMZSMBk5vdi0xMpSMBk5vdi0x
M5SMBk5vdi0xNJSMBk5vdi0xNZSMBk9jdC0xMZSMBk9jdC0xMpSMBk9jdC0xM5SMBk9jdC0xNJSM
Bk9jdC0xNZSMBlNlcC0xMZSMBlNlcC0xMpSMBlNlcC0xM5SMBlNlcC0xNJSMBlNlcC0xNZRlhpRq
sQgAAEsChpRqswgAAF2UarQIAABhhpRqtggAAEsChpRquAgAAEsChpRquggAAEsChpRqvAgAAEsC
hpRqvggAAF2Uar8IAABhhpRqwQgAAEsChpRqwwgAAEsChpRqxQgAAEsChpRqxwgAAEsChpRqyQgA
AEsChpRqywgAAEsChpRqzQgAAEsChpRqzwgAAEsChpRq0QgAAEsChpRq0wgAAEsChpRq1QgAAEsC
hpRq1wgAAEsChpRq2QgAAEsChpRq2wgAAEsChpRq3QgAAEsChpRq3wgAAEsChpRq4QgAAEsChpRq
4wgAAF2UKGqXAgAAaMRlhpR0lGqaAgAAauYIAABLA4aUaugIAABLA4aUhpRqpAIAAClqpQIAAF2U
dWJldS4=
</properties>
		<properties node_id="1" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xfae\x00\x00\x00\xeb\xff\xff\xfe\x1f\x00\x00\x02=\xff\xff\xfaf\x00\x00\x01\x00\xff\xff\xfe\x1e\x00\x00\x02&lt;\x00\x00\x00\x01\x00\x00\x00\x00\x07\x80\xff\xff\xfaf\x00\x00\x01\x00\xff\xff\xfe\x1e\x00\x00\x02&lt;', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rows': [], 'columns': []}, 'stored_sort': [], '__version__': 1}</properties>
		<properties node_id="2" format="pickle">gASV3RYAAAAAAAB9lCiMCmF1dG9fYXBwbHmUiIwSY29udHJvbEFyZWFWaXNpYmxllIiMEGN1bXVs
YXRpdmVfZGlzdHKUiYwTZml0dGVkX2Rpc3RyaWJ1dGlvbpRLB4wJaGlkZV9iYXJzlImMDWtkZV9z
bW9vdGhpbmeUSwqME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAP//+H/////KAAAAAAAA
A9D///iA////3/////8AAAPPAAAAAQIAAAAHgP//+ID////f/////wAAA8+UjApzaG93X3Byb2Jz
lImMDHNvcnRfYnlfZnJlcZSIjA9zdGFja2VkX2NvbHVtbnOUiYwLX192ZXJzaW9uX1+USwKMEGNv
bnRleHRfc2V0dGluZ3OUXZQojBVvcmFuZ2V3aWRnZXQuc2V0dGluZ3OUjAdDb250ZXh0lJOUKYGU
fZQojAZ2YWx1ZXOUfZQojARjdmFylE5K/v///4aUjA5udW1iZXJfb2ZfYmluc5RLAUr+////hpSM
DXNlbGVjdGVkX2JhcnOUj5RK/v///4aUjAN2YXKUjANkdGmUS2aGlGgMSwJ1jAphdHRyaWJ1dGVz
lH2UKIwJRmVhdHVyZSAxlEsCjApVbm5hbWVkOiAwlEsCjAJpZJRLAowJbWVtYmVyX2lklEsCjAls
b2FuX2FtbnSUSwKMC2Z1bmRlZF9hbW50lEsCjA9mdW5kZWRfYW1udF9pbnaUSwKMBHRlcm2USwGM
CGludF9yYXRllEsCjAtpbnN0YWxsbWVudJRLAowFZ3JhZGWUSwGMCXN1Yl9ncmFkZZRLAYwKZW1w
X2xlbmd0aJRLAYwOaG9tZV9vd25lcnNoaXCUSwGMCmFubnVhbF9pbmOUSwKME3ZlcmlmaWNhdGlv
bl9zdGF0dXOUSwGMB2lzc3VlX2SUSwGMC2xvYW5fc3RhdHVzlEsBjApweW1udF9wbGFulEsBjAdw
dXJwb3NllEsBjAphZGRyX3N0YXRllEsBaB5LAowLZGVsaW5xXzJ5cnOUSwKMDmlucV9sYXN0XzZt
dGhzlEsCjBZtdGhzX3NpbmNlX2xhc3RfZGVsaW5xlEsCjBZtdGhzX3NpbmNlX2xhc3RfcmVjb3Jk
lEsCjAhvcGVuX2FjY5RLAowHcHViX3JlY5RLAowJcmV2b2xfYmFslEsCjApyZXZvbF91dGlslEsC
jAl0b3RhbF9hY2OUSwKME2luaXRpYWxfbGlzdF9zdGF0dXOUSwGMCW91dF9wcm5jcJRLAowNb3V0
X3BybmNwX2ludpRLAowLdG90YWxfcHltbnSUSwKMD3RvdGFsX3B5bW50X2ludpRLAowPdG90YWxf
cmVjX3BybmNwlEsCjA10b3RhbF9yZWNfaW50lEsCjBJ0b3RhbF9yZWNfbGF0ZV9mZWWUSwKMCnJl
Y292ZXJpZXOUSwKMF2NvbGxlY3Rpb25fcmVjb3ZlcnlfZmVllEsCjAxsYXN0X3B5bW50X2SUSwGM
D2xhc3RfcHltbnRfYW1udJRLAowaY29sbGVjdGlvbnNfMTJfbXRoc19leF9tZWSUSwKMG210aHNf
c2luY2VfbGFzdF9tYWpvcl9kZXJvZ5RLAowLcG9saWN5X2NvZGWUSwGMEGFwcGxpY2F0aW9uX3R5
cGWUSwGMEGFubnVhbF9pbmNfam9pbnSUSwKMCWR0aV9qb2ludJRLAowZdmVyaWZpY2F0aW9uX3N0
YXR1c19qb2ludJRLAowOYWNjX25vd19kZWxpbnGUSwKMDHRvdF9jb2xsX2FtdJRLAowLdG90X2N1
cl9iYWyUSwKMC29wZW5fYWNjXzZtlEsCjApvcGVuX2lsXzZtlEsCjAtvcGVuX2lsXzEybZRLAowL
b3Blbl9pbF8yNG2USwKMEm10aHNfc2luY2VfcmNudF9pbJRLAowMdG90YWxfYmFsX2lslEsCjAdp
bF91dGlslEsCjAtvcGVuX3J2XzEybZRLAowLb3Blbl9ydl8yNG2USwKMCm1heF9iYWxfYmOUSwKM
CGFsbF91dGlslEsCjBB0b3RhbF9yZXZfaGlfbGltlEsCjAZpbnFfZmmUSwKMC3RvdGFsX2N1X3Rs
lEsCjAxpbnFfbGFzdF8xMm2USwKMDmVtcF9sZW5ndGhfaW50lEsCjBVlYXJsaWVzdF9jcl9saW5l
X2RhdGWUSwSMG210aHNfc2luY2VfZWFybGllc3RfY3JfbGluZZRLAowIdGVybV9pbnSUSwKMDGlz
c3VlX2RfZGF0ZZRLBIwSbXRoc19zaW5jZV9pc3N1ZV9klEsCjAhnb29kX2JhZJRLAXWMBW1ldGFz
lH2UKIwJZW1wX3RpdGxllEsDjAN1cmyUSwOMBGRlc2OUSwOMBXRpdGxllEsDjAh6aXBfY29kZZRL
A4wQZWFybGllc3RfY3JfbGluZZRLA4wMbmV4dF9weW1udF9klEsDjBJsYXN0X2NyZWRpdF9wdWxs
X2SUSwN1dWJoESmBlH2UKGgUfZQoaBaMCGdvb2RfYmFklEtlhpRoGEsBSv7///+GlGgaj5RK/v//
/4aUaB2MCGludF9yYXRllEtmhpRoDEsCdWggfZQojAlGZWF0dXJlIDGUSwKMClVubmFtZWQ6IDCU
SwKMAmlklEsCjAltZW1iZXJfaWSUSwKMCWxvYW5fYW1udJRLAowLZnVuZGVkX2FtbnSUSwKMD2Z1
bmRlZF9hbW50X2ludpRLAowEdGVybZRLAYwIaW50X3JhdGWUSwKMC2luc3RhbGxtZW50lEsCjAVn
cmFkZZRLAYwJc3ViX2dyYWRllEsBjAplbXBfbGVuZ3RolEsBjA5ob21lX293bmVyc2hpcJRLAYwK
YW5udWFsX2luY5RLAowTdmVyaWZpY2F0aW9uX3N0YXR1c5RLAYwHaXNzdWVfZJRLAYwLbG9hbl9z
dGF0dXOUSwGMCnB5bW50X3BsYW6USwGMB3B1cnBvc2WUSwGMCmFkZHJfc3RhdGWUSwGMA2R0aZRL
AowLZGVsaW5xXzJ5cnOUSwKMDmlucV9sYXN0XzZtdGhzlEsCjBZtdGhzX3NpbmNlX2xhc3RfZGVs
aW5xlEsCjBZtdGhzX3NpbmNlX2xhc3RfcmVjb3JklEsCjAhvcGVuX2FjY5RLAowHcHViX3JlY5RL
AowJcmV2b2xfYmFslEsCjApyZXZvbF91dGlslEsCjAl0b3RhbF9hY2OUSwKME2luaXRpYWxfbGlz
dF9zdGF0dXOUSwGMCW91dF9wcm5jcJRLAowNb3V0X3BybmNwX2ludpRLAowLdG90YWxfcHltbnSU
SwKMD3RvdGFsX3B5bW50X2ludpRLAowPdG90YWxfcmVjX3BybmNwlEsCjA10b3RhbF9yZWNfaW50
lEsCjBJ0b3RhbF9yZWNfbGF0ZV9mZWWUSwKMCnJlY292ZXJpZXOUSwKMF2NvbGxlY3Rpb25fcmVj
b3ZlcnlfZmVllEsCjAxsYXN0X3B5bW50X2SUSwGMD2xhc3RfcHltbnRfYW1udJRLAowMbmV4dF9w
eW1udF9klEsBjBJsYXN0X2NyZWRpdF9wdWxsX2SUSwGMGmNvbGxlY3Rpb25zXzEyX210aHNfZXhf
bWVklEsBjBttdGhzX3NpbmNlX2xhc3RfbWFqb3JfZGVyb2eUSwKMC3BvbGljeV9jb2RllEsBjBBh
cHBsaWNhdGlvbl90eXBllEsBjBBhbm51YWxfaW5jX2pvaW50lEsCjAlkdGlfam9pbnSUSwKMGXZl
cmlmaWNhdGlvbl9zdGF0dXNfam9pbnSUSwKMDmFjY19ub3dfZGVsaW5xlEsBjAx0b3RfY29sbF9h
bXSUSwKMC3RvdF9jdXJfYmFslEsCjAtvcGVuX2FjY182bZRLAowKb3Blbl9pbF82bZRLAowLb3Bl
bl9pbF8xMm2USwKMC29wZW5faWxfMjRtlEsCjBJtdGhzX3NpbmNlX3JjbnRfaWyUSwKMDHRvdGFs
X2JhbF9pbJRLAowHaWxfdXRpbJRLAowLb3Blbl9ydl8xMm2USwKMC29wZW5fcnZfMjRtlEsCjApt
YXhfYmFsX2JjlEsCjAhhbGxfdXRpbJRLAowQdG90YWxfcmV2X2hpX2xpbZRLAowGaW5xX2ZplEsC
jAt0b3RhbF9jdV90bJRLAowMaW5xX2xhc3RfMTJtlEsCjA5lbXBfbGVuZ3RoX2ludJRLAowVZWFy
bGllc3RfY3JfbGluZV9kYXRllEsEjBttdGhzX3NpbmNlX2VhcmxpZXN0X2NyX2xpbmWUSwKMCHRl
cm1faW50lEsCjAxpc3N1ZV9kX2RhdGWUSwSMEm10aHNfc2luY2VfaXNzdWVfZJRLAowIZ29vZF9i
YWSUSwF1aGx9lCiMCWVtcF90aXRsZZRLA4wDdXJslEsDjARkZXNjlEsDjAV0aXRsZZRLA4wIemlw
X2NvZGWUSwOMEGVhcmxpZXN0X2NyX2xpbmWUSwN1dWJoESmBlH2UKGgUfZQojARjdmFylIwIZ29v
ZF9iYWSUS2WGlIwObnVtYmVyX29mX2JpbnOUSwFK/v///4aUjA1zZWxlY3RlZF9iYXJzlI+USv7/
//+GlIwDdmFylIwIaW50X3JhdGWUS2aGlGgMSwJ1aCB9lCiMCUZlYXR1cmUgMZRLAowJbG9hbl9h
bW50lEsCjAtmdW5kZWRfYW1udJRLAowEdGVybZRLAWjhSwKMC2luc3RhbGxtZW50lEsCjAVncmFk
ZZRLAYwJc3ViX2dyYWRllEsBjAplbXBfbGVuZ3RolEsBjA5ob21lX293bmVyc2hpcJRLAYwKYW5u
dWFsX2luY5RLAowTdmVyaWZpY2F0aW9uX3N0YXR1c5RLAYwHaXNzdWVfZJRLAYwLbG9hbl9zdGF0
dXOUSwGMB3B1cnBvc2WUSwGMCmFkZHJfc3RhdGWUSwGMA2R0aZRLAowLZGVsaW5xXzJ5cnOUSwKM
DmlucV9sYXN0XzZtdGhzlEsCjBZtdGhzX3NpbmNlX2xhc3RfZGVsaW5xlEsCjBZtdGhzX3NpbmNl
X2xhc3RfcmVjb3JklEsCjAhvcGVuX2FjY5RLAowHcHViX3JlY5RLAowJcmV2b2xfYmFslEsCjApy
ZXZvbF91dGlslEsCjAl0b3RhbF9hY2OUSwKME2luaXRpYWxfbGlzdF9zdGF0dXOUSwGMCW91dF9w
cm5jcJRLAowLdG90YWxfcHltbnSUSwKMD3RvdGFsX3JlY19wcm5jcJRLAowNdG90YWxfcmVjX2lu
dJRLAowSdG90YWxfcmVjX2xhdGVfZmVllEsCjApyZWNvdmVyaWVzlEsCjBdjb2xsZWN0aW9uX3Jl
Y292ZXJ5X2ZlZZRLAowMbGFzdF9weW1udF9klEsBjA9sYXN0X3B5bW50X2FtbnSUSwKMGmNvbGxl
Y3Rpb25zXzEyX210aHNfZXhfbWVklEsBjBttdGhzX3NpbmNlX2xhc3RfbWFqb3JfZGVyb2eUSwKM
EGFubnVhbF9pbmNfam9pbnSUSwKMCWR0aV9qb2ludJRLAowZdmVyaWZpY2F0aW9uX3N0YXR1c19q
b2ludJRLAowOYWNjX25vd19kZWxpbnGUSwGMDHRvdF9jb2xsX2FtdJRLAowLdG90X2N1cl9iYWyU
SwKMC29wZW5fYWNjXzZtlEsCjApvcGVuX2lsXzZtlEsCjAtvcGVuX2lsXzEybZRLAowLb3Blbl9p
bF8yNG2USwKMEm10aHNfc2luY2VfcmNudF9pbJRLAowMdG90YWxfYmFsX2lslEsCjAdpbF91dGls
lEsCjAtvcGVuX3J2XzEybZRLAowLb3Blbl9ydl8yNG2USwKMCm1heF9iYWxfYmOUSwKMCGFsbF91
dGlslEsCjBB0b3RhbF9yZXZfaGlfbGltlEsCjAZpbnFfZmmUSwKMC3RvdGFsX2N1X3RslEsCjAxp
bnFfbGFzdF8xMm2USwKMDmVtcF9sZW5ndGhfaW50lEsCjBVlYXJsaWVzdF9jcl9saW5lX2RhdGWU
SwSMG210aHNfc2luY2VfZWFybGllc3RfY3JfbGluZZRLAowIdGVybV9pbnSUSwKMDGlzc3VlX2Rf
ZGF0ZZRLBIwSbXRoc19zaW5jZV9pc3N1ZV9klEsCaNlLAXVobH2UKIwEZGVzY5RLA4wQZWFybGll
c3RfY3JfbGluZZRLA3V1YmgRKYGUfZQoaBR9lCiMBGN2YXKUjAhnb29kX2JhZJRLZYaUjA5udW1i
ZXJfb2ZfYmluc5RLAEr+////hpSMDXNlbGVjdGVkX2JhcnOUj5RK/v///4aUjAN2YXKUjAplbXBf
bGVuZ3RolEtlhpRoDEsCdWggfZQojAlsb2FuX2FtbnSUSwKMC2Z1bmRlZF9hbW50lEsCjAR0ZXJt
lEsBjAhpbnRfcmF0ZZRLAowLaW5zdGFsbG1lbnSUSwKMBWdyYWRllEsBjAlzdWJfZ3JhZGWUSwGM
CmVtcF9sZW5ndGiUSwGMDmhvbWVfb3duZXJzaGlwlEsBjAphbm51YWxfaW5jlEsCjBN2ZXJpZmlj
YXRpb25fc3RhdHVzlEsBjAdpc3N1ZV9klEsBjAtsb2FuX3N0YXR1c5RLAYwHcHVycG9zZZRLAYwK
YWRkcl9zdGF0ZZRLAYwDZHRplEsCjAtkZWxpbnFfMnlyc5RLAowOaW5xX2xhc3RfNm10aHOUSwKM
Fm10aHNfc2luY2VfbGFzdF9kZWxpbnGUSwKMFm10aHNfc2luY2VfbGFzdF9yZWNvcmSUSwKMCG9w
ZW5fYWNjlEsCjAdwdWJfcmVjlEsCjAlyZXZvbF9iYWyUSwKMCnJldm9sX3V0aWyUSwKMCXRvdGFs
X2FjY5RLAowTaW5pdGlhbF9saXN0X3N0YXR1c5RLAYwJb3V0X3BybmNwlEsCjAt0b3RhbF9weW1u
dJRLAowPdG90YWxfcmVjX3BybmNwlEsCjA10b3RhbF9yZWNfaW50lEsCjBJ0b3RhbF9yZWNfbGF0
ZV9mZWWUSwKMCnJlY292ZXJpZXOUSwKMF2NvbGxlY3Rpb25fcmVjb3ZlcnlfZmVllEsCjAxsYXN0
X3B5bW50X2SUSwGMD2xhc3RfcHltbnRfYW1udJRLAowaY29sbGVjdGlvbnNfMTJfbXRoc19leF9t
ZWSUSwGMG210aHNfc2luY2VfbGFzdF9tYWpvcl9kZXJvZ5RLAowQYW5udWFsX2luY19qb2ludJRL
AowJZHRpX2pvaW50lEsCjBl2ZXJpZmljYXRpb25fc3RhdHVzX2pvaW50lEsCjA5hY2Nfbm93X2Rl
bGlucZRLAYwMdG90X2NvbGxfYW10lEsCjAt0b3RfY3VyX2JhbJRLAowLb3Blbl9hY2NfNm2USwKM
Cm9wZW5faWxfNm2USwKMC29wZW5faWxfMTJtlEsCjAtvcGVuX2lsXzI0bZRLAowSbXRoc19zaW5j
ZV9yY250X2lslEsCjAx0b3RhbF9iYWxfaWyUSwKMB2lsX3V0aWyUSwKMC29wZW5fcnZfMTJtlEsC
jAtvcGVuX3J2XzI0bZRLAowKbWF4X2JhbF9iY5RLAowIYWxsX3V0aWyUSwKMEHRvdGFsX3Jldl9o
aV9saW2USwKMBmlucV9maZRLAowLdG90YWxfY3VfdGyUSwKMDGlucV9sYXN0XzEybZRLAowIZ29v
ZF9iYWSUSwF1aGx9lCiMBGRlc2OUSwOMEGVhcmxpZXN0X2NyX2xpbmWUSwN1dWJldS4=
</properties>
		<properties node_id="3" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xff\xff\xff\xff\xff\xf9\x00\x00\x05\x00\x00\x00\x02\xa0\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x04\xff\x00\x00\x02\x9f\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x04\xff\x00\x00\x02\x9f', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndef plot_woe_bad_rate_by_variable(in_data, target_variable=\'purpose\', outcome_variable=None, figsize=(20, 12)):\n    try:\n        # Get the purpose variable from the domain\n        purpose_var = in_data.domain[target_variable]\n        if not isinstance(purpose_var, DiscreteVariable):\n            raise ValueError(f"The \'{target_variable}\' variable must be a DiscreteVariable.")\n        \n        # Create a dictionary to map numeric values to purpose names\n        purpose_mapping = {i: value for i, value in enumerate(purpose_var.values)}\n        \n        # Print purpose mapping for verification\n        print("Purpose Mapping:")\n        for key, value in purpose_mapping.items():\n            print(f"{key}: {value}")\n        \n        # Convert Orange data to pandas DataFrame\n        data = pd.DataFrame({\n            var.name: in_data.get_column(var.name)\n            for var in in_data.domain.variables\n        })\n        \n        # Print the first few rows of the DataFrame for verification\n        print("\\nFirst few rows of the DataFrame:")\n        print(data.head())\n        \n        # If outcome_variable is not specified or not in columns, use the last column\n        if outcome_variable is None or outcome_variable not in data.columns:\n            outcome_variable = data.columns[-1]\n        \n        print(f"\\nOutcome variable: {outcome_variable}")\n        \n        # Create \'Good\' and \'Bad\' columns based on the outcome variable\n        median = data[outcome_variable].median()\n        data[\'Good\'] = (data[outcome_variable] &gt;= median).astype(int)\n        data[\'Bad\'] = (data[outcome_variable] &lt; median).astype(int)\n        \n        # Calculate WoE and other metrics\n        grouped = data.groupby(target_variable).agg({\n            \'Good\': \'sum\',\n            \'Bad\': \'sum\'\n        }).reset_index()\n        \n        grouped[\'Total\'] = grouped[\'Good\'] + grouped[\'Bad\']\n        grouped[\'GoodRate\'] = grouped[\'Good\'] / grouped[\'Total\']\n        grouped[\'BadRate\'] = grouped[\'Bad\'] / grouped[\'Total\']\n        \n        total_good = grouped[\'Good\'].sum()\n        total_bad = grouped[\'Bad\'].sum()\n        \n        grouped[\'WoE\'] = np.log((grouped[\'GoodRate\'] / (total_good / grouped[\'Total\'].sum())) / \n                                (grouped[\'BadRate\'] / (total_bad / grouped[\'Total\'].sum())))\n        \n        # Map numeric purposes to their descriptions\n        grouped[\'purpose_description\'] = grouped[target_variable].map(purpose_mapping)\n        \n        # Print grouped data for verification\n        print("\\nGrouped data:")\n        print(grouped)\n        \n        # Sort by WoE for better visualization\n        grouped = grouped.sort_values(\'WoE\')\n        \n        purposes = grouped[\'purpose_description\']\n        woe = grouped[\'WoE\']\n        good_rate = grouped[\'GoodRate\'] * 100\n        bad_rate = grouped[\'BadRate\'] * 100\n        \n        # Create the plot\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)\n        \n        # Stacked bar chart\n        ax1.barh(purposes, bad_rate, label=\'Bad\', color=\'#0E2E98\')\n        ax1.barh(purposes, good_rate, left=bad_rate, label=\'Good\', color=\'#16D3F0\')\n        \n        ax1.set_title(\'Good/Bad Rate by Purpose\')\n        ax1.set_xlabel(\'Percentage\')\n        ax1.set_ylabel(\'Purpose\')\n        ax1.legend(loc=\'lower right\')\n        \n        # Add percentage labels\n        for i, (bad, good) in enumerate(zip(bad_rate, good_rate)):\n            ax1.text(bad/2, i, f\'{bad:.1f}%\', va=\'center\', ha=\'center\')\n            ax1.text(bad + good/2, i, f\'{good:.1f}%\', va=\'center\', ha=\'center\')\n        \n        # WoE chart\n        ax2.plot(woe, purposes, marker=\'o\')\n        ax2.set_title(\'Weight of Evidence (WoE) by Purpose\')\n        ax2.set_xlabel(\'WoE\')\n        ax2.set_ylabel(\'Purpose\')\n        ax2.axvline(x=0, color=\'r\', linestyle=\'--\')\n        \n        # Add WoE values as text\n        for i, (purpose, w) in enumerate(zip(purposes, woe)):\n            ax2.text(w, i, f\'{w:.2f}\', va=\'center\', ha=\'left\' if w &gt;= 0 else \'right\')\n        \n        plt.tight_layout()\n        plt.show()\n\n        # Create a new Orange table with the plot data\n        domain = Domain([DiscreteVariable(target_variable, values=purposes.tolist()),\n                         ContinuousVariable("WoE"),\n                         ContinuousVariable("Good_Rate"),\n                         ContinuousVariable("Bad_Rate")])\n        out_data = Table.from_numpy(domain, \n                                    X=np.column_stack((\n                                        grouped[target_variable],  # Use original numeric values\n                                        woe,\n                                        good_rate,\n                                        bad_rate\n                                    )))\n        return out_data\n    \n    except Exception as e:\n        print(f"Error creating the plot: {str(e)}")\n        return None\n\n# Usage of the function\nif in_data is not None:\n    out_data = plot_woe_bad_rate_by_variable(in_data, target_variable=\'purpose\', outcome_variable=None, figsize=(20, 12))\nelse:\n    print("No input data provided.")\n    out_data = None', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xac\x00\x00\x00h\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="4" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01:\x00\x00\x00`\x00\x00\x03\xc7\x00\x00\x02^\x00\x00\x01;\x00\x00\x00~\x00\x00\x03\xc6\x00\x00\x02]\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x01;\x00\x00\x00~\x00\x00\x03\xc6\x00\x00\x02]', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndef plot_woe_bad_rate_by_variable(in_data, target_variable, outcome_variable=None, figsize=(20, 12)):\n    try:\n        # Get the target variable from the domain\n        target_var = in_data.domain[target_variable]\n        if not isinstance(target_var, DiscreteVariable):\n            raise ValueError(f"The \'{target_variable}\' variable must be a DiscreteVariable.")\n        \n        # Create a dictionary to map numeric values to target names\n        target_mapping = {i: value for i, value in enumerate(target_var.values)}\n        \n        # Print target mapping for verification\n        print(f"{target_variable} Mapping:")\n        for key, value in target_mapping.items():\n            print(f"{key}: {value}")\n        \n        # Convert Orange data to pandas DataFrame\n        data = pd.DataFrame({\n            var.name: in_data.get_column(var.name)\n            for var in in_data.domain.variables\n        })\n        \n        # Print the first few rows of the DataFrame for verification\n        print("\\nFirst few rows of the DataFrame:")\n        print(data.head())\n        \n        # If outcome_variable is not specified or not in columns, use the last column\n        if outcome_variable is None or outcome_variable not in data.columns:\n            outcome_variable = data.columns[-1]\n        \n        print(f"\\nOutcome variable: {outcome_variable}")\n        \n        # Create \'Good\' and \'Bad\' columns based on the outcome variable\n        median = data[outcome_variable].median()\n        data[\'Good\'] = (data[outcome_variable] &gt;= median).astype(int)\n        data[\'Bad\'] = (data[outcome_variable] &lt; median).astype(int)\n        \n        # Calculate WoE and other metrics\n        grouped = data.groupby(target_variable).agg({\n            \'Good\': \'sum\',\n            \'Bad\': \'sum\'\n        }).reset_index()\n        \n        grouped[\'Total\'] = grouped[\'Good\'] + grouped[\'Bad\']\n        grouped[\'GoodRate\'] = grouped[\'Good\'] / grouped[\'Total\']\n        grouped[\'BadRate\'] = grouped[\'Bad\'] / grouped[\'Total\']\n        \n        total_good = grouped[\'Good\'].sum()\n        total_bad = grouped[\'Bad\'].sum()\n        \n        grouped[\'WoE\'] = np.log((grouped[\'GoodRate\'] / (total_good / grouped[\'Total\'].sum())) / \n                                (grouped[\'BadRate\'] / (total_bad / grouped[\'Total\'].sum())))\n        \n        # Map numeric targets to their descriptions\n        grouped[\'target_description\'] = grouped[target_variable].map(target_mapping)\n        \n        # Print grouped data for verification\n        print("\\nGrouped data:")\n        print(grouped)\n        \n        # Sort by WoE for better visualization\n        grouped = grouped.sort_values(\'WoE\')\n        \n        targets = grouped[\'target_description\']\n        woe = grouped[\'WoE\']\n        good_rate = grouped[\'GoodRate\'] * 100\n        bad_rate = grouped[\'BadRate\'] * 100\n        \n        # Create the plot\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)\n        \n        # Stacked bar chart\n        ax1.barh(targets, bad_rate, label=\'Bad\', color=\'#0E2E98\')\n        ax1.barh(targets, good_rate, left=bad_rate, label=\'Good\', color=\'#16D3F0\')\n        \n        ax1.set_title(f\'Good/Bad Rate by {target_variable.capitalize()}\')\n        ax1.set_xlabel(\'Percentage\')\n        ax1.set_ylabel(target_variable.capitalize())\n        ax1.legend(loc=\'lower right\')\n        \n        # Add percentage labels\n        for i, (bad, good) in enumerate(zip(bad_rate, good_rate)):\n            ax1.text(bad/2, i, f\'{bad:.1f}%\', va=\'center\', ha=\'center\')\n            ax1.text(bad + good/2, i, f\'{good:.1f}%\', va=\'center\', ha=\'center\')\n        \n        # WoE chart\n        ax2.plot(woe, targets, marker=\'o\')\n        ax2.set_title(f\'Weight of Evidence (WoE) by {target_variable.capitalize()}\')\n        ax2.set_xlabel(\'WoE\')\n        ax2.set_ylabel(target_variable.capitalize())\n        ax2.axvline(x=0, color=\'r\', linestyle=\'--\')\n        \n        # Add WoE values as text\n        for i, (target, w) in enumerate(zip(targets, woe)):\n            ax2.text(w, i, f\'{w:.2f}\', va=\'center\', ha=\'left\' if w &gt;= 0 else \'right\')\n        \n        plt.tight_layout()\n        plt.show()\n\n        # Create a new Orange table with the plot data\n        domain = Domain([DiscreteVariable(target_variable, values=targets.tolist()),\n                         ContinuousVariable("WoE"),\n                         ContinuousVariable("Good_Rate"),\n                         ContinuousVariable("Bad_Rate")])\n        out_data = Table.from_numpy(domain, \n                                    X=np.column_stack((\n                                        grouped[target_variable],  # Use original numeric values\n                                        woe,\n                                        good_rate,\n                                        bad_rate\n                                    )))\n        return out_data\n    \n    except Exception as e:\n        print(f"Error creating the plot: {str(e)}")\n        return None\n\n# Example usage of the function\nif in_data is not None:\n     out_data = plot_woe_bad_rate_by_variable(in_data, target_variable=\'grade\', outcome_variable=None, figsize=(20, 12))\n# else:\n#     print("No input data provided.")\n#     out_data = None', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xac\x00\x00\x00h\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="5" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xfa\xfc\x00\x00\x00\xcc\xff\xff\xff\xfd\x00\x00\x03\x81\xff\xff\xfa\xfd\x00\x00\x00\xe1\xff\xff\xff\xfc\x00\x00\x03\x80\x00\x00\x00\x01\x00\x00\x00\x00\x07\x80\xff\xff\xfa\xfd\x00\x00\x00\xe1\xff\xff\xff\xfc\x00\x00\x03\x80', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import Orange\nimport matplotlib.pyplot as plt\n\n# Função para criar o gráfico de barras com porcentagens\ndef criar_grafico_inadimplencia(data):\n    # Assumindo que \'good_bad\' é uma coluna discreta onde 0 indica inadimplente e 1 indica adimplente\n    inadimplentes = sum(1 for d in data if d[\'good_bad\'] == 0)\n    adimplentes = sum(1 for d in data if d[\'good_bad\'] == 1)\n    total = len(data)\n\n    # Criando o gráfico de barras\n    categorias = [\'Inadimplentes\', \'Adimplentes\']\n    valores = [inadimplentes, adimplentes]\n    porcentagens = [(inadimplentes / total) * 100, (adimplentes / total) * 100]\n\n    plt.figure(figsize=(10, 7))\n    barras = plt.bar(categorias, valores, color=[\'#0E2E98\',\'#16D3F0\'])\n    \n    # Adicionando as porcentagens no topo das barras\n    for barra, porcentagem in zip(barras, porcentagens):\n        altura = barra.get_height()\n        plt.text(barra.get_x() + barra.get_width() / 2, altura, f\'{porcentagem:.1f}%\', \n                 ha=\'center\', va=\'bottom\', fontsize=12)\n\n    # Adicionando título e rótulos\n    plt.title(\'Quantidade e Porcentagem de Inadimplentes e Adimplentes\')\n    plt.xlabel(\'Status\')\n    plt.ylabel(\'Quantidade\')\n    plt.show()\n\n    # Criando uma nova tabela Orange com os resultados\n    domain = Orange.data.Domain([Orange.data.DiscreteVariable("Status", values=["Inadimplentes", "Adimplentes"]),\n                                 Orange.data.ContinuousVariable("Quantidade")])\n    \n    resultado = Orange.data.Table.from_list(domain, [\n        ["Inadimplentes", inadimplentes],\n        ["Adimplentes", adimplentes]\n    ])\n\n    return resultado\n\n# Exemplo de uso (assumindo que \'in_data\' é sua tabela Orange de entrada)\nif in_data is not None:\n    resultado = criar_grafico_inadimplencia(in_data)\n    print(resultado)\nelse:\n    print("Nenhum dado de entrada fornecido.")\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xac\x00\x00\x00h\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="6" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xfa\xfd\x00\x00\x00\x02\xff\xff\xfeQ\x00\x00\x01\xd5\xff\xff\xfa\xfe\x00\x00\x00\x17\xff\xff\xfeP\x00\x00\x01\xd4\x00\x00\x00\x01\x00\x00\x00\x00\x07\x80\xff\xff\xfa\xfe\x00\x00\x00\x17\xff\xff\xfeP\x00\x00\x01\xd4', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import Orange \nimport matplotlib.pyplot as plt\n\n# Função para criar gráfico de barras com porcentagens\ndef criar_grafico_barras(data, variavel):\n    # Verifica se a variável existe no dataset\n    if variavel not in data.domain:\n        print(f"Variável \'{variavel}\' não encontrada no dataset.")\n        return\n    \n    # Conta as ocorrências de cada valor da variável categórica\n    categorias = {}\n    for d in data:\n        valor = d[variavel].value\n        categorias[valor] = categorias.get(valor, 0) + 1\n    \n    # Converte o dicionário em listas e ordena do maior para o menor\n    categorias_ordenadas = sorted(categorias.items(), key=lambda x: x[1], reverse=True)\n    nomes_categorias, valores = zip(*categorias_ordenadas)\n    \n    total = sum(valores)\n    porcentagens = [(v / total) * 100 for v in valores]\n\n    # Definindo cores\n    azul_claro = \'#A8C6ED\'  # Azul claro para todas as barras\n    azul_escuro = \'#0E2E98\'  # Azul escuro para a barra mais alta\n\n    # Criando o gráfico de barras\n    plt.figure(figsize=(10, 7))\n    barras = plt.bar(nomes_categorias, valores, color=azul_claro)\n\n    # Destacando a barra mais alta\n    max_valor_index = valores.index(max(valores))\n    barras[max_valor_index].set_color(azul_escuro)\n\n    # Adicionando as porcentagens no topo das barras\n    for barra, porcentagem in zip(barras, porcentagens):\n        altura = barra.get_height()\n        plt.text(barra.get_x() + barra.get_width() / 2, altura, f\'{porcentagem:.1f}%\', \n                 ha=\'center\', va=\'bottom\', fontsize=12)\n\n    # Adicionando título e rótulos\n    plt.title(f\'Quantidade e Porcentagem por "{variavel}"\')\n    plt.xlabel(variavel)\n    plt.ylabel(\'Quantidade\')\n    plt.xticks(rotation=45)  # Gira os rótulos para melhor legibilidade\n    plt.grid(axis=\'y\', linestyle=\'--\', alpha=0.7)  # Adiciona uma grade no eixo Y\n    plt.show()\n\n    # Criando uma nova tabela Orange com os resultados\n    domain = Orange.data.Domain([Orange.data.DiscreteVariable("Categoria", values=list(nomes_categorias)),\n                                 Orange.data.ContinuousVariable("Quantidade")])\n    \n    resultado = Orange.data.Table.from_list(domain, [\n        [categoria, valor] for categoria, valor in zip(nomes_categorias, valores)\n    ])\n\n    return resultado\n\n# Exemplo de uso (assumindo que \'in_data\' é sua tabela Orange de entrada)\nif in_data is not None:\n    # Substitua \'purpose\' por qualquer outra variável categórica do dataset\n    resultado = criar_grafico_barras(in_data, \'purpose\')\n    print(resultado)\nelse:\n    print("Nenhum dado de entrada fornecido.")\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xac\x00\x00\x00h\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="7" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x07\x80\x00\x00\x00\x00\x00\x00\x0e\xff\x00\x00\x047\x00\x00\x07\x80\x00\x00\x00%\x00\x00\x0e\xff\x00\x00\x04\x15\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\x00\x00\x07\x80\x00\x00\x00%\x00\x00\x0e\xff\x00\x00\x047', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndef plot_woe_bad_rate_by_variable(in_data, target_variable, outcome_variable=None, figsize=(20, 12)):\n    try:\n        # Get the target variable from the domain\n        target_var = in_data.domain[target_variable]\n        if not isinstance(target_var, DiscreteVariable):\n            raise ValueError(f"The \'{target_variable}\' variable must be a DiscreteVariable.")\n        \n        # Create a dictionary to map numeric values to target names\n        target_mapping = {i: value for i, value in enumerate(target_var.values)}\n        \n        # Print target mapping for verification\n        print(f"{target_variable} Mapping:")\n        for key, value in target_mapping.items():\n            print(f"{key}: {value}")\n        \n        # Convert Orange data to pandas DataFrame\n        data = pd.DataFrame({\n            var.name: in_data.get_column(var.name)\n            for var in in_data.domain.variables\n        })\n        \n        # Print the first few rows of the DataFrame for verification\n        print("\\nFirst few rows of the DataFrame:")\n        print(data.head())\n        \n        # If outcome_variable is not specified or not in columns, use the last column\n        if outcome_variable is None or outcome_variable not in data.columns:\n            outcome_variable = data.columns[-1]\n        \n        print(f"\\nOutcome variable: {outcome_variable}")\n        \n        # Create \'Good\' and \'Bad\' columns based on the outcome variable\n        median = data[outcome_variable].median()\n        data[\'Good\'] = (data[outcome_variable] &gt;= median).astype(int)\n        data[\'Bad\'] = (data[outcome_variable] &lt; median).astype(int)\n        \n        # Calculate WoE and other metrics\n        grouped = data.groupby(target_variable).agg({\n            \'Good\': \'sum\',\n            \'Bad\': \'sum\'\n        }).reset_index()\n        \n        grouped[\'Total\'] = grouped[\'Good\'] + grouped[\'Bad\']\n        grouped[\'GoodRate\'] = grouped[\'Good\'] / grouped[\'Total\']\n        grouped[\'BadRate\'] = grouped[\'Bad\'] / grouped[\'Total\']\n        \n        total_good = grouped[\'Good\'].sum()\n        total_bad = grouped[\'Bad\'].sum()\n        \n        grouped[\'WoE\'] = np.log((grouped[\'GoodRate\'] / (total_good / grouped[\'Total\'].sum())) / \n                                (grouped[\'BadRate\'] / (total_bad / grouped[\'Total\'].sum())))\n        \n        # Map numeric targets to their descriptions\n        grouped[\'target_description\'] = grouped[target_variable].map(target_mapping)\n        \n        # Print grouped data for verification\n        print("\\nGrouped data:")\n        print(grouped)\n        \n        # Sort by WoE for better visualization\n        grouped = grouped.sort_values(\'WoE\')\n        \n        targets = grouped[\'target_description\']\n        woe = grouped[\'WoE\']\n        good_rate = grouped[\'GoodRate\'] * 100\n        bad_rate = grouped[\'BadRate\'] * 100\n        \n        # Create the plot\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)\n        \n        # Stacked bar chart\n        ax1.barh(targets, bad_rate, label=\'Bad\', color=\'#0E2E98\')\n        ax1.barh(targets, good_rate, left=bad_rate, label=\'Good\', color=\'#16D3F0\')\n        \n        ax1.set_title(f\'Good/Bad Rate by {target_variable.capitalize()}\')\n        ax1.set_xlabel(\'Percentage\')\n        ax1.set_ylabel(target_variable.capitalize())\n        ax1.legend(loc=\'lower right\')\n        \n        # Add percentage labels\n        for i, (bad, good) in enumerate(zip(bad_rate, good_rate)):\n            ax1.text(bad/2, i, f\'{bad:.1f}%\', va=\'center\', ha=\'center\')\n            ax1.text(bad + good/2, i, f\'{good:.1f}%\', va=\'center\', ha=\'center\')\n        \n        # WoE chart\n        ax2.plot(woe, targets, marker=\'o\')\n        ax2.set_title(f\'Weight of Evidence (WoE) by {target_variable.capitalize()}\')\n        ax2.set_xlabel(\'WoE\')\n        ax2.set_ylabel(target_variable.capitalize())\n        ax2.axvline(x=0, color=\'r\', linestyle=\'--\')\n        \n        # Add WoE values as text\n        for i, (target, w) in enumerate(zip(targets, woe)):\n            ax2.text(w, i, f\'{w:.2f}\', va=\'center\', ha=\'left\' if w &gt;= 0 else \'right\')\n        \n        plt.tight_layout()\n        plt.show()\n\n        # Create a new Orange table with the plot data\n        domain = Domain([DiscreteVariable(target_variable, values=targets.tolist()),\n                         ContinuousVariable("WoE"),\n                         ContinuousVariable("Good_Rate"),\n                         ContinuousVariable("Bad_Rate")])\n        out_data = Table.from_numpy(domain, \n                                    X=np.column_stack((\n                                        grouped[target_variable],  # Use original numeric values\n                                        woe,\n                                        good_rate,\n                                        bad_rate\n                                    )))\n        return out_data\n    \n    except Exception as e:\n        print(f"Error creating the plot: {str(e)}")\n        return None\n\n# Example usage of the function\nif in_data is not None:\n     out_data = plot_woe_bad_rate_by_variable(in_data, target_variable=\'emp_length\', outcome_variable=None, figsize=(20, 12))\n# else:\n#     print("No input data provided.")\n#     out_data = None', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xac\x00\x00\x00h\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="8" format="pickle">gASVQxYAAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNzYXZl
ZFdpZGdldEdlb21ldHJ5lENCAdnQywADAAD/////////+QAABQAAAAKg///88AAAAHwAAARwAAAD
XAAAAAACAAAABQAAAAAAAAAAFwAABP8AAAKflIwHc29ydGluZ5RLAIwDc2lwlIwOX3VucGlja2xl
X2VudW2Uk5SMDFB5UXQ1LlF0Q29yZZSMCVNvcnRPcmRlcpRLAIeUUpSGlIwLX192ZXJzaW9uX1+U
SwKMEGNvbnRleHRfc2V0dGluZ3OUXZQojBVvcmFuZ2V3aWRnZXQuc2V0dGluZ3OUjAdDb250ZXh0
lJOUKYGUfZQojAZ2YWx1ZXOUfZQojAljb2xvcl92YXKUjAhnb29kX2JhZJRLZYaUjA1zZWxlY3Rl
ZF92YXJzlF2UjApVbm5hbWVkOiAwlEtmhpRhSv3///+GlGgOSwJ1jAphdHRyaWJ1dGVzlH2UKIwJ
RmVhdHVyZSAxlEsCaB1LAowCaWSUSwKMCW1lbWJlcl9pZJRLAowJbG9hbl9hbW50lEsCjAtmdW5k
ZWRfYW1udJRLAowPZnVuZGVkX2FtbnRfaW52lEsCjAR0ZXJtlEsBjAhpbnRfcmF0ZZRLAowLaW5z
dGFsbG1lbnSUSwKMBWdyYWRllEsBjAlzdWJfZ3JhZGWUSwGMCmVtcF9sZW5ndGiUSwGMDmhvbWVf
b3duZXJzaGlwlEsBjAphbm51YWxfaW5jlEsCjBN2ZXJpZmljYXRpb25fc3RhdHVzlEsBjAdpc3N1
ZV9klEsBjAtsb2FuX3N0YXR1c5RLAYwKcHltbnRfcGxhbpRLAYwHcHVycG9zZZRLAYwKYWRkcl9z
dGF0ZZRLAYwDZHRplEsCjAtkZWxpbnFfMnlyc5RLAowOaW5xX2xhc3RfNm10aHOUSwKMFm10aHNf
c2luY2VfbGFzdF9kZWxpbnGUSwKMFm10aHNfc2luY2VfbGFzdF9yZWNvcmSUSwKMCG9wZW5fYWNj
lEsCjAdwdWJfcmVjlEsCjAlyZXZvbF9iYWyUSwKMCnJldm9sX3V0aWyUSwKMCXRvdGFsX2FjY5RL
AowTaW5pdGlhbF9saXN0X3N0YXR1c5RLAYwJb3V0X3BybmNwlEsCjA1vdXRfcHJuY3BfaW52lEsC
jAt0b3RhbF9weW1udJRLAowPdG90YWxfcHltbnRfaW52lEsCjA90b3RhbF9yZWNfcHJuY3CUSwKM
DXRvdGFsX3JlY19pbnSUSwKMEnRvdGFsX3JlY19sYXRlX2ZlZZRLAowKcmVjb3Zlcmllc5RLAowX
Y29sbGVjdGlvbl9yZWNvdmVyeV9mZWWUSwKMDGxhc3RfcHltbnRfZJRLAYwPbGFzdF9weW1udF9h
bW50lEsCjBpjb2xsZWN0aW9uc18xMl9tdGhzX2V4X21lZJRLAowbbXRoc19zaW5jZV9sYXN0X21h
am9yX2Rlcm9nlEsCjAtwb2xpY3lfY29kZZRLAYwQYXBwbGljYXRpb25fdHlwZZRLAYwQYW5udWFs
X2luY19qb2ludJRLAowJZHRpX2pvaW50lEsCjBl2ZXJpZmljYXRpb25fc3RhdHVzX2pvaW50lEsC
jA5hY2Nfbm93X2RlbGlucZRLAowMdG90X2NvbGxfYW10lEsCjAt0b3RfY3VyX2JhbJRLAowLb3Bl
bl9hY2NfNm2USwKMCm9wZW5faWxfNm2USwKMC29wZW5faWxfMTJtlEsCjAtvcGVuX2lsXzI0bZRL
AowSbXRoc19zaW5jZV9yY250X2lslEsCjAx0b3RhbF9iYWxfaWyUSwKMB2lsX3V0aWyUSwKMC29w
ZW5fcnZfMTJtlEsCjAtvcGVuX3J2XzI0bZRLAowKbWF4X2JhbF9iY5RLAowIYWxsX3V0aWyUSwKM
EHRvdGFsX3Jldl9oaV9saW2USwKMBmlucV9maZRLAowLdG90YWxfY3VfdGyUSwKMDGlucV9sYXN0
XzEybZRLAowOZW1wX2xlbmd0aF9pbnSUSwKMFWVhcmxpZXN0X2NyX2xpbmVfZGF0ZZRLBIwbbXRo
c19zaW5jZV9lYXJsaWVzdF9jcl9saW5llEsCjAh0ZXJtX2ludJRLAowMaXNzdWVfZF9kYXRllEsE
jBJtdGhzX3NpbmNlX2lzc3VlX2SUSwJoGUsBdYwFbWV0YXOUfZQojAllbXBfdGl0bGWUSwOMA3Vy
bJRLA4wEZGVzY5RLA4wFdGl0bGWUSwOMCHppcF9jb2RllEsDjBBlYXJsaWVzdF9jcl9saW5llEsD
jAxuZXh0X3B5bW50X2SUSwOMEmxhc3RfY3JlZGl0X3B1bGxfZJRLA3V1YmgTKYGUfZQoaBZ9lCho
GIwIZ29vZF9iYWSUS2WGlGgbXZSMC2luc3RhbGxtZW50lEtmhpRhSv3///+GlGgOSwJ1aCB9lCiM
CUZlYXR1cmUgMZRLAowKVW5uYW1lZDogMJRLAowCaWSUSwKMCW1lbWJlcl9pZJRLAowJbG9hbl9h
bW50lEsCjAtmdW5kZWRfYW1udJRLAowPZnVuZGVkX2FtbnRfaW52lEsCjAR0ZXJtlEsBjAhpbnRf
cmF0ZZRLAowLaW5zdGFsbG1lbnSUSwKMBWdyYWRllEsBjAlzdWJfZ3JhZGWUSwGMCmVtcF9sZW5n
dGiUSwGMDmhvbWVfb3duZXJzaGlwlEsBjAphbm51YWxfaW5jlEsCjBN2ZXJpZmljYXRpb25fc3Rh
dHVzlEsBjAdpc3N1ZV9klEsBjAtsb2FuX3N0YXR1c5RLAYwKcHltbnRfcGxhbpRLAYwHcHVycG9z
ZZRLAYwKYWRkcl9zdGF0ZZRLAYwDZHRplEsCjAtkZWxpbnFfMnlyc5RLAowOaW5xX2xhc3RfNm10
aHOUSwKMFm10aHNfc2luY2VfbGFzdF9kZWxpbnGUSwKMFm10aHNfc2luY2VfbGFzdF9yZWNvcmSU
SwKMCG9wZW5fYWNjlEsCjAdwdWJfcmVjlEsCjAlyZXZvbF9iYWyUSwKMCnJldm9sX3V0aWyUSwKM
CXRvdGFsX2FjY5RLAowTaW5pdGlhbF9saXN0X3N0YXR1c5RLAYwJb3V0X3BybmNwlEsCjA1vdXRf
cHJuY3BfaW52lEsCjAt0b3RhbF9weW1udJRLAowPdG90YWxfcHltbnRfaW52lEsCjA90b3RhbF9y
ZWNfcHJuY3CUSwKMDXRvdGFsX3JlY19pbnSUSwKMEnRvdGFsX3JlY19sYXRlX2ZlZZRLAowKcmVj
b3Zlcmllc5RLAowXY29sbGVjdGlvbl9yZWNvdmVyeV9mZWWUSwKMDGxhc3RfcHltbnRfZJRLAYwP
bGFzdF9weW1udF9hbW50lEsCjAxuZXh0X3B5bW50X2SUSwGMEmxhc3RfY3JlZGl0X3B1bGxfZJRL
AYwaY29sbGVjdGlvbnNfMTJfbXRoc19leF9tZWSUSwGMG210aHNfc2luY2VfbGFzdF9tYWpvcl9k
ZXJvZ5RLAowLcG9saWN5X2NvZGWUSwGMEGFwcGxpY2F0aW9uX3R5cGWUSwGMEGFubnVhbF9pbmNf
am9pbnSUSwKMCWR0aV9qb2ludJRLAowZdmVyaWZpY2F0aW9uX3N0YXR1c19qb2ludJRLAowOYWNj
X25vd19kZWxpbnGUSwGMDHRvdF9jb2xsX2FtdJRLAowLdG90X2N1cl9iYWyUSwKMC29wZW5fYWNj
XzZtlEsCjApvcGVuX2lsXzZtlEsCjAtvcGVuX2lsXzEybZRLAowLb3Blbl9pbF8yNG2USwKMEm10
aHNfc2luY2VfcmNudF9pbJRLAowMdG90YWxfYmFsX2lslEsCjAdpbF91dGlslEsCjAtvcGVuX3J2
XzEybZRLAowLb3Blbl9ydl8yNG2USwKMCm1heF9iYWxfYmOUSwKMCGFsbF91dGlslEsCjBB0b3Rh
bF9yZXZfaGlfbGltlEsCjAZpbnFfZmmUSwKMC3RvdGFsX2N1X3RslEsCjAxpbnFfbGFzdF8xMm2U
SwKMDmVtcF9sZW5ndGhfaW50lEsCjBVlYXJsaWVzdF9jcl9saW5lX2RhdGWUSwSMG210aHNfc2lu
Y2VfZWFybGllc3RfY3JfbGluZZRLAowIdGVybV9pbnSUSwKMDGlzc3VlX2RfZGF0ZZRLBIwSbXRo
c19zaW5jZV9pc3N1ZV9klEsCjAhnb29kX2JhZJRLAXVoa32UKIwJZW1wX3RpdGxllEsDjAN1cmyU
SwOMBGRlc2OUSwOMBXRpdGxllEsDjAh6aXBfY29kZZRLA4wQZWFybGllc3RfY3JfbGluZZRLA3V1
YmgTKYGUfZQoaBZ9lCiMCWNvbG9yX3ZhcpSMCGdvb2RfYmFklEtlhpSMDXNlbGVjdGVkX3ZhcnOU
XZSMDmlucV9sYXN0XzZtdGhzlEtmhpRhSv3///+GlGgOSwJ1aCB9lCiMCUZlYXR1cmUgMZRLAowJ
bG9hbl9hbW50lEsCjAtmdW5kZWRfYW1udJRLAowEdGVybZRLAYwIaW50X3JhdGWUSwKMC2luc3Rh
bGxtZW50lEsCjAVncmFkZZRLAYwJc3ViX2dyYWRllEsBjAplbXBfbGVuZ3RolEsBjA5ob21lX293
bmVyc2hpcJRLAYwKYW5udWFsX2luY5RLAowTdmVyaWZpY2F0aW9uX3N0YXR1c5RLAYwHaXNzdWVf
ZJRLAYwLbG9hbl9zdGF0dXOUSwGMB3B1cnBvc2WUSwGMCmFkZHJfc3RhdGWUSwGMA2R0aZRLAowL
ZGVsaW5xXzJ5cnOUSwJo20sCjBZtdGhzX3NpbmNlX2xhc3RfZGVsaW5xlEsCjBZtdGhzX3NpbmNl
X2xhc3RfcmVjb3JklEsCjAhvcGVuX2FjY5RLAowHcHViX3JlY5RLAowJcmV2b2xfYmFslEsCjApy
ZXZvbF91dGlslEsCjAl0b3RhbF9hY2OUSwKME2luaXRpYWxfbGlzdF9zdGF0dXOUSwGMCW91dF9w
cm5jcJRLAowLdG90YWxfcHltbnSUSwKMD3RvdGFsX3JlY19wcm5jcJRLAowNdG90YWxfcmVjX2lu
dJRLAowSdG90YWxfcmVjX2xhdGVfZmVllEsCjApyZWNvdmVyaWVzlEsCjBdjb2xsZWN0aW9uX3Jl
Y292ZXJ5X2ZlZZRLAowMbGFzdF9weW1udF9klEsBjA9sYXN0X3B5bW50X2FtbnSUSwKMGmNvbGxl
Y3Rpb25zXzEyX210aHNfZXhfbWVklEsBjBttdGhzX3NpbmNlX2xhc3RfbWFqb3JfZGVyb2eUSwKM
EGFubnVhbF9pbmNfam9pbnSUSwKMCWR0aV9qb2ludJRLAowZdmVyaWZpY2F0aW9uX3N0YXR1c19q
b2ludJRLAowOYWNjX25vd19kZWxpbnGUSwGMDHRvdF9jb2xsX2FtdJRLAowLdG90X2N1cl9iYWyU
SwKMC29wZW5fYWNjXzZtlEsCjApvcGVuX2lsXzZtlEsCjAtvcGVuX2lsXzEybZRLAowLb3Blbl9p
bF8yNG2USwKMEm10aHNfc2luY2VfcmNudF9pbJRLAowMdG90YWxfYmFsX2lslEsCjAdpbF91dGls
lEsCjAtvcGVuX3J2XzEybZRLAowLb3Blbl9ydl8yNG2USwKMCm1heF9iYWxfYmOUSwKMCGFsbF91
dGlslEsCjBB0b3RhbF9yZXZfaGlfbGltlEsCjAZpbnFfZmmUSwKMC3RvdGFsX2N1X3RslEsCjAxp
bnFfbGFzdF8xMm2USwKMDmVtcF9sZW5ndGhfaW50lEsCjBVlYXJsaWVzdF9jcl9saW5lX2RhdGWU
SwSMG210aHNfc2luY2VfZWFybGllc3RfY3JfbGluZZRLAowIdGVybV9pbnSUSwKMDGlzc3VlX2Rf
ZGF0ZZRLBIwSbXRoc19zaW5jZV9pc3N1ZV9klEsCaNdLAXVoa32UKIwEZGVzY5RLA4wQZWFybGll
c3RfY3JfbGluZZRLA3V1YmgTKYGUfZQoaBZ9lCiMCWNvbG9yX3ZhcpSMCGdvb2RfYmFklEtlhpSM
DXNlbGVjdGVkX3ZhcnOUXZSMC2luc3RhbGxtZW50lEtmhpRhSv3///+GlGgOSwJ1aCB9lCiMCWxv
YW5fYW1udJRLAowLZnVuZGVkX2FtbnSUSwKMBHRlcm2USwGMCGludF9yYXRllEsCaioBAABLAowF
Z3JhZGWUSwGMCXN1Yl9ncmFkZZRLAYwKZW1wX2xlbmd0aJRLAYwOaG9tZV9vd25lcnNoaXCUSwGM
CmFubnVhbF9pbmOUSwKME3ZlcmlmaWNhdGlvbl9zdGF0dXOUSwGMB2lzc3VlX2SUSwGMC2xvYW5f
c3RhdHVzlEsBjAdwdXJwb3NllEsBjAphZGRyX3N0YXRllEsBjANkdGmUSwKMC2RlbGlucV8yeXJz
lEsCjA5pbnFfbGFzdF82bXRoc5RLAowWbXRoc19zaW5jZV9sYXN0X2RlbGlucZRLAowWbXRoc19z
aW5jZV9sYXN0X3JlY29yZJRLAowIb3Blbl9hY2OUSwKMB3B1Yl9yZWOUSwKMCXJldm9sX2JhbJRL
AowKcmV2b2xfdXRpbJRLAowJdG90YWxfYWNjlEsCjBNpbml0aWFsX2xpc3Rfc3RhdHVzlEsBjAlv
dXRfcHJuY3CUSwKMC3RvdGFsX3B5bW50lEsCjA90b3RhbF9yZWNfcHJuY3CUSwKMDXRvdGFsX3Jl
Y19pbnSUSwKMEnRvdGFsX3JlY19sYXRlX2ZlZZRLAowKcmVjb3Zlcmllc5RLAowXY29sbGVjdGlv
bl9yZWNvdmVyeV9mZWWUSwKMDGxhc3RfcHltbnRfZJRLAYwPbGFzdF9weW1udF9hbW50lEsCjBpj
b2xsZWN0aW9uc18xMl9tdGhzX2V4X21lZJRLAYwbbXRoc19zaW5jZV9sYXN0X21ham9yX2Rlcm9n
lEsCjBBhbm51YWxfaW5jX2pvaW50lEsCjAlkdGlfam9pbnSUSwKMGXZlcmlmaWNhdGlvbl9zdGF0
dXNfam9pbnSUSwKMDmFjY19ub3dfZGVsaW5xlEsBjAx0b3RfY29sbF9hbXSUSwKMC3RvdF9jdXJf
YmFslEsCjAtvcGVuX2FjY182bZRLAowKb3Blbl9pbF82bZRLAowLb3Blbl9pbF8xMm2USwKMC29w
ZW5faWxfMjRtlEsCjBJtdGhzX3NpbmNlX3JjbnRfaWyUSwKMDHRvdGFsX2JhbF9pbJRLAowHaWxf
dXRpbJRLAowLb3Blbl9ydl8xMm2USwKMC29wZW5fcnZfMjRtlEsCjAptYXhfYmFsX2JjlEsCjAhh
bGxfdXRpbJRLAowQdG90YWxfcmV2X2hpX2xpbZRLAowGaW5xX2ZplEsCjAt0b3RhbF9jdV90bJRL
AowMaW5xX2xhc3RfMTJtlEsCaiYBAABLAXVoa32UKIwEZGVzY5RLA4wQZWFybGllc3RfY3JfbGlu
ZZRLA3V1YmV1Lg==
</properties>
		<properties node_id="9" format="pickle">gASVPEgAAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjAxyZWNlbnRfcGF0aHOUXZQojB5v
cmFuZ2V3aWRnZXQudXRpbHMuZmlsZWRpYWxvZ3OUjApSZWNlbnRQYXRolJOUKYGUfZQojAdhYnNw
YXRolIxHQzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9Eb2N1bWVudHMvcmlzay1jcmVkaXQvbm90ZWJv
b2tzL3Jpc2tfdHJhdGFkby5jc3aUjAZwcmVmaXiUTowHcmVscGF0aJROjAV0aXRsZZSMAJSMBXNo
ZWV0lGgOjAtmaWxlX2Zvcm1hdJROdWJoBimBlH2UKGgJjDUvaG9tZS9ub2lzZS9Eb2N1bWVudG9z
L3Jpc2stY3JlZGl0L25vdGVib29rcy9yaXNrLmNzdpRoC05oDE5oDWgOaA9oDmgQTnViaAYpgZR9
lChoCYw/QzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9Eb2N1bWVudHMvcmlzay1jcmVkaXQvbm90ZWJv
b2tzL3Jpc2suY3N2lGgLTmgMTmgNaA5oD2gOaBBOdWJoBimBlH2UKGgJjGFDOi9VbmliYWxzYXMv
VHJhYmFsaG9zLzIwMjQuMi9JbnRlbGlnZW5jaWEgZG9zIG5lZ29jaW9zL1RFRCAxL2RhZG9zL3Rh
YmVsYV9jdXN0b19kZV92aWRhXzIwMTQuY3N2lGgLTmgMTmgNaA5oD2gOaBBOdWJoBimBlH2UKGgJ
jGFDOi9VbmliYWxzYXMvVHJhYmFsaG9zLzIwMjQuMi9JbnRlbGlnZW5jaWEgZG9zIG5lZ29jaW9z
L1RFRCAxL2RhZG9zL3RhYmVsYV9jdXN0b19kZV92aWRhXzIwMTguY3N2lGgLTmgMTmgNaA5oD2gO
aBBOdWJoBimBlH2UKGgJjGFDOi9VbmliYWxzYXMvVHJhYmFsaG9zLzIwMjQuMi9JbnRlbGlnZW5j
aWEgZG9zIG5lZ29jaW9zL1RFRCAxL2RhZG9zL3RhYmVsYV9jdXN0b19kZV92aWRhXzIwMjEuY3N2
lGgLTmgMTmgNaA5oD2gOaBBOdWJoBimBlH2UKGgJjEFDOi9Vc2Vycy9NcGVkci9Eb3dubG9hZHMv
Q29zdF9vZl9MaXZpbmdfSW5kZXhfYnlfQ291bnRyeV8yMDI0LmNzdpRoC4wHYmFzZWRpcpRoDIwo
Q29zdF9vZl9MaXZpbmdfSW5kZXhfYnlfQ291bnRyeV8yMDI0LmNzdpRoDWgOaA9oDmgQTnViaAYp
gZR9lChoCYxfQzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9BcHBEYXRhL0xvY2FsL1Byb2dyYW1zL09y
YW5nZS9MaWIvc2l0ZS1wYWNrYWdlcy9PcmFuZ2UvZGF0YXNldHMvaXJpcy50YWKUaAuMD3NhbXBs
ZS1kYXRhc2V0c5RoDIwIaXJpcy50YWKUaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMYkM6L1VzZXJz
L0dyYcO6bmEgTW90b3MvQXBwRGF0YS9Mb2NhbC9Qcm9ncmFtcy9PcmFuZ2UvTGliL3NpdGUtcGFj
a2FnZXMvT3JhbmdlL2RhdGFzZXRzL3RpdGFuaWMudGFilGgLaChoDIwLdGl0YW5pYy50YWKUaA1o
DmgPaA5oEE51YmgGKYGUfZQoaAmMYkM6L1VzZXJzL0dyYcO6bmEgTW90b3MvQXBwRGF0YS9Mb2Nh
bC9Qcm9ncmFtcy9PcmFuZ2UvTGliL3NpdGUtcGFja2FnZXMvT3JhbmdlL2RhdGFzZXRzL2hvdXNp
bmcudGFilGgLaChoDIwLaG91c2luZy50YWKUaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMaEM6L1Vz
ZXJzL0dyYcO6bmEgTW90b3MvQXBwRGF0YS9Mb2NhbC9Qcm9ncmFtcy9PcmFuZ2UvTGliL3NpdGUt
cGFja2FnZXMvT3JhbmdlL2RhdGFzZXRzL2hlYXJ0X2Rpc2Vhc2UudGFilGgLaChoDIwRaGVhcnRf
ZGlzZWFzZS50YWKUaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMaUM6L1VzZXJzL0dyYcO6bmEgTW90
b3MvQXBwRGF0YS9Mb2NhbC9Qcm9ncmFtcy9PcmFuZ2UvTGliL3NpdGUtcGFja2FnZXMvT3Jhbmdl
L2RhdGFzZXRzL2Jyb3duLXNlbGVjdGVkLnRhYpRoC2goaAyMEmJyb3duLXNlbGVjdGVkLnRhYpRo
DWgOaA9oDmgQTnViaAYpgZR9lChoCYxeQzovVXNlcnMvR3Jhw7puYSBNb3Rvcy9BcHBEYXRhL0xv
Y2FsL1Byb2dyYW1zL09yYW5nZS9MaWIvc2l0ZS1wYWNrYWdlcy9PcmFuZ2UvZGF0YXNldHMvem9v
LnRhYpRoC2goaAyMB3pvby50YWKUaA1oDmgPaA5oEE51YmWMC3JlY2VudF91cmxzlF2UjBNzYXZl
ZFdpZGdldEdlb21ldHJ5lENCAdnQywADAAAAAAFAAAAAYAAAA8EAAAKDAAABQQAAAH4AAAPAAAAC
ggAAAAAAAAAABQAAAAFBAAAAfgAAA8AAAAKClIwLc2hlZXRfbmFtZXOUfZSMBnNvdXJjZZRLAIwD
dXJslGgOjA1kb21haW5fZWRpdG9ylH2UjAtfX3ZlcnNpb25fX5RLAYwQY29udGV4dF9zZXR0aW5n
c5RdlCiMFW9yYW5nZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9lCiMBnZhbHVlc5R9
lCiMCXZhcmlhYmxlc5RdlGhGfZRoUl2UKF2UKIwJRmVhdHVyZSAxlIwUT3JhbmdlLmRhdGEudmFy
aWFibGWUjBJDb250aW51b3VzVmFyaWFibGWUk5RLAGgOiGVdlCiMClVubmFtZWQ6IDCUaFpLAGgO
iGVdlCiMAmlklGhaSwBoDohlXZQojAltZW1iZXJfaWSUaFpLAGgOiGVdlCiMCWxvYW5fYW1udJRo
WksAaA6IZV2UKIwLZnVuZGVkX2FtbnSUaFpLAGgOiGVdlCiMD2Z1bmRlZF9hbW50X2ludpRoWksA
aA6IZV2UKIwEdGVybZRoWIwQRGlzY3JldGVWYXJpYWJsZZSTlEsAjBQzNiBtb250aHMsIDYwIG1v
bnRoc5SJZV2UKIwIaW50X3JhdGWUaFpLAGgOiGVdlCiMC2luc3RhbGxtZW50lGhaSwBoDohlXZQo
jAVncmFkZZRoaksAjBNBLCBCLCBDLCBELCBFLCBGLCBHlIllXZQojAlzdWJfZ3JhZGWUaGpLAIxT
QTEsIEEyLCBBMywgQTQsIEE1LCBCMSwgQjIsIEIzLCBCNCwgQjUsIEMxLCBDMiwgQzMsIEM0LCBD
NSwgRDEsIEQyLCBEMywgRDQsIEQ1LCAuLi6UiWVdlCiMCmVtcF9sZW5ndGiUaGpLAIxjMSB5ZWFy
LCAyIHllYXJzLCAzIHllYXJzLCA0IHllYXJzLCA1IHllYXJzLCA2IHllYXJzLCA3IHllYXJzLCA4
IHllYXJzLCA5IHllYXJzLCAxMCsgeWVhcnMsIDwgMSB5ZWFylIllXZQojA5ob21lX293bmVyc2hp
cJRoaksAjBpNT1JUR0FHRSwgT1RIRVIsIE9XTiwgUkVOVJSJZV2UKIwKYW5udWFsX2luY5RoWksA
aA6IZV2UKIwTdmVyaWZpY2F0aW9uX3N0YXR1c5RoaksAjCdOb3QgVmVyaWZpZWQsIFNvdXJjZSBW
ZXJpZmllZCwgVmVyaWZpZWSUiWVdlCiMB2lzc3VlX2SUaGpLAIyeQXByLTExLCBBdWctMTAsIEF1
Zy0xMSwgRGVjLTEwLCBEZWMtMTEsIEZlYi0xMSwgSmFuLTExLCBKdWwtMTAsIEp1bC0xMSwgSnVu
LTEwLCBKdW4tMTEsIE1hci0xMSwgTWF5LTEwLCBNYXktMTEsIE5vdi0xMCwgTm92LTExLCBPY3Qt
MTAsIE9jdC0xMSwgU2VwLTEwLCBTZXAtMTGUiWVdlCiMC2xvYW5fc3RhdHVzlGhqSwCMYUNoYXJn
ZWQgT2ZmLCBDdXJyZW50LCBEZWZhdWx0LCBGdWxseSBQYWlkLCBJbiBHcmFjZSBQZXJpb2QsIExh
dGUgKDE2LTMwIGRheXMpLCBMYXRlICgzMS0xMjAgZGF5cymUiWVdlCiMCnB5bW50X3BsYW6UaGpL
AIwEbiwgeZSJZV2UKIwHcHVycG9zZZRoaksAjKdjYXIsIGNyZWRpdF9jYXJkLCBkZWJ0X2NvbnNv
bGlkYXRpb24sIGVkdWNhdGlvbmFsLCBob21lX2ltcHJvdmVtZW50LCBob3VzZSwgbWFqb3JfcHVy
Y2hhc2UsIG1lZGljYWwsIG1vdmluZywgb3RoZXIsIHJlbmV3YWJsZV9lbmVyZ3ksIHNtYWxsX2J1
c2luZXNzLCB2YWNhdGlvbiwgd2VkZGluZ5SJZV2UKIwKYWRkcl9zdGF0ZZRoaksAjFNBSywgQUws
IEFSLCBBWiwgQ0EsIENPLCBDVCwgREMsIERFLCBGTCwgR0EsIEhJLCBJQSwgSUwsIEtTLCBLWSwg
TEEsIE1BLCBNRCwgTUksIC4uLpSJZV2UKIwDZHRplGhaSwBoDohlXZQojAtkZWxpbnFfMnlyc5Ro
WksAaA6IZV2UKIwOaW5xX2xhc3RfNm10aHOUaFpLAGgOiGVdlCiMFm10aHNfc2luY2VfbGFzdF9k
ZWxpbnGUaFpLAGgOiGVdlCiMFm10aHNfc2luY2VfbGFzdF9yZWNvcmSUaFpLAGgOiGVdlCiMCG9w
ZW5fYWNjlGhaSwBoDohlXZQojAdwdWJfcmVjlGhaSwBoDohlXZQojAlyZXZvbF9iYWyUaFpLAGgO
iGVdlCiMCnJldm9sX3V0aWyUaFpLAGgOiGVdlCiMCXRvdGFsX2FjY5RoWksAaA6IZV2UKIwTaW5p
dGlhbF9saXN0X3N0YXR1c5RoaksAjAFmlIllXZQojAlvdXRfcHJuY3CUaFpLAGgOiGVdlCiMDW91
dF9wcm5jcF9pbnaUaFpLAGgOiGVdlCiMC3RvdGFsX3B5bW50lGhaSwBoDohlXZQojA90b3RhbF9w
eW1udF9pbnaUaFpLAGgOiGVdlCiMD3RvdGFsX3JlY19wcm5jcJRoWksAaA6IZV2UKIwNdG90YWxf
cmVjX2ludJRoWksAaA6IZV2UKIwSdG90YWxfcmVjX2xhdGVfZmVllGhaSwBoDohlXZQojApyZWNv
dmVyaWVzlGhaSwBoDohlXZQojBdjb2xsZWN0aW9uX3JlY292ZXJ5X2ZlZZRoWksAaA6IZV2UKIwM
bGFzdF9weW1udF9klGhqSwCMo0Fwci0xMSwgQXByLTEyLCBBcHItMTMsIEFwci0xNCwgQXByLTE1
LCBBdWctMTAsIEF1Zy0xMSwgQXVnLTEyLCBBdWctMTMsIEF1Zy0xNCwgQXVnLTE1LCBEZWMtMTAs
IERlYy0xMSwgRGVjLTEyLCBEZWMtMTMsIERlYy0xNCwgRGVjLTE1LCBGZWItMTEsIEZlYi0xMiwg
RmViLTEzLCAuLi6UiWVdlCiMD2xhc3RfcHltbnRfYW1udJRoWksAaA6IZV2UKIwMbmV4dF9weW1u
dF9klGhqSwCMDkZlYi0xNiwgSmFuLTE2lIllXZQojBJsYXN0X2NyZWRpdF9wdWxsX2SUaGpLAIyj
QXByLTExLCBBcHItMTIsIEFwci0xMywgQXByLTE0LCBBcHItMTUsIEF1Zy0xMCwgQXVnLTExLCBB
dWctMTIsIEF1Zy0xMywgQXVnLTE0LCBBdWctMTUsIERlYy0xMCwgRGVjLTExLCBEZWMtMTIsIERl
Yy0xMywgRGVjLTE0LCBEZWMtMTUsIEZlYi0xMSwgRmViLTEyLCBGZWItMTMsIC4uLpSJZV2UKIwa
Y29sbGVjdGlvbnNfMTJfbXRoc19leF9tZWSUaGpLAIwDMC4wlIhlXZQojBttdGhzX3NpbmNlX2xh
c3RfbWFqb3JfZGVyb2eUaFpLAGgOiGVdlCiMC3BvbGljeV9jb2RllGhqSwCMATGUiGVdlCiMEGFw
cGxpY2F0aW9uX3R5cGWUaGpLAIwKSU5ESVZJRFVBTJSJZV2UKIwQYW5udWFsX2luY19qb2ludJRo
WksAaA6IZV2UKIwJZHRpX2pvaW50lGhaSwBoDohlXZQojBl2ZXJpZmljYXRpb25fc3RhdHVzX2pv
aW50lGhaSwBoDohlXZQojA5hY2Nfbm93X2RlbGlucZRoaksAjAMwLjCUiGVdlCiMDHRvdF9jb2xs
X2FtdJRoWksAaA6IZV2UKIwLdG90X2N1cl9iYWyUaFpLAGgOiGVdlCiMC29wZW5fYWNjXzZtlGha
SwBoDohlXZQojApvcGVuX2lsXzZtlGhaSwBoDohlXZQojAtvcGVuX2lsXzEybZRoWksAaA6IZV2U
KIwLb3Blbl9pbF8yNG2UaFpLAGgOiGVdlCiMEm10aHNfc2luY2VfcmNudF9pbJRoWksAaA6IZV2U
KIwMdG90YWxfYmFsX2lslGhaSwBoDohlXZQojAdpbF91dGlslGhaSwBoDohlXZQojAtvcGVuX3J2
XzEybZRoWksAaA6IZV2UKIwLb3Blbl9ydl8yNG2UaFpLAGgOiGVdlCiMCm1heF9iYWxfYmOUaFpL
AGgOiGVdlCiMCGFsbF91dGlslGhaSwBoDohlXZQojBB0b3RhbF9yZXZfaGlfbGltlGhaSwBoDohl
XZQojAZpbnFfZmmUaFpLAGgOiGVdlCiMC3RvdGFsX2N1X3RslGhaSwBoDohlXZQojAxpbnFfbGFz
dF8xMm2UaFpLAGgOiGVdlCiMDmVtcF9sZW5ndGhfaW50lGhaSwBoDohlXZQojBVlYXJsaWVzdF9j
cl9saW5lX2RhdGWUaFiMDFRpbWVWYXJpYWJsZZSTlEsAaA6IZV2UKIwbbXRoc19zaW5jZV9lYXJs
aWVzdF9jcl9saW5llGhaSwBoDohlXZQojAh0ZXJtX2ludJRoWksAaA6IZV2UKIwMaXNzdWVfZF9k
YXRllGj/SwBoDohlXZQojBJtdGhzX3NpbmNlX2lzc3VlX2SUaFpLAGgOiGVdlCiMCGdvb2RfYmFk
lGhqSwGMBDAsIDGUiGVdlCiMCWVtcF90aXRsZZRoWIwOU3RyaW5nVmFyaWFibGWUk5RLAmgOiWVd
lCiMA3VybJRqDgEAAEsCaA6JZV2UKIwEZGVzY5RqDgEAAEsCaA6JZV2UKIwFdGl0bGWUag4BAABL
AmgOiWVdlCiMCHppcF9jb2RllGoOAQAASwJoDollXZQojBBlYXJsaWVzdF9jcl9saW5llGoOAQAA
SwJoDollZXNoSEsBdYwKYXR0cmlidXRlc5QoaFdLAoaUaFxLAoaUaF5LAoaUaGBLAoaUaGJLAoaU
aGRLAoaUaGZLAoaUaGhdlCiMCTM2IG1vbnRoc5SMCTYwIG1vbnRoc5RlhpRobUsChpRob0sChpRo
cV2UKIwBQZSMAUKUjAFDlIwBRJSMAUWUjAFGlIwBR5RlhpRodF2UKIwCQTGUjAJBMpSMAkEzlIwC
QTSUjAJBNZSMAkIxlIwCQjKUjAJCM5SMAkI0lIwCQjWUjAJDMZSMAkMylIwCQzOUjAJDNJSMAkM1
lIwCRDGUjAJEMpSMAkQzlIwCRDSUjAJENZSMAkUxlIwCRTKUjAJFM5SMAkU0lIwCRTWUjAJGMZSM
AkYylIwCRjOUjAJGNJSMAkY1lIwCRzGUjAJHMpSMAkczlIwCRzSUjAJHNZRlhpRod12UKIwGMSB5
ZWFylIwHMiB5ZWFyc5SMBzMgeWVhcnOUjAc0IHllYXJzlIwHNSB5ZWFyc5SMBzYgeWVhcnOUjAc3
IHllYXJzlIwHOCB5ZWFyc5SMBzkgeWVhcnOUjAkxMCsgeWVhcnOUjAg8IDEgeWVhcpRlhpRoel2U
KIwITU9SVEdBR0WUjAVPVEhFUpSMA09XTpSMBFJFTlSUZYaUaH1LAoaUaH9dlCiMDE5vdCBWZXJp
ZmllZJSMD1NvdXJjZSBWZXJpZmllZJSMCFZlcmlmaWVklGWGlGiCXZQojAZBcHItMTGUjAZBdWct
MTCUjAZBdWctMTGUjAZEZWMtMTCUjAZEZWMtMTGUjAZGZWItMTGUjAZKYW4tMTGUjAZKdWwtMTCU
jAZKdWwtMTGUjAZKdW4tMTCUjAZKdW4tMTGUjAZNYXItMTGUjAZNYXktMTCUjAZNYXktMTGUjAZO
b3YtMTCUjAZOb3YtMTGUjAZPY3QtMTCUjAZPY3QtMTGUjAZTZXAtMTCUjAZTZXAtMTGUZYaUaIVd
lCiMC0NoYXJnZWQgT2ZmlIwHQ3VycmVudJSMB0RlZmF1bHSUjApGdWxseSBQYWlklIwPSW4gR3Jh
Y2UgUGVyaW9klIwRTGF0ZSAoMTYtMzAgZGF5cymUjBJMYXRlICgzMS0xMjAgZGF5cymUZYaUaIhd
lCiMAW6UjAF5lGWGlGiLXZQojANjYXKUjAtjcmVkaXRfY2FyZJSMEmRlYnRfY29uc29saWRhdGlv
bpSMC2VkdWNhdGlvbmFslIwQaG9tZV9pbXByb3ZlbWVudJSMBWhvdXNllIwObWFqb3JfcHVyY2hh
c2WUjAdtZWRpY2FslIwGbW92aW5nlIwFb3RoZXKUjBByZW5ld2FibGVfZW5lcmd5lIwOc21hbGxf
YnVzaW5lc3OUjAh2YWNhdGlvbpSMB3dlZGRpbmeUZYaUaI5dlCiMAkFLlIwCQUyUjAJBUpSMAkFa
lIwCQ0GUjAJDT5SMAkNUlIwCREOUjAJERZSMAkZMlIwCR0GUjAJISZSMAklBlIwCSUyUjAJLU5SM
AktZlIwCTEGUjAJNQZSMAk1ElIwCTUmUjAJNTpSMAk1PlIwCTVOUjAJNVJSMAk5DlIwCTkiUjAJO
SpSMAk5NlIwCTlaUjAJOWZSMAk9IlIwCT0uUjAJPUpSMAlBBlIwCUkmUjAJTQ5SMAlNElIwCVE6U
jAJUWJSMAlVUlIwCVkGUjAJWVJSMAldBlIwCV0mUjAJXVpSMAldZlGWGlGiRSwKGlGiTSwKGlGiV
SwKGlGiXSwKGlGiZSwKGlGibSwKGlGidSwKGlGifSwKGlGihSwKGlGijSwKGlGilXZRopmGGlGio
SwKGlGiqSwKGlGisSwKGlGiuSwKGlGiwSwKGlGiySwKGlGi0SwKGlGi2SwKGlGi4SwKGlGi6XZQo
jAZBcHItMTGUjAZBcHItMTKUjAZBcHItMTOUjAZBcHItMTSUjAZBcHItMTWUjAZBdWctMTCUjAZB
dWctMTGUjAZBdWctMTKUjAZBdWctMTOUjAZBdWctMTSUjAZBdWctMTWUjAZEZWMtMTCUjAZEZWMt
MTGUjAZEZWMtMTKUjAZEZWMtMTOUjAZEZWMtMTSUjAZEZWMtMTWUjAZGZWItMTGUjAZGZWItMTKU
jAZGZWItMTOUjAZGZWItMTSUjAZGZWItMTWUjAZKYW4tMTGUjAZKYW4tMTKUjAZKYW4tMTOUjAZK
YW4tMTSUjAZKYW4tMTWUjAZKYW4tMTaUjAZKdWwtMTCUjAZKdWwtMTGUjAZKdWwtMTKUjAZKdWwt
MTOUjAZKdWwtMTSUjAZKdWwtMTWUjAZKdW4tMTGUjAZKdW4tMTKUjAZKdW4tMTOUjAZKdW4tMTSU
jAZKdW4tMTWUjAZNYXItMTGUjAZNYXItMTKUjAZNYXItMTOUjAZNYXItMTSUjAZNYXItMTWUjAZN
YXktMTGUjAZNYXktMTKUjAZNYXktMTOUjAZNYXktMTSUjAZNYXktMTWUjAZOb3YtMTCUjAZOb3Yt
MTGUjAZOb3YtMTKUjAZOb3YtMTOUjAZOb3YtMTSUjAZOb3YtMTWUjAZPY3QtMTCUjAZPY3QtMTGU
jAZPY3QtMTKUjAZPY3QtMTOUjAZPY3QtMTSUjAZPY3QtMTWUjAZTZXAtMTCUjAZTZXAtMTGUjAZT
ZXAtMTKUjAZTZXAtMTOUjAZTZXAtMTSUjAZTZXAtMTWUZYaUaL1LAoaUaL9dlCiMBkZlYi0xNpSM
Bkphbi0xNpRlhpRowl2UKIwGQXByLTExlIwGQXByLTEylIwGQXByLTEzlIwGQXByLTE0lIwGQXBy
LTE1lIwGQXVnLTEwlIwGQXVnLTExlIwGQXVnLTEylIwGQXVnLTEzlIwGQXVnLTE0lIwGQXVnLTE1
lIwGRGVjLTEwlIwGRGVjLTExlIwGRGVjLTEylIwGRGVjLTEzlIwGRGVjLTE0lIwGRGVjLTE1lIwG
RmViLTExlIwGRmViLTEylIwGRmViLTEzlIwGRmViLTE0lIwGRmViLTE1lIwGSmFuLTExlIwGSmFu
LTEylIwGSmFuLTEzlIwGSmFuLTE0lIwGSmFuLTE1lIwGSmFuLTE2lIwGSnVsLTEwlIwGSnVsLTEx
lIwGSnVsLTEylIwGSnVsLTEzlIwGSnVsLTE0lIwGSnVsLTE1lIwGSnVuLTEwlIwGSnVuLTExlIwG
SnVuLTEylIwGSnVuLTEzlIwGSnVuLTE0lIwGSnVuLTE1lIwGTWFyLTExlIwGTWFyLTEylIwGTWFy
LTEzlIwGTWFyLTE0lIwGTWFyLTE1lIwGTWF5LTExlIwGTWF5LTEylIwGTWF5LTEzlIwGTWF5LTE0
lIwGTWF5LTE1lIwGTm92LTEwlIwGTm92LTExlIwGTm92LTEylIwGTm92LTEzlIwGTm92LTE0lIwG
Tm92LTE1lIwGT2N0LTEwlIwGT2N0LTExlIwGT2N0LTEylIwGT2N0LTEzlIwGT2N0LTE0lIwGT2N0
LTE1lIwGU2VwLTEwlIwGU2VwLTExlIwGU2VwLTEylIwGU2VwLTEzlIwGU2VwLTE0lIwGU2VwLTE1
lGWGlGjFXZRoxmGGlGjISwKGlGjKXZRoy2GGlGjNXZRozmGGlGjQSwKGlGjSSwKGlGjUSwKGlGjW
XZRo12GGlGjZSwKGlGjbSwKGlGjdSwKGlGjfSwKGlGjhSwKGlGjjSwKGlGjlSwKGlGjnSwKGlGjp
SwKGlGjrSwKGlGjtSwKGlGjvSwKGlGjxSwKGlGjzSwKGlGj1SwKGlGj3SwKGlGj5SwKGlGj7SwKG
lGj9SwSGlGoBAQAASwKGlGoDAQAASwKGlGoFAQAASwSGlGoHAQAASwKGlGoJAQAAXZQojAEwlGjL
ZYaUdJSMBW1ldGFzlChqDAEAAEsDhpRqEAEAAEsDhpRqEgEAAEsDhpRqFAEAAEsDhpRqFgEAAEsD
hpRqGAEAAEsDhpR0lIwKY2xhc3NfdmFyc5QpjBJtb2RpZmllZF92YXJpYWJsZXOUXZR1YmhNKYGU
fZQoaFB9lCiMCXZhcmlhYmxlc5RdlIwNZG9tYWluX2VkaXRvcpR9lGqrAgAAXZQoXZQojAlGZWF0
dXJlIDGUaFpLAGgOiGVdlCiMCWxvYW5fYW1udJRoWksAaA6IZV2UKIwLZnVuZGVkX2FtbnSUaFpL
AGgOiGVdlCiMBHRlcm2UaGpLAIwUMzYgbW9udGhzLCA2MCBtb250aHOUiWVdlCiMCGludF9yYXRl
lGhaSwBoDohlXZQojAtpbnN0YWxsbWVudJRoWksAaA6IZV2UKIwFZ3JhZGWUaGpLAIwTQSwgQiwg
QywgRCwgRSwgRiwgR5SJZV2UKIwJc3ViX2dyYWRllGhqSwCMU0ExLCBBMiwgQTMsIEE0LCBBNSwg
QjEsIEIyLCBCMywgQjQsIEI1LCBDMSwgQzIsIEMzLCBDNCwgQzUsIEQxLCBEMiwgRDMsIEQ0LCBE
NSwgLi4ulIllXZQojAplbXBfbGVuZ3RolGhqSwCMYzEgeWVhciwgMiB5ZWFycywgMyB5ZWFycywg
NCB5ZWFycywgNSB5ZWFycywgNiB5ZWFycywgNyB5ZWFycywgOCB5ZWFycywgOSB5ZWFycywgMTAr
IHllYXJzLCA8IDEgeWVhcpSJZV2UKIwOaG9tZV9vd25lcnNoaXCUaGpLAIwTTU9SVEdBR0UsIE9X
TiwgUkVOVJSJZV2UKIwKYW5udWFsX2luY5RoWksAaA6IZV2UKIwTdmVyaWZpY2F0aW9uX3N0YXR1
c5RoaksAjCdOb3QgVmVyaWZpZWQsIFNvdXJjZSBWZXJpZmllZCwgVmVyaWZpZWSUiWVdlCiMB2lz
c3VlX2SUaGpLAIwWRGVjLTExLCBOb3YtMTEsIE9jdC0xMZSJZV2UKIwLbG9hbl9zdGF0dXOUaGpL
AIxhQ2hhcmdlZCBPZmYsIEN1cnJlbnQsIERlZmF1bHQsIEZ1bGx5IFBhaWQsIEluIEdyYWNlIFBl
cmlvZCwgTGF0ZSAoMTYtMzAgZGF5cyksIExhdGUgKDMxLTEyMCBkYXlzKZSJZV2UKIwHcHVycG9z
ZZRoaksAjJpjYXIsIGNyZWRpdF9jYXJkLCBkZWJ0X2NvbnNvbGlkYXRpb24sIGhvbWVfaW1wcm92
ZW1lbnQsIGhvdXNlLCBtYWpvcl9wdXJjaGFzZSwgbWVkaWNhbCwgbW92aW5nLCBvdGhlciwgcmVu
ZXdhYmxlX2VuZXJneSwgc21hbGxfYnVzaW5lc3MsIHZhY2F0aW9uLCB3ZWRkaW5nlIllXZQojAph
ZGRyX3N0YXRllGhqSwCMU0FLLCBBTCwgQVIsIEFaLCBDQSwgQ08sIENULCBEQywgREUsIEZMLCBH
QSwgSEksIElMLCBLUywgS1ksIExBLCBNQSwgTUQsIE1JLCBNTiwgLi4ulIllXZQojANkdGmUaFpL
AGgOiGVdlCiMC2RlbGlucV8yeXJzlGhaSwBoDohlXZQojA5pbnFfbGFzdF82bXRoc5RoWksAaA6I
ZV2UKIwWbXRoc19zaW5jZV9sYXN0X2RlbGlucZRoWksAaA6IZV2UKIwWbXRoc19zaW5jZV9sYXN0
X3JlY29yZJRoWksAaA6IZV2UKIwIb3Blbl9hY2OUaFpLAGgOiGVdlCiMB3B1Yl9yZWOUaFpLAGgO
iGVdlCiMCXJldm9sX2JhbJRoWksAaA6IZV2UKIwKcmV2b2xfdXRpbJRoWksAaA6IZV2UKIwJdG90
YWxfYWNjlGhaSwBoDohlXZQojBNpbml0aWFsX2xpc3Rfc3RhdHVzlGhqSwBopollXZQojAlvdXRf
cHJuY3CUaFpLAGgOiGVdlCiMC3RvdGFsX3B5bW50lGhaSwBoDohlXZQojA90b3RhbF9yZWNfcHJu
Y3CUaFpLAGgOiGVdlCiMDXRvdGFsX3JlY19pbnSUaFpLAGgOiGVdlCiMEnRvdGFsX3JlY19sYXRl
X2ZlZZRoWksAaA6IZV2UKIwKcmVjb3Zlcmllc5RoWksAaA6IZV2UKIwXY29sbGVjdGlvbl9yZWNv
dmVyeV9mZWWUaFpLAGgOiGVdlCiMDGxhc3RfcHltbnRfZJRoaksAjKNBcHItMTIsIEFwci0xMywg
QXByLTE0LCBBcHItMTUsIEF1Zy0xMiwgQXVnLTEzLCBBdWctMTQsIEF1Zy0xNSwgRGVjLTExLCBE
ZWMtMTIsIERlYy0xMywgRGVjLTE0LCBEZWMtMTUsIEZlYi0xMiwgRmViLTEzLCBGZWItMTQsIEZl
Yi0xNSwgSmFuLTEyLCBKYW4tMTMsIEphbi0xNCwgLi4ulIllXZQojA9sYXN0X3B5bW50X2FtbnSU
aFpLAGgOiGVdlCiMGmNvbGxlY3Rpb25zXzEyX210aHNfZXhfbWVklGhqSwCMAzAuMJSIZV2UKIwb
bXRoc19zaW5jZV9sYXN0X21ham9yX2Rlcm9nlGhaSwBoDohlXZQojBBhbm51YWxfaW5jX2pvaW50
lGhaSwBoDohlXZQojAlkdGlfam9pbnSUaFpLAGgOiGVdlCiMGXZlcmlmaWNhdGlvbl9zdGF0dXNf
am9pbnSUaFpLAGgOiGVdlCiMDmFjY19ub3dfZGVsaW5xlGhqSwCMAzAuMJSIZV2UKIwMdG90X2Nv
bGxfYW10lGhaSwBoDohlXZQojAt0b3RfY3VyX2JhbJRoWksAaA6IZV2UKIwLb3Blbl9hY2NfNm2U
aFpLAGgOiGVdlCiMCm9wZW5faWxfNm2UaFpLAGgOiGVdlCiMC29wZW5faWxfMTJtlGhaSwBoDohl
XZQojAtvcGVuX2lsXzI0bZRoWksAaA6IZV2UKIwSbXRoc19zaW5jZV9yY250X2lslGhaSwBoDohl
XZQojAx0b3RhbF9iYWxfaWyUaFpLAGgOiGVdlCiMB2lsX3V0aWyUaFpLAGgOiGVdlCiMC29wZW5f
cnZfMTJtlGhaSwBoDohlXZQojAtvcGVuX3J2XzI0bZRoWksAaA6IZV2UKIwKbWF4X2JhbF9iY5Ro
WksAaA6IZV2UKIwIYWxsX3V0aWyUaFpLAGgOiGVdlCiMEHRvdGFsX3Jldl9oaV9saW2UaFpLAGgO
iGVdlCiMBmlucV9maZRoWksAaA6IZV2UKIwLdG90YWxfY3VfdGyUaFpLAGgOiGVdlCiMDGlucV9s
YXN0XzEybZRoWksAaA6IZV2UKIwIZ29vZF9iYWSUaGpLAYwEMCwgMZSIZV2UKIwOZW1wX2xlbmd0
aF9pbnSUaFpLAGgOiGVdlCiMFWVhcmxpZXN0X2NyX2xpbmVfZGF0ZZRo/0sAaA6IZV2UKIwbbXRo
c19zaW5jZV9lYXJsaWVzdF9jcl9saW5llGhaSwBoDohlXZQojAh0ZXJtX2ludJRoWksAaA6IZV2U
KIwMaXNzdWVfZF9kYXRllGj/SwBoDohlXZQojBJtdGhzX3NpbmNlX2lzc3VlX2SUaFpLAGgOiGVd
lCiMBGRlc2OUag4BAABLAmgOiWVdlCiMEGVhcmxpZXN0X2NyX2xpbmWUag4BAABLAmgOiWVlc2hI
SwF1ahkBAAAoarECAABLAoaUarMCAABLAoaUarUCAABLAoaUarcCAABdlCiMCTM2IG1vbnRoc5SM
CTYwIG1vbnRoc5RlhpRqugIAAEsChpRqvAIAAEsChpRqvgIAAF2UKGooAQAAaikBAABqKgEAAGor
AQAAaiwBAABqLQEAAGouAQAAZYaUasECAABdlCiMAkExlIwCQTKUjAJBM5SMAkE0lIwCQTWUjAJC
MZSMAkIylIwCQjOUjAJCNJSMAkI1lIwCQzGUjAJDMpSMAkMzlIwCQzSUjAJDNZSMAkQxlIwCRDKU
jAJEM5SMAkQ0lIwCRDWUjAJFMZSMAkUylIwCRTOUjAJFNJSMAkU1lIwCRjGUjAJGMpSMAkYzlIwC
RjSUjAJGNZSMAkcxlIwCRzKUjAJHM5SMAkc0lIwCRzWUZYaUasQCAABdlCiMBjEgeWVhcpSMBzIg
eWVhcnOUjAczIHllYXJzlIwHNCB5ZWFyc5SMBzUgeWVhcnOUjAc2IHllYXJzlIwHNyB5ZWFyc5SM
BzggeWVhcnOUjAc5IHllYXJzlIwJMTArIHllYXJzlIwIPCAxIHllYXKUZYaUascCAABdlCiMCE1P
UlRHQUdFlIwDT1dOlIwEUkVOVJRlhpRqygIAAEsChpRqzAIAAF2UKIwMTm90IFZlcmlmaWVklIwP
U291cmNlIFZlcmlmaWVklIwIVmVyaWZpZWSUZYaUas8CAABdlCiMBkRlYy0xMZSMBk5vdi0xMZSM
Bk9jdC0xMZRlhpRq0gIAAF2UKIwLQ2hhcmdlZCBPZmaUjAdDdXJyZW50lIwHRGVmYXVsdJSMCkZ1
bGx5IFBhaWSUjA9JbiBHcmFjZSBQZXJpb2SUjBFMYXRlICgxNi0zMCBkYXlzKZSMEkxhdGUgKDMx
LTEyMCBkYXlzKZRlhpRq1QIAAF2UKIwDY2FylIwLY3JlZGl0X2NhcmSUjBJkZWJ0X2NvbnNvbGlk
YXRpb26UjBBob21lX2ltcHJvdmVtZW50lIwFaG91c2WUjA5tYWpvcl9wdXJjaGFzZZSMB21lZGlj
YWyUjAZtb3ZpbmeUjAVvdGhlcpSMEHJlbmV3YWJsZV9lbmVyZ3mUjA5zbWFsbF9idXNpbmVzc5SM
CHZhY2F0aW9ulIwHd2VkZGluZ5RlhpRq2AIAAF2UKIwCQUuUjAJBTJSMAkFSlIwCQVqUjAJDQZSM
AkNPlIwCQ1SUjAJEQ5SMAkRFlIwCRkyUjAJHQZSMAkhJlIwCSUyUjAJLU5SMAktZlIwCTEGUjAJN
QZSMAk1ElIwCTUmUjAJNTpSMAk1PlIwCTVOUjAJNVJSMAk5DlIwCTkiUjAJOSpSMAk5NlIwCTlaU
jAJOWZSMAk9IlIwCT0uUjAJPUpSMAlBBlIwCUkmUjAJTQ5SMAlNElIwCVE6UjAJUWJSMAlVUlIwC
VkGUjAJWVJSMAldBlIwCV0mUjAJXVpSMAldZlGWGlGrbAgAASwKGlGrdAgAASwKGlGrfAgAASwKG
lGrhAgAASwKGlGrjAgAASwKGlGrlAgAASwKGlGrnAgAASwKGlGrpAgAASwKGlGrrAgAASwKGlGrt
AgAASwKGlGrvAgAAXZRopmGGlGrxAgAASwKGlGrzAgAASwKGlGr1AgAASwKGlGr3AgAASwKGlGr5
AgAASwKGlGr7AgAASwKGlGr9AgAASwKGlGr/AgAAXZQojAZBcHItMTKUjAZBcHItMTOUjAZBcHIt
MTSUjAZBcHItMTWUjAZBdWctMTKUjAZBdWctMTOUjAZBdWctMTSUjAZBdWctMTWUjAZEZWMtMTGU
jAZEZWMtMTKUjAZEZWMtMTOUjAZEZWMtMTSUjAZEZWMtMTWUjAZGZWItMTKUjAZGZWItMTOUjAZG
ZWItMTSUjAZGZWItMTWUjAZKYW4tMTKUjAZKYW4tMTOUjAZKYW4tMTSUjAZKYW4tMTWUjAZKYW4t
MTaUjAZKdWwtMTKUjAZKdWwtMTOUjAZKdWwtMTSUjAZKdWwtMTWUjAZKdW4tMTKUjAZKdW4tMTOU
jAZKdW4tMTSUjAZKdW4tMTWUjAZNYXItMTKUjAZNYXItMTOUjAZNYXItMTSUjAZNYXItMTWUjAZN
YXktMTKUjAZNYXktMTOUjAZNYXktMTSUjAZNYXktMTWUjAZOb3YtMTGUjAZOb3YtMTKUjAZOb3Yt
MTOUjAZOb3YtMTSUjAZOb3YtMTWUjAZPY3QtMTKUjAZPY3QtMTOUjAZPY3QtMTSUjAZPY3QtMTWU
jAZTZXAtMTKUjAZTZXAtMTOUjAZTZXAtMTSUjAZTZXAtMTWUZYaUagIDAABLAoaUagQDAABdlGoF
AwAAYYaUagcDAABLAoaUagkDAABLAoaUagsDAABLAoaUag0DAABLAoaUag8DAABdlGoQAwAAYYaU
ahIDAABLAoaUahQDAABLAoaUahYDAABLAoaUahgDAABLAoaUahoDAABLAoaUahwDAABLAoaUah4D
AABLAoaUaiADAABLAoaUaiIDAABLAoaUaiQDAABLAoaUaiYDAABLAoaUaigDAABLAoaUaioDAABL
AoaUaiwDAABLAoaUai4DAABLAoaUajADAABLAoaUajIDAABLAoaUajQDAABdlChqmgIAAGjLZYaU
ajcDAABLAoaUajkDAABLBIaUajsDAABLAoaUaj0DAABLAoaUaj8DAABLBIaUakEDAABLAoaUdJRq
nQIAAGpDAwAASwOGlGpFAwAASwOGlIaUaqUCAAApaqYCAABdlHViaE0pgZR9lChoUH2UKIwJdmFy
aWFibGVzlF2UjA1kb21haW5fZWRpdG9ylH2UakwEAABdlChdlCiMCWxvYW5fYW1udJRoWksAaA6I
ZV2UKIwLZnVuZGVkX2FtbnSUaFpLAGgOiGVdlCiMBHRlcm2UaGpLAIwUMzYgbW9udGhzLCA2MCBt
b250aHOUiWVdlCiMCGludF9yYXRllGhaSwBoDohlXZQojAtpbnN0YWxsbWVudJRoWksAaA6IZV2U
KIwFZ3JhZGWUaGpLAIwTQSwgQiwgQywgRCwgRSwgRiwgR5SJZV2UKIwJc3ViX2dyYWRllGhqSwCM
U0ExLCBBMiwgQTMsIEE0LCBBNSwgQjEsIEIyLCBCMywgQjQsIEI1LCBDMSwgQzIsIEMzLCBDNCwg
QzUsIEQxLCBEMiwgRDMsIEQ0LCBENSwgLi4ulIllXZQojAplbXBfbGVuZ3RolGhqSwCMYzEgeWVh
ciwgMiB5ZWFycywgMyB5ZWFycywgNCB5ZWFycywgNSB5ZWFycywgNiB5ZWFycywgNyB5ZWFycywg
OCB5ZWFycywgOSB5ZWFycywgMTArIHllYXJzLCA8IDEgeWVhcpSJZV2UKIwOaG9tZV9vd25lcnNo
aXCUaGpLAIwTTU9SVEdBR0UsIE9XTiwgUkVOVJSJZV2UKIwKYW5udWFsX2luY5RoWksAaA6IZV2U
KIwTdmVyaWZpY2F0aW9uX3N0YXR1c5RoaksAjCdOb3QgVmVyaWZpZWQsIFNvdXJjZSBWZXJpZmll
ZCwgVmVyaWZpZWSUiWVdlCiMB2lzc3VlX2SUaGpLAIwWRGVjLTExLCBOb3YtMTEsIE9jdC0xMZSJ
ZV2UKIwLbG9hbl9zdGF0dXOUaGpLAIxhQ2hhcmdlZCBPZmYsIEN1cnJlbnQsIERlZmF1bHQsIEZ1
bGx5IFBhaWQsIEluIEdyYWNlIFBlcmlvZCwgTGF0ZSAoMTYtMzAgZGF5cyksIExhdGUgKDMxLTEy
MCBkYXlzKZSJZV2UKIwHcHVycG9zZZRoaksAjJpjYXIsIGNyZWRpdF9jYXJkLCBkZWJ0X2NvbnNv
bGlkYXRpb24sIGhvbWVfaW1wcm92ZW1lbnQsIGhvdXNlLCBtYWpvcl9wdXJjaGFzZSwgbWVkaWNh
bCwgbW92aW5nLCBvdGhlciwgcmVuZXdhYmxlX2VuZXJneSwgc21hbGxfYnVzaW5lc3MsIHZhY2F0
aW9uLCB3ZWRkaW5nlIllXZQojAphZGRyX3N0YXRllGhqSwCMU0FLLCBBTCwgQVIsIEFaLCBDQSwg
Q08sIENULCBEQywgREUsIEZMLCBHQSwgSEksIElMLCBLUywgS1ksIExBLCBNQSwgTUQsIE1JLCBN
TiwgLi4ulIllXZQojANkdGmUaFpLAGgOiGVdlCiMC2RlbGlucV8yeXJzlGhaSwBoDohlXZQojA5p
bnFfbGFzdF82bXRoc5RoWksAaA6IZV2UKIwWbXRoc19zaW5jZV9sYXN0X2RlbGlucZRoWksAaA6I
ZV2UKIwWbXRoc19zaW5jZV9sYXN0X3JlY29yZJRoWksAaA6IZV2UKIwIb3Blbl9hY2OUaFpLAGgO
iGVdlCiMB3B1Yl9yZWOUaFpLAGgOiGVdlCiMCXJldm9sX2JhbJRoWksAaA6IZV2UKIwKcmV2b2xf
dXRpbJRoWksAaA6IZV2UKIwJdG90YWxfYWNjlGhaSwBoDohlXZQojBNpbml0aWFsX2xpc3Rfc3Rh
dHVzlGhqSwBopollXZQojAlvdXRfcHJuY3CUaFpLAGgOiGVdlCiMC3RvdGFsX3B5bW50lGhaSwBo
DohlXZQojA90b3RhbF9yZWNfcHJuY3CUaFpLAGgOiGVdlCiMDXRvdGFsX3JlY19pbnSUaFpLAGgO
iGVdlCiMEnRvdGFsX3JlY19sYXRlX2ZlZZRoWksAaA6IZV2UKIwKcmVjb3Zlcmllc5RoWksAaA6I
ZV2UKIwXY29sbGVjdGlvbl9yZWNvdmVyeV9mZWWUaFpLAGgOiGVdlCiMDGxhc3RfcHltbnRfZJRo
aksAjKNBcHItMTIsIEFwci0xMywgQXByLTE0LCBBcHItMTUsIEF1Zy0xMiwgQXVnLTEzLCBBdWct
MTQsIEF1Zy0xNSwgRGVjLTExLCBEZWMtMTIsIERlYy0xMywgRGVjLTE0LCBEZWMtMTUsIEZlYi0x
MiwgRmViLTEzLCBGZWItMTQsIEZlYi0xNSwgSmFuLTEyLCBKYW4tMTMsIEphbi0xNCwgLi4ulIll
XZQojA9sYXN0X3B5bW50X2FtbnSUaFpLAGgOiGVdlCiMGmNvbGxlY3Rpb25zXzEyX210aHNfZXhf
bWVklGhqSwCMAzAuMJSIZV2UKIwbbXRoc19zaW5jZV9sYXN0X21ham9yX2Rlcm9nlGhaSwBoDohl
XZQojBBhbm51YWxfaW5jX2pvaW50lGhaSwBoDohlXZQojAlkdGlfam9pbnSUaFpLAGgOiGVdlCiM
GXZlcmlmaWNhdGlvbl9zdGF0dXNfam9pbnSUaFpLAGgOiGVdlCiMDmFjY19ub3dfZGVsaW5xlGhq
SwCMAzAuMJSIZV2UKIwMdG90X2NvbGxfYW10lGhaSwBoDohlXZQojAt0b3RfY3VyX2JhbJRoWksA
aA6IZV2UKIwLb3Blbl9hY2NfNm2UaFpLAGgOiGVdlCiMCm9wZW5faWxfNm2UaFpLAGgOiGVdlCiM
C29wZW5faWxfMTJtlGhaSwBoDohlXZQojAtvcGVuX2lsXzI0bZRoWksAaA6IZV2UKIwSbXRoc19z
aW5jZV9yY250X2lslGhaSwBoDohlXZQojAx0b3RhbF9iYWxfaWyUaFpLAGgOiGVdlCiMB2lsX3V0
aWyUaFpLAGgOiGVdlCiMC29wZW5fcnZfMTJtlGhaSwBoDohlXZQojAtvcGVuX3J2XzI0bZRoWksA
aA6IZV2UKIwKbWF4X2JhbF9iY5RoWksAaA6IZV2UKIwIYWxsX3V0aWyUaFpLAGgOiGVdlCiMEHRv
dGFsX3Jldl9oaV9saW2UaFpLAGgOiGVdlCiMBmlucV9maZRoWksAaA6IZV2UKIwLdG90YWxfY3Vf
dGyUaFpLAGgOiGVdlCiMDGlucV9sYXN0XzEybZRoWksAaA6IZV2UKIwIZ29vZF9iYWSUaGpLAYwE
MCwgMZSIZV2UKIwEZGVzY5RqDgEAAEsCaA6JZV2UKIwQZWFybGllc3RfY3JfbGluZZRqDgEAAEsC
aA6JZWVzaEhLAXVqGQEAACiMCWxvYW5fYW1udJRLAoaUjAtmdW5kZWRfYW1udJRLAoaUjAR0ZXJt
lF2UKIwJMzYgbW9udGhzlIwJNjAgbW9udGhzlGWGlIwIaW50X3JhdGWUSwKGlIwLaW5zdGFsbG1l
bnSUSwKGlIwFZ3JhZGWUXZQoaigBAABqKQEAAGoqAQAAaisBAABqLAEAAGotAQAAai4BAABlhpSM
CXN1Yl9ncmFkZZRdlCiMAkExlIwCQTKUjAJBM5SMAkE0lIwCQTWUjAJCMZSMAkIylIwCQjOUjAJC
NJSMAkI1lIwCQzGUjAJDMpSMAkMzlIwCQzSUjAJDNZSMAkQxlIwCRDKUjAJEM5SMAkQ0lIwCRDWU
jAJFMZSMAkUylIwCRTOUjAJFNJSMAkU1lIwCRjGUjAJGMpSMAkYzlIwCRjSUjAJGNZSMAkcxlIwC
RzKUjAJHM5SMAkc0lIwCRzWUZYaUjAplbXBfbGVuZ3RolF2UKIwGMSB5ZWFylIwHMiB5ZWFyc5SM
BzMgeWVhcnOUjAc0IHllYXJzlIwHNSB5ZWFyc5SMBzYgeWVhcnOUjAc3IHllYXJzlIwHOCB5ZWFy
c5SMBzkgeWVhcnOUjAkxMCsgeWVhcnOUjAg8IDEgeWVhcpRlhpSMDmhvbWVfb3duZXJzaGlwlF2U
KIwITU9SVEdBR0WUjANPV06UjARSRU5UlGWGlIwKYW5udWFsX2luY5RLAoaUjBN2ZXJpZmljYXRp
b25fc3RhdHVzlF2UKIwMTm90IFZlcmlmaWVklIwPU291cmNlIFZlcmlmaWVklIwIVmVyaWZpZWSU
ZYaUjAdpc3N1ZV9klF2UKIwGRGVjLTExlIwGTm92LTExlIwGT2N0LTExlGWGlIwLbG9hbl9zdGF0
dXOUXZQojAtDaGFyZ2VkIE9mZpSMB0N1cnJlbnSUjAdEZWZhdWx0lIwKRnVsbHkgUGFpZJSMD0lu
IEdyYWNlIFBlcmlvZJSMEUxhdGUgKDE2LTMwIGRheXMplIwSTGF0ZSAoMzEtMTIwIGRheXMplGWG
lIwHcHVycG9zZZRdlCiMA2NhcpSMC2NyZWRpdF9jYXJklIwSZGVidF9jb25zb2xpZGF0aW9ulIwQ
aG9tZV9pbXByb3ZlbWVudJSMBWhvdXNllIwObWFqb3JfcHVyY2hhc2WUjAdtZWRpY2FslIwGbW92
aW5nlIwFb3RoZXKUjBByZW5ld2FibGVfZW5lcmd5lIwOc21hbGxfYnVzaW5lc3OUjAh2YWNhdGlv
bpSMB3dlZGRpbmeUZYaUjAphZGRyX3N0YXRllF2UKIwCQUuUjAJBTJSMAkFSlIwCQVqUjAJDQZSM
AkNPlIwCQ1SUjAJEQ5SMAkRFlIwCRkyUjAJHQZSMAkhJlIwCSUyUjAJLU5SMAktZlIwCTEGUjAJN
QZSMAk1ElIwCTUmUjAJNTpSMAk1PlIwCTVOUjAJNVJSMAk5DlIwCTkiUjAJOSpSMAk5NlIwCTlaU
jAJOWZSMAk9IlIwCT0uUjAJPUpSMAlBBlIwCUkmUjAJTQ5SMAlNElIwCVE6UjAJUWJSMAlVUlIwC
VkGUjAJWVJSMAldBlIwCV0mUjAJXVpSMAldZlGWGlIwDZHRplEsChpSMC2RlbGlucV8yeXJzlEsC
hpSMDmlucV9sYXN0XzZtdGhzlEsChpSMFm10aHNfc2luY2VfbGFzdF9kZWxpbnGUSwKGlIwWbXRo
c19zaW5jZV9sYXN0X3JlY29yZJRLAoaUjAhvcGVuX2FjY5RLAoaUjAdwdWJfcmVjlEsChpSMCXJl
dm9sX2JhbJRLAoaUjApyZXZvbF91dGlslEsChpSMCXRvdGFsX2FjY5RLAoaUjBNpbml0aWFsX2xp
c3Rfc3RhdHVzlF2UaKZhhpSMCW91dF9wcm5jcJRLAoaUjAt0b3RhbF9weW1udJRLAoaUjA90b3Rh
bF9yZWNfcHJuY3CUSwKGlIwNdG90YWxfcmVjX2ludJRLAoaUjBJ0b3RhbF9yZWNfbGF0ZV9mZWWU
SwKGlIwKcmVjb3Zlcmllc5RLAoaUjBdjb2xsZWN0aW9uX3JlY292ZXJ5X2ZlZZRLAoaUjAxsYXN0
X3B5bW50X2SUXZQojAZBcHItMTKUjAZBcHItMTOUjAZBcHItMTSUjAZBcHItMTWUjAZBdWctMTKU
jAZBdWctMTOUjAZBdWctMTSUjAZBdWctMTWUjAZEZWMtMTGUjAZEZWMtMTKUjAZEZWMtMTOUjAZE
ZWMtMTSUjAZEZWMtMTWUjAZGZWItMTKUjAZGZWItMTOUjAZGZWItMTSUjAZGZWItMTWUjAZKYW4t
MTKUjAZKYW4tMTOUjAZKYW4tMTSUjAZKYW4tMTWUjAZKYW4tMTaUjAZKdWwtMTKUjAZKdWwtMTOU
jAZKdWwtMTSUjAZKdWwtMTWUjAZKdW4tMTKUjAZKdW4tMTOUjAZKdW4tMTSUjAZKdW4tMTWUjAZN
YXItMTKUjAZNYXItMTOUjAZNYXItMTSUjAZNYXItMTWUjAZNYXktMTKUjAZNYXktMTOUjAZNYXkt
MTSUjAZNYXktMTWUjAZOb3YtMTGUjAZOb3YtMTKUjAZOb3YtMTOUjAZOb3YtMTSUjAZOb3YtMTWU
jAZPY3QtMTKUjAZPY3QtMTOUjAZPY3QtMTSUjAZPY3QtMTWUjAZTZXAtMTKUjAZTZXAtMTOUjAZT
ZXAtMTSUjAZTZXAtMTWUZYaUjA9sYXN0X3B5bW50X2FtbnSUSwKGlIwaY29sbGVjdGlvbnNfMTJf
bXRoc19leF9tZWSUXZSMAzAuMJRhhpSMG210aHNfc2luY2VfbGFzdF9tYWpvcl9kZXJvZ5RLAoaU
jBBhbm51YWxfaW5jX2pvaW50lEsChpSMCWR0aV9qb2ludJRLAoaUjBl2ZXJpZmljYXRpb25fc3Rh
dHVzX2pvaW50lEsChpSMDmFjY19ub3dfZGVsaW5xlF2UjAMwLjCUYYaUjAx0b3RfY29sbF9hbXSU
SwKGlIwLdG90X2N1cl9iYWyUSwKGlIwLb3Blbl9hY2NfNm2USwKGlIwKb3Blbl9pbF82bZRLAoaU
jAtvcGVuX2lsXzEybZRLAoaUjAtvcGVuX2lsXzI0bZRLAoaUjBJtdGhzX3NpbmNlX3JjbnRfaWyU
SwKGlIwMdG90YWxfYmFsX2lslEsChpSMB2lsX3V0aWyUSwKGlIwLb3Blbl9ydl8xMm2USwKGlIwL
b3Blbl9ydl8yNG2USwKGlIwKbWF4X2JhbF9iY5RLAoaUjAhhbGxfdXRpbJRLAoaUjBB0b3RhbF9y
ZXZfaGlfbGltlEsChpSMBmlucV9maZRLAoaUjAt0b3RhbF9jdV90bJRLAoaUjAxpbnFfbGFzdF8x
Mm2USwKGlIwIZ29vZF9iYWSUXZQoapoCAABoy2WGlHSUap0CAACMBGRlc2OUSwOGlIwQZWFybGll
c3RfY3JfbGluZZRLA4aUhpRqpQIAAClqpgIAAF2UdWJldS4=
</properties>
		<properties node_id="10" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x07\x80\x00\x00\x01\x0e\x00\x00\r\x16\x00\x00\x02\xeb\x00\x00\x07\x80\x00\x00\x01\x0e\x00\x00\r\x16\x00\x00\x02\xeb\x00\x00\x00\x01\x00\x00\x00\x00\x07\x80\x00\x00\x07\x80\x00\x00\x01\x0e\x00\x00\r\x16\x00\x00\x02\xeb', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rows': [], 'columns': []}, 'stored_sort': [], '__version__': 1}</properties>
		<properties node_id="11" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xff\xff\xff\xff\xff\xf9\x00\x00\x05\x00\x00\x00\x02\xa0\xff\xff\xfdW\x00\x00\x00?\x00\x00\x04\xd7\x00\x00\x03\x1f\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x04\xff\x00\x00\x02\x9f', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rows': [], 'columns': []}, 'stored_sort': [('home_ownership', -1)], '__version__': 1}</properties>
		<properties node_id="12" format="pickle">gASVoBsAAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNpZ25v
cmVfbmV3X2ZlYXR1cmVzlImME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAAAAB4AAAAAL
AAALAwAAAq8AAAeAAAAAMAAACwMAAAKvAAAAAQAAAAAHgAAAB4AAAAAwAAALAwAAAq+UjBJ1c2Vf
aW5wdXRfZmVhdHVyZXOUiYwLX192ZXJzaW9uX1+USwGMEGNvbnRleHRfc2V0dGluZ3OUXZQojBVv
cmFuZ2V3aWRnZXQuc2V0dGluZ3OUjAdDb250ZXh0lJOUKYGUfZQojAZ2YWx1ZXOUfZQojBFkb21h
aW5fcm9sZV9oaW50c5R9lCiMC2Z1bmRlZF9hbW50lEsChpSMCWF2YWlsYWJsZZRLAIaUjAtpbnN0
YWxsbWVudJRLAoaUaBVLAYaUjApyZXZvbF91dGlslEsChpRoFUsChpSMAmlklEsChpRoFUsDhpSM
ClVubmFtZWQ6IDCUSwKGlGgVSwSGlIwJRmVhdHVyZSAxlEsChpRoFUsFhpSMCW91dF9wcm5jcJRL
AoaUaBVLBoaUjAt0b3RhbF9weW1udJRLAoaUaBVLB4aUjA90b3RhbF9yZWNfcHJuY3CUSwKGlGgV
SwiGlIwNdG90YWxfcmVjX2ludJRLAoaUaBVLCYaUjBJ0b3RhbF9yZWNfbGF0ZV9mZWWUSwKGlGgV
SwqGlIwWbXRoc19zaW5jZV9sYXN0X3JlY29yZJRLAoaUaBVLC4aUjAllbXBfdGl0bGWUSwOGlGgV
SwyGlIwIemlwX2NvZGWUSwOGlGgVSw2GlIwWbXRoc19zaW5jZV9sYXN0X2RlbGlucZRLAoaUaBVL
DoaUjAV0aXRsZZRLA4aUaBVLD4aUjAN1cmyUSwOGlGgVSxCGlIwKcmVjb3Zlcmllc5RLAoaUaBVL
EYaUjBdjb2xsZWN0aW9uX3JlY292ZXJ5X2ZlZZRLAoaUaBVLEoaUjAxpbnFfbGFzdF8xMm2USwKG
lGgVSxOGlIwPbGFzdF9weW1udF9hbW50lEsChpRoFUsUhpSMGmNvbGxlY3Rpb25zXzEyX210aHNf
ZXhfbWVklEsBhpRoFUsVhpSMCGFsbF91dGlslEsChpRoFUsWhpSMDHRvdF9jb2xsX2FtdJRLAoaU
aBVLF4aUjAt0b3RhbF9jdV90bJRLAoaUaBVLGIaUjAtkZWxpbnFfMnlyc5RLAoaUaBVLGYaUjA5h
Y2Nfbm93X2RlbGlucZRLAYaUaBVLGoaUjAptYXhfYmFsX2JjlEsChpRoFUsbhpSMBmlucV9maZRL
AoaUaBVLHIaUjBB0b3RhbF9yZXZfaGlfbGltlEsChpRoFUsdhpSMC2xvYW5fc3RhdHVzlEsBhpRo
FUsehpSMB3B1Yl9yZWOUSwKGlGgVSx+GlIwbbXRoc19zaW5jZV9sYXN0X21ham9yX2Rlcm9nlEsC
hpRoFUsghpSMEGFubnVhbF9pbmNfam9pbnSUSwKGlGgVSyGGlIwEZGVzY5RLA4aUaBVLIoaUjBBl
YXJsaWVzdF9jcl9saW5llEsDhpRoFUsjhpSMCWR0aV9qb2ludJRLAoaUaBVLJIaUjAx0b3RhbF9i
YWxfaWyUSwKGlGgVSyWGlIwLb3Blbl9ydl8yNG2USwKGlGgVSyaGlIwHaWxfdXRpbJRLAoaUaBVL
J4aUjAtvcGVuX3J2XzEybZRLAoaUaBVLKIaUjBJtdGhzX3NpbmNlX3JjbnRfaWyUSwKGlGgVSymG
lIwZdmVyaWZpY2F0aW9uX3N0YXR1c19qb2ludJRLAoaUaBVLKoaUjAt0b3RfY3VyX2JhbJRLAoaU
aBVLK4aUjAtvcGVuX2FjY182bZRLAoaUaBVLLIaUjAtvcGVuX2lsXzI0bZRLAoaUaBVLLYaUjAtv
cGVuX2lsXzEybZRLAoaUaBVLLoaUjApvcGVuX2lsXzZtlEsChpRoFUsvhpSMCWxvYW5fYW1udJRL
AoaUjAlhdHRyaWJ1dGWUSwCGlIwEdGVybZRLAYaUaKZLAYaUjAltZW1iZXJfaWSUSwKGlGimSwKG
lIwIaW50X3JhdGWUSwKGlGimSwOGlIwFZ3JhZGWUSwGGlGimSwSGlIwJc3ViX2dyYWRllEsBhpRo
pksFhpSMD2Z1bmRlZF9hbW50X2ludpRLAoaUaKZLBoaUjAplbXBfbGVuZ3RolEsBhpRopksHhpSM
DmhvbWVfb3duZXJzaGlwlEsBhpRopksIhpSMCmFubnVhbF9pbmOUSwKGlGimSwmGlIwTdmVyaWZp
Y2F0aW9uX3N0YXR1c5RLAYaUaKZLCoaUjAdpc3N1ZV9klEsBhpRopksLhpSMB3B1cnBvc2WUSwGG
lGimSwyGlIwKYWRkcl9zdGF0ZZRLAYaUaKZLDYaUjANkdGmUSwKGlGimSw6GlIwOaW5xX2xhc3Rf
Nm10aHOUSwKGlGimSw+GlIwIb3Blbl9hY2OUSwKGlGimSxCGlIwJcmV2b2xfYmFslEsChpRopksR
hpSMCXRvdGFsX2FjY5RLAoaUaKZLEoaUjApweW1udF9wbGFulEsBhpRopksThpSME2luaXRpYWxf
bGlzdF9zdGF0dXOUSwGGlGimSxSGlIwMbGFzdF9weW1udF9klEsBhpRopksVhpSMDmVtcF9sZW5n
dGhfaW50lEsChpRopksWhpSMFWVhcmxpZXN0X2NyX2xpbmVfZGF0ZZRLBIaUaKZLF4aUjBttdGhz
X3NpbmNlX2VhcmxpZXN0X2NyX2xpbmWUSwKGlGimSxiGlIwIdGVybV9pbnSUSwKGlGimSxmGlIwM
aXNzdWVfZF9kYXRllEsEhpRopksahpSMEm10aHNfc2luY2VfaXNzdWVfZJRLAoaUaKZLG4aUjA1v
dXRfcHJuY3BfaW52lEsChpRopkschpSMD3RvdGFsX3B5bW50X2ludpRLAoaUaKZLHYaUjAxuZXh0
X3B5bW50X2SUSwGGlGimSx6GlIwSbGFzdF9jcmVkaXRfcHVsbF9klEsBhpRopksfhpSMC3BvbGlj
eV9jb2RllEsBhpRopksghpSMEGFwcGxpY2F0aW9uX3R5cGWUSwGGlGimSyGGlIwIZ29vZF9iYWSU
SwGGlIwFY2xhc3OUSwCGlHVK/v///4aUaAdLAXWMCmF0dHJpYnV0ZXOUfZQojAlGZWF0dXJlIDGU
SwKMClVubmFtZWQ6IDCUSwKMAmlklEsCjAltZW1iZXJfaWSUSwKMCWxvYW5fYW1udJRLAowLZnVu
ZGVkX2FtbnSUSwKMD2Z1bmRlZF9hbW50X2ludpRLAowEdGVybZRLAYwIaW50X3JhdGWUSwKMC2lu
c3RhbGxtZW50lEsCjAVncmFkZZRLAYwJc3ViX2dyYWRllEsBjAplbXBfbGVuZ3RolEsBjA5ob21l
X293bmVyc2hpcJRLAYwKYW5udWFsX2luY5RLAowTdmVyaWZpY2F0aW9uX3N0YXR1c5RLAYwHaXNz
dWVfZJRLAYwLbG9hbl9zdGF0dXOUSwGMCnB5bW50X3BsYW6USwGMB3B1cnBvc2WUSwGMCmFkZHJf
c3RhdGWUSwGMA2R0aZRLAowLZGVsaW5xXzJ5cnOUSwKMDmlucV9sYXN0XzZtdGhzlEsCjBZtdGhz
X3NpbmNlX2xhc3RfZGVsaW5xlEsCjBZtdGhzX3NpbmNlX2xhc3RfcmVjb3JklEsCjAhvcGVuX2Fj
Y5RLAowHcHViX3JlY5RLAowJcmV2b2xfYmFslEsCjApyZXZvbF91dGlslEsCjAl0b3RhbF9hY2OU
SwKME2luaXRpYWxfbGlzdF9zdGF0dXOUSwGMCW91dF9wcm5jcJRLAowNb3V0X3BybmNwX2ludpRL
AowLdG90YWxfcHltbnSUSwKMD3RvdGFsX3B5bW50X2ludpRLAowPdG90YWxfcmVjX3BybmNwlEsC
jA10b3RhbF9yZWNfaW50lEsCjBJ0b3RhbF9yZWNfbGF0ZV9mZWWUSwKMCnJlY292ZXJpZXOUSwKM
F2NvbGxlY3Rpb25fcmVjb3ZlcnlfZmVllEsCjAxsYXN0X3B5bW50X2SUSwGMD2xhc3RfcHltbnRf
YW1udJRLAowMbmV4dF9weW1udF9klEsBjBJsYXN0X2NyZWRpdF9wdWxsX2SUSwGMGmNvbGxlY3Rp
b25zXzEyX210aHNfZXhfbWVklEsBjBttdGhzX3NpbmNlX2xhc3RfbWFqb3JfZGVyb2eUSwKMC3Bv
bGljeV9jb2RllEsBjBBhcHBsaWNhdGlvbl90eXBllEsBjBBhbm51YWxfaW5jX2pvaW50lEsCjAlk
dGlfam9pbnSUSwKMGXZlcmlmaWNhdGlvbl9zdGF0dXNfam9pbnSUSwKMDmFjY19ub3dfZGVsaW5x
lEsBjAx0b3RfY29sbF9hbXSUSwKMC3RvdF9jdXJfYmFslEsCjAtvcGVuX2FjY182bZRLAowKb3Bl
bl9pbF82bZRLAowLb3Blbl9pbF8xMm2USwKMC29wZW5faWxfMjRtlEsCjBJtdGhzX3NpbmNlX3Jj
bnRfaWyUSwKMDHRvdGFsX2JhbF9pbJRLAowHaWxfdXRpbJRLAowLb3Blbl9ydl8xMm2USwKMC29w
ZW5fcnZfMjRtlEsCjAptYXhfYmFsX2JjlEsCjAhhbGxfdXRpbJRLAowQdG90YWxfcmV2X2hpX2xp
bZRLAowGaW5xX2ZplEsCjAt0b3RhbF9jdV90bJRLAowMaW5xX2xhc3RfMTJtlEsCjA5lbXBfbGVu
Z3RoX2ludJRLAowVZWFybGllc3RfY3JfbGluZV9kYXRllEsEjBttdGhzX3NpbmNlX2VhcmxpZXN0
X2NyX2xpbmWUSwKMCHRlcm1faW50lEsCjAxpc3N1ZV9kX2RhdGWUSwSMEm10aHNfc2luY2VfaXNz
dWVfZJRLAowIZ29vZF9iYWSUSwF1jAVtZXRhc5R9lCiMCWVtcF90aXRsZZRLA4wDdXJslEsDjARk
ZXNjlEsDjAV0aXRsZZRLA4wIemlwX2NvZGWUSwOMEGVhcmxpZXN0X2NyX2xpbmWUSwN1dWJoDCmB
lH2UKGgPfZQojBFkb21haW5fcm9sZV9oaW50c5R9lCiMC2Z1bmRlZF9hbW50lEsChpSMCWF2YWls
YWJsZZRLAIaUjAtpbnN0YWxsbWVudJRLAoaUam4BAABLAYaUjApyZXZvbF91dGlslEsChpRqbgEA
AEsChpSMCW91dF9wcm5jcJRLAoaUam4BAABLA4aUjAt0b3RhbF9weW1udJRLAoaUam4BAABLBIaU
jA90b3RhbF9yZWNfcHJuY3CUSwKGlGpuAQAASwWGlIwNdG90YWxfcmVjX2ludJRLAoaUam4BAABL
BoaUjBJ0b3RhbF9yZWNfbGF0ZV9mZWWUSwKGlGpuAQAASweGlIwWbXRoc19zaW5jZV9sYXN0X3Jl
Y29yZJRLAoaUam4BAABLCIaUjBZtdGhzX3NpbmNlX2xhc3RfZGVsaW5xlEsChpRqbgEAAEsJhpSM
CnJlY292ZXJpZXOUSwKGlGpuAQAASwqGlIwXY29sbGVjdGlvbl9yZWNvdmVyeV9mZWWUSwKGlGpu
AQAASwuGlIwMaW5xX2xhc3RfMTJtlEsChpRqbgEAAEsMhpSMD2xhc3RfcHltbnRfYW1udJRLAoaU
am4BAABLDYaUjBpjb2xsZWN0aW9uc18xMl9tdGhzX2V4X21lZJRLAYaUam4BAABLDoaUjAhhbGxf
dXRpbJRLAoaUam4BAABLD4aUjAx0b3RfY29sbF9hbXSUSwKGlGpuAQAASxCGlIwLdG90YWxfY3Vf
dGyUSwKGlGpuAQAASxGGlIwLZGVsaW5xXzJ5cnOUSwKGlGpuAQAASxKGlIwOYWNjX25vd19kZWxp
bnGUSwGGlGpuAQAASxOGlIwKbWF4X2JhbF9iY5RLAoaUam4BAABLFIaUjAZpbnFfZmmUSwKGlGpu
AQAASxWGlIwQdG90YWxfcmV2X2hpX2xpbZRLAoaUam4BAABLFoaUjAtsb2FuX3N0YXR1c5RLAYaU
am4BAABLF4aUjAdwdWJfcmVjlEsChpRqbgEAAEsYhpSMG210aHNfc2luY2VfbGFzdF9tYWpvcl9k
ZXJvZ5RLAoaUam4BAABLGYaUjBBhbm51YWxfaW5jX2pvaW50lEsChpRqbgEAAEsahpSMBGRlc2OU
SwOGlGpuAQAASxuGlIwQZWFybGllc3RfY3JfbGluZZRLA4aUam4BAABLHIaUjAlkdGlfam9pbnSU
SwKGlGpuAQAASx2GlIwMdG90YWxfYmFsX2lslEsChpRqbgEAAEsehpSMC29wZW5fcnZfMjRtlEsC
hpRqbgEAAEsfhpSMB2lsX3V0aWyUSwKGlGpuAQAASyCGlIwLb3Blbl9ydl8xMm2USwKGlGpuAQAA
SyGGlIwSbXRoc19zaW5jZV9yY250X2lslEsChpRqbgEAAEsihpSMGXZlcmlmaWNhdGlvbl9zdGF0
dXNfam9pbnSUSwKGlGpuAQAASyOGlIwLdG90X2N1cl9iYWyUSwKGlGpuAQAASySGlIwLb3Blbl9h
Y2NfNm2USwKGlGpuAQAASyWGlIwLb3Blbl9pbF8yNG2USwKGlGpuAQAASyaGlIwLb3Blbl9pbF8x
Mm2USwKGlGpuAQAASyeGlIwKb3Blbl9pbF82bZRLAoaUam4BAABLKIaUjAlGZWF0dXJlIDGUSwKG
lIwJYXR0cmlidXRllEsAhpSMCWxvYW5fYW1udJRLAoaUauoBAABLAYaUjAR0ZXJtlEsBhpRq6gEA
AEsChpSMCGludF9yYXRllEsChpRq6gEAAEsDhpSMBWdyYWRllEsBhpRq6gEAAEsEhpSMCXN1Yl9n
cmFkZZRLAYaUauoBAABLBYaUjAplbXBfbGVuZ3RolEsBhpRq6gEAAEsGhpSMDmhvbWVfb3duZXJz
aGlwlEsBhpRq6gEAAEsHhpSMCmFubnVhbF9pbmOUSwKGlGrqAQAASwiGlIwTdmVyaWZpY2F0aW9u
X3N0YXR1c5RLAYaUauoBAABLCYaUjAdpc3N1ZV9klEsBhpRq6gEAAEsKhpSMB3B1cnBvc2WUSwGG
lGrqAQAASwuGlIwKYWRkcl9zdGF0ZZRLAYaUauoBAABLDIaUjANkdGmUSwKGlGrqAQAASw2GlIwO
aW5xX2xhc3RfNm10aHOUSwKGlGrqAQAASw6GlIwIb3Blbl9hY2OUSwKGlGrqAQAASw+GlIwJcmV2
b2xfYmFslEsChpRq6gEAAEsQhpSMCXRvdGFsX2FjY5RLAoaUauoBAABLEYaUjBNpbml0aWFsX2xp
c3Rfc3RhdHVzlEsBhpRq6gEAAEsShpSMDGxhc3RfcHltbnRfZJRLAYaUauoBAABLE4aUjA5lbXBf
bGVuZ3RoX2ludJRLAoaUauoBAABLFIaUjBVlYXJsaWVzdF9jcl9saW5lX2RhdGWUSwSGlGrqAQAA
SxWGlIwbbXRoc19zaW5jZV9lYXJsaWVzdF9jcl9saW5llEsChpRq6gEAAEsWhpSMCHRlcm1faW50
lEsChpRq6gEAAEsXhpSMDGlzc3VlX2RfZGF0ZZRLBIaUauoBAABLGIaUjBJtdGhzX3NpbmNlX2lz
c3VlX2SUSwKGlGrqAQAASxmGlIwIZ29vZF9iYWSUSwGGlIwFY2xhc3OUSwCGlHVK/v///4aUaAdL
AXVqEAEAAH2UKIwJRmVhdHVyZSAxlEsCjAlsb2FuX2FtbnSUSwKMC2Z1bmRlZF9hbW50lEsCjAR0
ZXJtlEsBjAhpbnRfcmF0ZZRLAowLaW5zdGFsbG1lbnSUSwKMBWdyYWRllEsBjAlzdWJfZ3JhZGWU
SwGMCmVtcF9sZW5ndGiUSwGMDmhvbWVfb3duZXJzaGlwlEsBjAphbm51YWxfaW5jlEsCjBN2ZXJp
ZmljYXRpb25fc3RhdHVzlEsBjAdpc3N1ZV9klEsBjAtsb2FuX3N0YXR1c5RLAYwHcHVycG9zZZRL
AYwKYWRkcl9zdGF0ZZRLAYwDZHRplEsCjAtkZWxpbnFfMnlyc5RLAowOaW5xX2xhc3RfNm10aHOU
SwKMFm10aHNfc2luY2VfbGFzdF9kZWxpbnGUSwKMFm10aHNfc2luY2VfbGFzdF9yZWNvcmSUSwKM
CG9wZW5fYWNjlEsCjAdwdWJfcmVjlEsCjAlyZXZvbF9iYWyUSwKMCnJldm9sX3V0aWyUSwKMCXRv
dGFsX2FjY5RLAowTaW5pdGlhbF9saXN0X3N0YXR1c5RLAYwJb3V0X3BybmNwlEsCjAt0b3RhbF9w
eW1udJRLAowPdG90YWxfcmVjX3BybmNwlEsCjA10b3RhbF9yZWNfaW50lEsCjBJ0b3RhbF9yZWNf
bGF0ZV9mZWWUSwKMCnJlY292ZXJpZXOUSwKMF2NvbGxlY3Rpb25fcmVjb3ZlcnlfZmVllEsCjAxs
YXN0X3B5bW50X2SUSwGMD2xhc3RfcHltbnRfYW1udJRLAowaY29sbGVjdGlvbnNfMTJfbXRoc19l
eF9tZWSUSwGMG210aHNfc2luY2VfbGFzdF9tYWpvcl9kZXJvZ5RLAowQYW5udWFsX2luY19qb2lu
dJRLAowJZHRpX2pvaW50lEsCjBl2ZXJpZmljYXRpb25fc3RhdHVzX2pvaW50lEsCjA5hY2Nfbm93
X2RlbGlucZRLAYwMdG90X2NvbGxfYW10lEsCjAt0b3RfY3VyX2JhbJRLAowLb3Blbl9hY2NfNm2U
SwKMCm9wZW5faWxfNm2USwKMC29wZW5faWxfMTJtlEsCjAtvcGVuX2lsXzI0bZRLAowSbXRoc19z
aW5jZV9yY250X2lslEsCjAx0b3RhbF9iYWxfaWyUSwKMB2lsX3V0aWyUSwKMC29wZW5fcnZfMTJt
lEsCjAtvcGVuX3J2XzI0bZRLAowKbWF4X2JhbF9iY5RLAowIYWxsX3V0aWyUSwKMEHRvdGFsX3Jl
dl9oaV9saW2USwKMBmlucV9maZRLAowLdG90YWxfY3VfdGyUSwKMDGlucV9sYXN0XzEybZRLAowO
ZW1wX2xlbmd0aF9pbnSUSwKMFWVhcmxpZXN0X2NyX2xpbmVfZGF0ZZRLBIwbbXRoc19zaW5jZV9l
YXJsaWVzdF9jcl9saW5llEsCjAh0ZXJtX2ludJRLAowMaXNzdWVfZF9kYXRllEsEjBJtdGhzX3Np
bmNlX2lzc3VlX2SUSwKMCGdvb2RfYmFklEsBdWpfAQAAfZQojARkZXNjlEsDjBBlYXJsaWVzdF9j
cl9saW5llEsDdXViZXUu
</properties>
		<properties node_id="13" format="pickle">gASViSQAAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNpZ25v
cmVfbmV3X2ZlYXR1cmVzlImME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAP///aUAAADO
////ZgAAAnD///2mAAAA4////2UAAAJvAAAAAQAAAAAHgP///aYAAADj////ZQAAAm+UjBJ1c2Vf
aW5wdXRfZmVhdHVyZXOUiYwLX192ZXJzaW9uX1+USwGMEGNvbnRleHRfc2V0dGluZ3OUXZQojBVv
cmFuZ2V3aWRnZXQuc2V0dGluZ3OUjAdDb250ZXh0lJOUKYGUfZQojAZ2YWx1ZXOUfZQojBFkb21h
aW5fcm9sZV9oaW50c5R9lCiMBHRlcm2USwGGlIwJYXZhaWxhYmxllEsAhpSMBWdyYWRllEsBhpRo
FUsBhpSMCXN1Yl9ncmFkZZRLAYaUaBVLAoaUjAltZW1iZXJfaWSUSwKGlGgVSwOGlIwKZW1wX2xl
bmd0aJRLAYaUaBVLBIaUjA5ob21lX293bmVyc2hpcJRLAYaUaBVLBYaUjBN2ZXJpZmljYXRpb25f
c3RhdHVzlEsBhpRoFUsGhpSMCnB5bW50X3BsYW6USwGGlGgVSweGlIwLcG9saWN5X2NvZGWUSwGG
lGgVSwiGlIwSbGFzdF9jcmVkaXRfcHVsbF9klEsBhpRoFUsJhpSMDG5leHRfcHltbnRfZJRLAYaU
aBVLCoaUjAdpc3N1ZV9klEsBhpRoFUsLhpSMEGFwcGxpY2F0aW9uX3R5cGWUSwGGlGgVSwyGlIwK
YWRkcl9zdGF0ZZRLAYaUaBVLDYaUjAdwdXJwb3NllEsBhpRoFUsOhpSME2luaXRpYWxfbGlzdF9z
dGF0dXOUSwGGlGgVSw+GlIwMbGFzdF9weW1udF9klEsBhpRoFUsQhpSMFWVhcmxpZXN0X2NyX2xp
bmVfZGF0ZZRLBIaUaBVLEYaUjAxpc3N1ZV9kX2RhdGWUSwSGlGgVSxKGlIwJbG9hbl9hbW50lEsC
hpSMCWF0dHJpYnV0ZZRLAIaUjAhpbnRfcmF0ZZRLAoaUaE9LAYaUjAphbm51YWxfaW5jlEsChpRo
T0sChpSMA2R0aZRLAoaUaE9LA4aUjA5pbnFfbGFzdF82bXRoc5RLAoaUaE9LBIaUjAhvcGVuX2Fj
Y5RLAoaUaE9LBYaUjA9mdW5kZWRfYW1udF9pbnaUSwKGlGhPSwaGlIwJcmV2b2xfYmFslEsChpRo
T0sHhpSMCXRvdGFsX2FjY5RLAoaUaE9LCIaUjA5lbXBfbGVuZ3RoX2ludJRLAoaUaE9LCYaUjBtt
dGhzX3NpbmNlX2VhcmxpZXN0X2NyX2xpbmWUSwKGlGhPSwqGlIwIdGVybV9pbnSUSwKGlGhPSwuG
lIwSbXRoc19zaW5jZV9pc3N1ZV9klEsChpRoT0sMhpSMDW91dF9wcm5jcF9pbnaUSwKGlGhPSw2G
lIwPdG90YWxfcHltbnRfaW52lEsChpRoT0sOhpSMCGdvb2RfYmFklEsBhpSMBWNsYXNzlEsAhpR1
Sv7///+GlGgHSwF1jAphdHRyaWJ1dGVzlH2UKIwJbG9hbl9hbW50lEsCjAR0ZXJtlEsBjAltZW1i
ZXJfaWSUSwKMCGludF9yYXRllEsCjAVncmFkZZRLAYwJc3ViX2dyYWRllEsBjA9mdW5kZWRfYW1u
dF9pbnaUSwKMCmVtcF9sZW5ndGiUSwGMDmhvbWVfb3duZXJzaGlwlEsBjAphbm51YWxfaW5jlEsC
jBN2ZXJpZmljYXRpb25fc3RhdHVzlEsBjAdpc3N1ZV9klEsBjAdwdXJwb3NllEsBjAphZGRyX3N0
YXRllEsBjANkdGmUSwKMDmlucV9sYXN0XzZtdGhzlEsCjAhvcGVuX2FjY5RLAowJcmV2b2xfYmFs
lEsCjAl0b3RhbF9hY2OUSwKMCnB5bW50X3BsYW6USwGME2luaXRpYWxfbGlzdF9zdGF0dXOUSwGM
DGxhc3RfcHltbnRfZJRLAYwOZW1wX2xlbmd0aF9pbnSUSwKMFWVhcmxpZXN0X2NyX2xpbmVfZGF0
ZZRLBIwbbXRoc19zaW5jZV9lYXJsaWVzdF9jcl9saW5llEsCjAh0ZXJtX2ludJRLAowMaXNzdWVf
ZF9kYXRllEsEjBJtdGhzX3NpbmNlX2lzc3VlX2SUSwKMDW91dF9wcm5jcF9pbnaUSwKMD3RvdGFs
X3B5bW50X2ludpRLAowMbmV4dF9weW1udF9klEsBjBJsYXN0X2NyZWRpdF9wdWxsX2SUSwGMC3Bv
bGljeV9jb2RllEsBjBBhcHBsaWNhdGlvbl90eXBllEsBjAhnb29kX2JhZJRLAXWMBW1ldGFzlH2U
dWJoDCmBlH2UKGgPfZQojBFkb21haW5fcm9sZV9oaW50c5R9lCiMBHRlcm2USwGGlIwJYXZhaWxh
YmxllEsAhpSMCUZlYXR1cmUgMZRLAoaUaK5LAYaUjAVncmFkZZRLAYaUaK5LAoaUjAlzdWJfZ3Jh
ZGWUSwGGlGiuSwOGlIwKZW1wX2xlbmd0aJRLAYaUaK5LBIaUjA5ob21lX293bmVyc2hpcJRLAYaU
aK5LBYaUjBN2ZXJpZmljYXRpb25fc3RhdHVzlEsBhpRorksGhpSMB2lzc3VlX2SUSwGGlGiuSweG
lIwKYWRkcl9zdGF0ZZRLAYaUaK5LCIaUjAdwdXJwb3NllEsBhpRorksJhpSME2luaXRpYWxfbGlz
dF9zdGF0dXOUSwGGlGiuSwqGlIwMbGFzdF9weW1udF9klEsBhpRorksLhpSMFWVhcmxpZXN0X2Ny
X2xpbmVfZGF0ZZRLBIaUaK5LDIaUjAxpc3N1ZV9kX2RhdGWUSwSGlGiuSw2GlIwJbG9hbl9hbW50
lEsChpSMCWF0dHJpYnV0ZZRLAIaUjAhpbnRfcmF0ZZRLAoaUaNlLAYaUjAphbm51YWxfaW5jlEsC
hpRo2UsChpSMA2R0aZRLAoaUaNlLA4aUjA5pbnFfbGFzdF82bXRoc5RLAoaUaNlLBIaUjAhvcGVu
X2FjY5RLAoaUaNlLBYaUjAlyZXZvbF9iYWyUSwKGlGjZSwaGlIwJdG90YWxfYWNjlEsChpRo2UsH
hpSMDmVtcF9sZW5ndGhfaW50lEsChpRo2UsIhpSMG210aHNfc2luY2VfZWFybGllc3RfY3JfbGlu
ZZRLAoaUaNlLCYaUjAh0ZXJtX2ludJRLAoaUaNlLCoaUjBJtdGhzX3NpbmNlX2lzc3VlX2SUSwKG
lGjZSwuGlIwIZ29vZF9iYWSUSwGGlIwFY2xhc3OUSwCGlHVK/v///4aUaAdLAXVogH2UKIwJRmVh
dHVyZSAxlEsCjAlsb2FuX2FtbnSUSwKMBHRlcm2USwGMCGludF9yYXRllEsCjAVncmFkZZRLAYwJ
c3ViX2dyYWRllEsBjAplbXBfbGVuZ3RolEsBjA5ob21lX293bmVyc2hpcJRLAYwKYW5udWFsX2lu
Y5RLAowTdmVyaWZpY2F0aW9uX3N0YXR1c5RLAYwHaXNzdWVfZJRLAYwHcHVycG9zZZRLAYwKYWRk
cl9zdGF0ZZRLAYwDZHRplEsCjA5pbnFfbGFzdF82bXRoc5RLAowIb3Blbl9hY2OUSwKMCXJldm9s
X2JhbJRLAowJdG90YWxfYWNjlEsCjBNpbml0aWFsX2xpc3Rfc3RhdHVzlEsBjAxsYXN0X3B5bW50
X2SUSwGMDmVtcF9sZW5ndGhfaW50lEsCjBVlYXJsaWVzdF9jcl9saW5lX2RhdGWUSwSMG210aHNf
c2luY2VfZWFybGllc3RfY3JfbGluZZRLAowIdGVybV9pbnSUSwKMDGlzc3VlX2RfZGF0ZZRLBIwS
bXRoc19zaW5jZV9pc3N1ZV9klEsCjAhnb29kX2JhZJRLAXVopX2UdWJoDCmBlH2UKGgPfZQojBFk
b21haW5fcm9sZV9oaW50c5R9lChog0sBhpSMCWF2YWlsYWJsZZRLAIaUaIZLAYaUaiQBAABLAYaU
aIdLAYaUaiQBAABLAoaUaIlLAYaUaiQBAABLA4aUaIpLAYaUaiQBAABLBIaUaIxLAYaUaiQBAABL
BYaUaI1LAYaUaiQBAABLBoaUaI9LAYaUaiQBAABLB4aUaI5LAYaUaiQBAABLCIaUaJZLAYaUaiQB
AABLCYaUaJdLAYaUaiQBAABLCoaUaJlLBIaUaiQBAABLC4aUaJxLBIaUaiQBAABLDIaUaKRLAYaU
aiQBAABLDYaUaIJLAoaUjAlhdHRyaWJ1dGWUSwCGlGiFSwKGlGpBAQAASwGGlGiESwKGlGpBAQAA
SwKGlGiLSwKGlGpBAQAASwOGlGiQSwKGlGpBAQAASwSGlGiRSwKGlGpBAQAASwWGlGiSSwKGlGpB
AQAASwaGlGiISwKGlGpBAQAASweGlGiTSwKGlGpBAQAASwiGlGiUSwKGlGpBAQAASwmGlGiYSwKG
lGpBAQAASwqGlGiaSwKGlGpBAQAASwuGlGibSwKGlGpBAQAASwyGlGidSwKGlGpBAQAASw2GlGiV
SwGGlGpBAQAASw6GlGieSwKGlGpBAQAASw+GlGifSwKGlGpBAQAASxCGlGigSwGGlGpBAQAASxGG
lGihSwGGlGpBAQAASxKGlGiiSwGGlGpBAQAASxOGlGijSwGGlGpBAQAASxSGlIwIemlwX2NvZGWU
SwOGlIwEbWV0YZRLAIaUdUr+////hpRoB0sBdWiAfZQoaIJLAmiDSwFohEsCaIVLAmiGSwFoh0sB
aIhLAmiJSwFoiksBaItLAmiMSwFojUsBaI5LAWiPSwFokEsCaJFLAmiSSwJok0sCaJRLAmiVSwFo
lksBaJdLAWiYSwJomUsEaJpLAmibSwJonEsEaJ1LAmieSwJon0sCaKBLAWihSwFooksBaKNLAWik
SwF1aKV9lGprAQAASwNzdWJoDCmBlH2UKGgPfZQoaiEBAAB9lChog0sBhpRqJAEAAEsAhpRohksB
hpRqJAEAAEsBhpRoh0sBhpRqJAEAAEsChpRoiUsBhpRqJAEAAEsDhpRoiksBhpRqJAEAAEsEhpRo
jEsBhpRqJAEAAEsFhpRojUsBhpRqJAEAAEsGhpRoj0sBhpRqJAEAAEsHhpRojksBhpRqJAEAAEsI
hpRolksBhpRqJAEAAEsJhpRol0sBhpRqJAEAAEsKhpRomUsEhpRqJAEAAEsLhpRonEsEhpRqJAEA
AEsMhpRopEsBhpRqJAEAAEsNhpRogksChpRqQQEAAEsAhpRohUsChpRqQQEAAEsBhpRohEsChpRq
QQEAAEsChpRoi0sChpRqQQEAAEsDhpRokEsChpRqQQEAAEsEhpRokUsChpRqQQEAAEsFhpRokksC
hpRqQQEAAEsGhpRoiEsChpRqQQEAAEsHhpRok0sChpRqQQEAAEsIhpRolEsChpRqQQEAAEsJhpRo
mEsChpRqQQEAAEsKhpRomksChpRqQQEAAEsLhpRom0sChpRqQQEAAEsMhpRonUsChpRqQQEAAEsN
hpRolUsBhpRqQQEAAEsOhpRonksChpRqQQEAAEsPhpRon0sChpRqQQEAAEsQhpRooEsBhpRqQQEA
AEsRhpRooUsBhpRqQQEAAEsShpRooksBhpRqQQEAAEsThpRoo0sBhpRqQQEAAEsUhpSMCWVtcF90
aXRsZZRLA4aUam0BAABLAIaUamsBAABLA4aUam0BAABLAYaUdUr+////hpRoB0sBdWiAfZQoaIJL
AmiDSwFohEsCaIVLAmiGSwFoh0sBaIhLAmiJSwFoiksBaItLAmiMSwFojUsBaI5LAWiPSwFokEsC
aJFLAmiSSwJok0sCaJRLAmiVSwFolksBaJdLAWiYSwJomUsEaJpLAmibSwJonEsEaJ1LAmieSwJo
n0sCaKBLAWihSwFooksBaKNLAWikSwF1aKV9lChqvAEAAEsDamsBAABLA3V1YmgMKYGUfZQoaA99
lChqIQEAAH2UKGiDSwGGlGokAQAASwCGlGiGSwGGlGokAQAASwGGlGiHSwGGlGokAQAASwKGlGiJ
SwGGlGokAQAASwOGlGiKSwGGlGokAQAASwSGlGiMSwGGlGokAQAASwWGlGiNSwGGlGokAQAASwaG
lGiPSwGGlGokAQAASweGlGiOSwGGlGokAQAASwiGlGiWSwGGlGokAQAASwmGlGiXSwGGlGokAQAA
SwqGlGiZSwSGlGokAQAASwuGlGicSwSGlGokAQAASwyGlGikSwGGlGokAQAASw2GlGiCSwKGlGpB
AQAASwCGlGiFSwKGlGpBAQAASwGGlGiESwKGlGpBAQAASwKGlGiLSwKGlGpBAQAASwOGlGiQSwKG
lGpBAQAASwSGlGiRSwKGlGpBAQAASwWGlGiSSwKGlGpBAQAASwaGlGiISwKGlGpBAQAASweGlGiT
SwKGlGpBAQAASwiGlGiUSwKGlGpBAQAASwmGlGiYSwKGlGpBAQAASwqGlGiaSwKGlGpBAQAASwuG
lGibSwKGlGpBAQAASwyGlGidSwKGlGpBAQAASw2GlGiVSwGGlGpBAQAASw6GlGieSwKGlGpBAQAA
Sw+GlGifSwKGlGpBAQAASxCGlGigSwGGlGpBAQAASxGGlGihSwGGlGpBAQAASxKGlGiiSwGGlGpB
AQAASxOGlGijSwGGlGpBAQAASxSGlGq8AQAASwOGlGptAQAASwCGlIwFdGl0bGWUSwOGlGptAQAA
SwGGlGprAQAASwOGlGptAQAASwKGlHVK/v///4aUaAdLAXVogH2UKGiCSwJog0sBaIRLAmiFSwJo
hksBaIdLAWiISwJoiUsBaIpLAWiLSwJojEsBaI1LAWiOSwFoj0sBaJBLAmiRSwJokksCaJNLAmiU
SwJolUsBaJZLAWiXSwFomEsCaJlLBGiaSwJom0sCaJxLBGidSwJonksCaJ9LAmigSwFooUsBaKJL
AWijSwFopEsBdWilfZQoarwBAABLA2oQAgAASwNqawEAAEsDdXViaAwpgZR9lChoD32UKGohAQAA
fZQoaINLAYaUaiQBAABLAIaUaIZLAYaUaiQBAABLAYaUaIdLAYaUaiQBAABLAoaUaIlLAYaUaiQB
AABLA4aUaIpLAYaUaiQBAABLBIaUaIxLAYaUaiQBAABLBYaUaI1LAYaUaiQBAABLBoaUaI9LAYaU
aiQBAABLB4aUaI5LAYaUaiQBAABLCIaUaJZLAYaUaiQBAABLCYaUaJdLAYaUaiQBAABLCoaUaJlL
BIaUaiQBAABLC4aUaJxLBIaUaiQBAABLDIaUaKRLAYaUaiQBAABLDYaUaIJLAoaUakEBAABLAIaU
aIVLAoaUakEBAABLAYaUaIRLAoaUakEBAABLAoaUaItLAoaUakEBAABLA4aUaJBLAoaUakEBAABL
BIaUaJFLAoaUakEBAABLBYaUaJJLAoaUakEBAABLBoaUaIhLAoaUakEBAABLB4aUaJNLAoaUakEB
AABLCIaUaJRLAoaUakEBAABLCYaUaJhLAoaUakEBAABLCoaUaJpLAoaUakEBAABLC4aUaJtLAoaU
akEBAABLDIaUaJ1LAoaUakEBAABLDYaUaJVLAYaUakEBAABLDoaUaJ5LAoaUakEBAABLD4aUaJ9L
AoaUakEBAABLEIaUaKBLAYaUakEBAABLEYaUaKFLAYaUakEBAABLEoaUaKJLAYaUakEBAABLE4aU
aKNLAYaUakEBAABLFIaUarwBAABLA4aUam0BAABLAIaUjAN1cmyUSwOGlGptAQAASwGGlGoQAgAA
SwOGlGptAQAASwKGlGprAQAASwOGlGptAQAASwOGlHVK/v///4aUaAdLAXVogH2UKGiCSwJog0sB
aIRLAmiFSwJohksBaIdLAWiISwJoiUsBaIpLAWiLSwJojEsBaI1LAWiOSwFoj0sBaJBLAmiRSwJo
kksCaJNLAmiUSwJolUsBaJZLAWiXSwFomEsCaJlLBGiaSwJom0sCaJxLBGidSwJonksCaJ9LAmig
SwFooUsBaKJLAWijSwFopEsBdWilfZQoarwBAABLA2pkAgAASwNqEAIAAEsDamsBAABLA3V1YmgM
KYGUfZQoaA99lChqIQEAAH2UKGiDSwGGlGokAQAASwCGlGiGSwGGlGokAQAASwGGlGiHSwGGlGok
AQAASwKGlGiJSwGGlGokAQAASwOGlGiKSwGGlGokAQAASwSGlGiMSwGGlGokAQAASwWGlGiNSwGG
lGokAQAASwaGlGiPSwGGlGokAQAASweGlGiOSwGGlGokAQAASwiGlGiWSwGGlGokAQAASwmGlGiX
SwGGlGokAQAASwqGlGiZSwSGlGokAQAASwuGlGicSwSGlGokAQAASwyGlGikSwGGlGokAQAASw2G
lGiCSwKGlGpBAQAASwCGlIwCaWSUSwKGlGpBAQAASwGGlGiFSwKGlGpBAQAASwKGlGiLSwKGlGpB
AQAASwOGlGiESwKGlGpBAQAASwSGlGiQSwKGlGpBAQAASwWGlGiRSwKGlGpBAQAASwaGlGiSSwKG
lGpBAQAASweGlGiTSwKGlGpBAQAASwiGlGiISwKGlGpBAQAASwmGlGiUSwKGlGpBAQAASwqGlGiY
SwKGlGpBAQAASwuGlGiaSwKGlGpBAQAASwyGlGibSwKGlGpBAQAASw2GlGidSwKGlGpBAQAASw6G
lGiVSwGGlGpBAQAASw+GlGieSwKGlGpBAQAASxCGlGifSwKGlGpBAQAASxGGlGigSwGGlGpBAQAA
SxKGlGihSwGGlGpBAQAASxOGlGiiSwGGlGpBAQAASxSGlGijSwGGlGpBAQAASxWGlGq8AQAASwOG
lGptAQAASwCGlGpkAgAASwOGlGptAQAASwGGlGoQAgAASwOGlGptAQAASwKGlGprAQAASwOGlGpt
AQAASwOGlHVK/v///4aUaAdLAXVogH2UKGiCSwJqkAIAAEsCaINLAWiESwJohUsCaIZLAWiHSwFo
iEsCaIlLAWiKSwFoi0sCaIxLAWiNSwFojksBaI9LAWiQSwJokUsCaJJLAmiTSwJolEsCaJVLAWiW
SwFol0sBaJhLAmiZSwRomksCaJtLAmicSwRonUsCaJ5LAmifSwJooEsBaKFLAWiiSwFoo0sBaKRL
AXVopX2UKGq8AQAASwNqZAIAAEsDahACAABLA2prAQAASwN1dWJoDCmBlH2UKGgPfZQoaiEBAAB9
lChog0sBhpRqJAEAAEsAhpRohksBhpRqJAEAAEsBhpRoh0sBhpRqJAEAAEsChpRoiUsBhpRqJAEA
AEsDhpRoiksBhpRqJAEAAEsEhpRojEsBhpRqJAEAAEsFhpRojUsBhpRqJAEAAEsGhpRoj0sBhpRq
JAEAAEsHhpRojksBhpRqJAEAAEsIhpRopEsBhpRqJAEAAEsJhpRogksChpRqQQEAAEsAhpSMClVu
bmFtZWQ6IDCUSwKGlGpBAQAASwGGlGiFSwKGlGpBAQAASwKGlGiLSwKGlGpBAQAASwOGlGqQAgAA
SwKGlGpBAQAASwSGlGiQSwKGlGpBAQAASwWGlGiRSwKGlGpBAQAASwaGlGiESwKGlGpBAQAASweG
lGiSSwKGlGpBAQAASwiGlGiTSwKGlGpBAQAASwmGlGiUSwKGlGpBAQAASwqGlGiISwKGlGpBAQAA
SwuGlGiVSwGGlGpBAQAASwyGlGiWSwGGlGpBAQAASw2GlGiXSwGGlGpBAQAASw6GlGiYSwKGlGpB
AQAASw+GlGiZSwSGlGpBAQAASxCGlGiaSwKGlGpBAQAASxGGlGibSwKGlGpBAQAASxKGlGicSwSG
lGpBAQAASxOGlGidSwKGlGpBAQAASxSGlGieSwKGlGpBAQAASxWGlGifSwKGlGpBAQAASxaGlGig
SwGGlGpBAQAASxeGlGihSwGGlGpBAQAASxiGlGiiSwGGlGpBAQAASxmGlGijSwGGlGpBAQAASxqG
lGq8AQAASwOGlGptAQAASwCGlGpkAgAASwOGlGptAQAASwGGlGoQAgAASwOGlGptAQAASwKGlGpr
AQAASwOGlGptAQAASwOGlHVK/v///4aUaAdLAXVogH2UKGrgAgAASwJogksCapACAABLAmiDSwFo
hEsCaIVLAmiGSwFoh0sBaIhLAmiJSwFoiksBaItLAmiMSwFojUsBaI5LAWiPSwFokEsCaJFLAmiS
SwJok0sCaJRLAmiVSwFolksBaJdLAWiYSwJomUsEaJpLAmibSwJonEsEaJ1LAmieSwJon0sCaKBL
AWihSwFooksBaKNLAWikSwF1aKV9lChqvAEAAEsDamQCAABLA2oQAgAASwNqawEAAEsDdXViaAwp
gZR9lChoD32UKGohAQAAfZQoaINLAYaUaiQBAABLAIaUjAlGZWF0dXJlIDGUSwKGlGokAQAASwGG
lGiGSwGGlGokAQAASwKGlGiHSwGGlGokAQAASwOGlGiJSwGGlGokAQAASwSGlGiKSwGGlGokAQAA
SwWGlGiMSwGGlGokAQAASwaGlGiNSwGGlGokAQAASweGlGiPSwGGlGokAQAASwiGlGiOSwGGlGok
AQAASwmGlGikSwGGlGokAQAASwqGlGiCSwKGlGpBAQAASwCGlGrgAgAASwKGlGpBAQAASwGGlGiF
SwKGlGpBAQAASwKGlGiLSwKGlGpBAQAASwOGlGqQAgAASwKGlGpBAQAASwSGlGiQSwKGlGpBAQAA
SwWGlGiRSwKGlGpBAQAASwaGlGiESwKGlGpBAQAASweGlGiSSwKGlGpBAQAASwiGlGiTSwKGlGpB
AQAASwmGlGiUSwKGlGpBAQAASwqGlGiISwKGlGpBAQAASwuGlGiVSwGGlGpBAQAASwyGlGiWSwGG
lGpBAQAASw2GlGiXSwGGlGpBAQAASw6GlGiYSwKGlGpBAQAASw+GlGiZSwSGlGpBAQAASxCGlGia
SwKGlGpBAQAASxGGlGibSwKGlGpBAQAASxKGlGicSwSGlGpBAQAASxOGlGidSwKGlGpBAQAASxSG
lGieSwKGlGpBAQAASxWGlGifSwKGlGpBAQAASxaGlGigSwGGlGpBAQAASxeGlGihSwGGlGpBAQAA
SxiGlGiiSwGGlGpBAQAASxmGlGijSwGGlGpBAQAASxqGlGq8AQAASwOGlGptAQAASwCGlGpkAgAA
SwOGlGptAQAASwGGlGoQAgAASwOGlGptAQAASwKGlGprAQAASwOGlGptAQAASwOGlHVK/v///4aU
aAdLAXVogH2UKGomAwAASwJq4AIAAEsCaIJLAmqQAgAASwJog0sBaIRLAmiFSwJohksBaIdLAWiI
SwJoiUsBaIpLAWiLSwJojEsBaI1LAWiOSwFoj0sBaJBLAmiRSwJokksCaJNLAmiUSwJolUsBaJZL
AWiXSwFomEsCaJlLBGiaSwJom0sCaJxLBGidSwJonksCaJ9LAmigSwFooUsBaKJLAWijSwFopEsB
dWilfZQoarwBAABLA2pkAgAASwNqEAIAAEsDamsBAABLA3V1YmgMKYGUfZQoaA99lChqIQEAAH2U
KGiDSwGGlGokAQAASwCGlGomAwAASwKGlGokAQAASwGGlGiGSwGGlGokAQAASwKGlGiHSwGGlGok
AQAASwOGlGiJSwGGlGokAQAASwSGlGiKSwGGlGokAQAASwWGlGiMSwGGlGokAQAASwaGlGiNSwGG
lGokAQAASweGlGiPSwGGlGokAQAASwiGlGiOSwGGlGokAQAASwmGlGikSwGGlGokAQAASwqGlGiC
SwKGlGpBAQAASwCGlGrgAgAASwKGlGpBAQAASwGGlGiFSwKGlGpBAQAASwKGlGiLSwKGlGpBAQAA
SwOGlGqQAgAASwKGlGpBAQAASwSGlGiQSwKGlGpBAQAASwWGlGiRSwKGlGpBAQAASwaGlGiESwKG
lGpBAQAASweGlGiSSwKGlGpBAQAASwiGlGiTSwKGlGpBAQAASwmGlGiUSwKGlGpBAQAASwqGlGiI
SwKGlGpBAQAASwuGlGq8AQAASwOGlGptAQAASwCGlGpkAgAASwOGlGptAQAASwGGlGoQAgAASwOG
lGptAQAASwKGlGprAQAASwOGlGptAQAASwOGlHVK/v///4aUaAdLAXVogH2UKGomAwAASwJq4AIA
AEsCaIJLAmqQAgAASwJog0sBaIRLAmiFSwJohksBaIdLAWiISwJoiUsBaIpLAWiLSwJojEsBaI1L
AWiOSwFoj0sBaJBLAmiRSwJokksCaJNLAmiUSwJopEsBdWilfZQoarwBAABLA2pkAgAASwNqEAIA
AEsDamsBAABLA3V1YmV1Lg==
</properties>
		<properties node_id="14" format="pickle">gASVfSQAAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNpZ25v
cmVfbmV3X2ZlYXR1cmVzlImME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAAAAB4AAAAC3
AAALAwAAA1sAAAeAAAAA3AAACwMAAANbAAAAAQAAAAAHgAAAB4AAAADcAAALAwAAA1uUjBJ1c2Vf
aW5wdXRfZmVhdHVyZXOUiYwLX192ZXJzaW9uX1+USwGMEGNvbnRleHRfc2V0dGluZ3OUXZQojBVv
cmFuZ2V3aWRnZXQuc2V0dGluZ3OUjAdDb250ZXh0lJOUKYGUfZQojAZ2YWx1ZXOUfZQojBFkb21h
aW5fcm9sZV9oaW50c5R9lCiMDW91dF9wcm5jcF9pbnaUSwKGlIwJYXZhaWxhYmxllEsAhpSMD3Rv
dGFsX3B5bW50X2ludpRLAoaUaBVLAYaUjAR0ZXJtlEsBhpRoFUsChpSMD2Z1bmRlZF9hbW50X2lu
dpRLAoaUaBVLA4aUjAVncmFkZZRLAYaUaBVLBIaUjAphbm51YWxfaW5jlEsChpRoFUsFhpSMB2lz
c3VlX2SUSwGGlGgVSwaGlIwJbWVtYmVyX2lklEsChpRoFUsHhpSMEGFwcGxpY2F0aW9uX3R5cGWU
SwGGlGgVSwiGlIwDZHRplEsChpRoFUsJhpSMDmlucV9sYXN0XzZtdGhzlEsChpRoFUsKhpSMCWxv
YW5fYW1udJRLAoaUaBVLC4aUjAtwb2xpY3lfY29kZZRLAYaUaBVLDIaUjAhpbnRfcmF0ZZRLAoaU
aBVLDYaUjAhvcGVuX2FjY5RLAoaUaBVLDoaUjAlyZXZvbF9iYWyUSwKGlGgVSw+GlIwJdG90YWxf
YWNjlEsChpRoFUsQhpSMDmVtcF9sZW5ndGhfaW50lEsChpRoFUsRhpSMFWVhcmxpZXN0X2NyX2xp
bmVfZGF0ZZRLBIaUaBVLEoaUjBttdGhzX3NpbmNlX2VhcmxpZXN0X2NyX2xpbmWUSwKGlGgVSxOG
lIwMaXNzdWVfZF9kYXRllEsEhpRoFUsUhpSMEm10aHNfc2luY2VfaXNzdWVfZJRLAoaUaBVLFYaU
jAh0ZXJtX2ludJRLAoaUaBVLFoaUjAhnb29kX2JhZJRLAYaUaBVLF4aUjAlzdWJfZ3JhZGWUSwGG
lIwJYXR0cmlidXRllEsAhpSMCmVtcF9sZW5ndGiUSwGGlGheSwGGlIwOaG9tZV9vd25lcnNoaXCU
SwGGlGheSwKGlIwTdmVyaWZpY2F0aW9uX3N0YXR1c5RLAYaUaF5LA4aUjAdwdXJwb3NllEsBhpRo
XksEhpSMCmFkZHJfc3RhdGWUSwGGlGheSwWGlIwTaW5pdGlhbF9saXN0X3N0YXR1c5RLAYaUaF5L
BoaUjAxsYXN0X3B5bW50X2SUSwGGlGheSweGlIwKcHltbnRfcGxhbpRLAYaUaF5LCIaUjAxuZXh0
X3B5bW50X2SUSwGGlGheSwmGlIwSbGFzdF9jcmVkaXRfcHVsbF9klEsBhpRoXksKhpR1Sv7///+G
lGgHSwF1jAphdHRyaWJ1dGVzlH2UKIwJbG9hbl9hbW50lEsCjAR0ZXJtlEsBjAltZW1iZXJfaWSU
SwKMCGludF9yYXRllEsCjAVncmFkZZRLAYwJc3ViX2dyYWRllEsBjA9mdW5kZWRfYW1udF9pbnaU
SwKMCmVtcF9sZW5ndGiUSwGMDmhvbWVfb3duZXJzaGlwlEsBjAphbm51YWxfaW5jlEsCjBN2ZXJp
ZmljYXRpb25fc3RhdHVzlEsBjAdpc3N1ZV9klEsBjAdwdXJwb3NllEsBjAphZGRyX3N0YXRllEsB
jANkdGmUSwKMDmlucV9sYXN0XzZtdGhzlEsCjAhvcGVuX2FjY5RLAowJcmV2b2xfYmFslEsCjAl0
b3RhbF9hY2OUSwKMCnB5bW50X3BsYW6USwGME2luaXRpYWxfbGlzdF9zdGF0dXOUSwGMDGxhc3Rf
cHltbnRfZJRLAYwOZW1wX2xlbmd0aF9pbnSUSwKMFWVhcmxpZXN0X2NyX2xpbmVfZGF0ZZRLBIwb
bXRoc19zaW5jZV9lYXJsaWVzdF9jcl9saW5llEsCjAh0ZXJtX2ludJRLAowMaXNzdWVfZF9kYXRl
lEsEjBJtdGhzX3NpbmNlX2lzc3VlX2SUSwKMDW91dF9wcm5jcF9pbnaUSwKMD3RvdGFsX3B5bW50
X2ludpRLAowMbmV4dF9weW1udF9klEsBjBJsYXN0X2NyZWRpdF9wdWxsX2SUSwGMC3BvbGljeV9j
b2RllEsBjBBhcHBsaWNhdGlvbl90eXBllEsBjAhnb29kX2JhZJRLAXWMBW1ldGFzlH2UdWJoDCmB
lH2UKGgPfZQojBFkb21haW5fcm9sZV9oaW50c5R9lCiMCUZlYXR1cmUgMZRLAoaUjAlhdmFpbGFi
bGWUSwCGlIwJbG9hbl9hbW50lEsChpRorUsBhpSMCGludF9yYXRllEsChpRorUsChpSMCmFubnVh
bF9pbmOUSwKGlGitSwOGlIwDZHRplEsChpRorUsEhpSMDmlucV9sYXN0XzZtdGhzlEsChpRorUsF
hpSMCG9wZW5fYWNjlEsChpRorUsGhpSMCXJldm9sX2JhbJRLAoaUaK1LB4aUjAl0b3RhbF9hY2OU
SwKGlGitSwiGlIwOZW1wX2xlbmd0aF9pbnSUSwKGlGitSwmGlIwVZWFybGllc3RfY3JfbGluZV9k
YXRllEsEhpRorUsKhpSMG210aHNfc2luY2VfZWFybGllc3RfY3JfbGluZZRLAoaUaK1LC4aUjAxp
c3N1ZV9kX2RhdGWUSwSGlGitSwyGlIwSbXRoc19zaW5jZV9pc3N1ZV9klEsChpRorUsNhpSMCHRl
cm1faW50lEsChpRorUsOhpSMCGdvb2RfYmFklEsBhpRorUsPhpSMBHRlcm2USwGGlIwJYXR0cmli
dXRllEsAhpSMBWdyYWRllEsBhpRo3ksBhpSMCXN1Yl9ncmFkZZRLAYaUaN5LAoaUjAplbXBfbGVu
Z3RolEsBhpRo3ksDhpSMDmhvbWVfb3duZXJzaGlwlEsBhpRo3ksEhpSME3ZlcmlmaWNhdGlvbl9z
dGF0dXOUSwGGlGjeSwWGlIwHaXNzdWVfZJRLAYaUaN5LBoaUjAdwdXJwb3NllEsBhpRo3ksHhpSM
CmFkZHJfc3RhdGWUSwGGlGjeSwiGlIwTaW5pdGlhbF9saXN0X3N0YXR1c5RLAYaUaN5LCYaUjAxs
YXN0X3B5bW50X2SUSwGGlGjeSwqGlHVK/v///4aUaAdLAXVof32UKIwJRmVhdHVyZSAxlEsCjAls
b2FuX2FtbnSUSwKMBHRlcm2USwGMCGludF9yYXRllEsCjAVncmFkZZRLAYwJc3ViX2dyYWRllEsB
jAplbXBfbGVuZ3RolEsBjA5ob21lX293bmVyc2hpcJRLAYwKYW5udWFsX2luY5RLAowTdmVyaWZp
Y2F0aW9uX3N0YXR1c5RLAYwHaXNzdWVfZJRLAYwHcHVycG9zZZRLAYwKYWRkcl9zdGF0ZZRLAYwD
ZHRplEsCjA5pbnFfbGFzdF82bXRoc5RLAowIb3Blbl9hY2OUSwKMCXJldm9sX2JhbJRLAowJdG90
YWxfYWNjlEsCjBNpbml0aWFsX2xpc3Rfc3RhdHVzlEsBjAxsYXN0X3B5bW50X2SUSwGMDmVtcF9s
ZW5ndGhfaW50lEsCjBVlYXJsaWVzdF9jcl9saW5lX2RhdGWUSwSMG210aHNfc2luY2VfZWFybGll
c3RfY3JfbGluZZRLAowIdGVybV9pbnSUSwKMDGlzc3VlX2RfZGF0ZZRLBIwSbXRoc19zaW5jZV9p
c3N1ZV9klEsCjAhnb29kX2JhZJRLAXVopH2UdWJoDCmBlH2UKGgPfZQojBFkb21haW5fcm9sZV9o
aW50c5R9lChogUsChpSMCWF2YWlsYWJsZZRLAIaUaIRLAoaUaiIBAABLAYaUaIpLAoaUaiIBAABL
AoaUaI9LAoaUaiIBAABLA4aUaJBLAoaUaiIBAABLBIaUaJFLAoaUaiIBAABLBYaUaJJLAoaUaiIB
AABLBoaUaJNLAoaUaiIBAABLB4aUaJdLAoaUaiIBAABLCIaUaJhLBIaUaiIBAABLCYaUaJlLAoaU
aiIBAABLCoaUaJtLBIaUaiIBAABLC4aUaJxLAoaUaiIBAABLDIaUaJpLAoaUaiIBAABLDYaUaKNL
AYaUaiIBAABLDoaUaIJLAYaUjAlhdHRyaWJ1dGWUSwCGlGiFSwGGlGpBAQAASwGGlGiDSwKGlGpB
AQAASwKGlGiGSwGGlGpBAQAASwOGlGiISwGGlGpBAQAASwSGlGiJSwGGlGpBAQAASwWGlGiLSwGG
lGpBAQAASwaGlGiHSwKGlGpBAQAASweGlGiMSwGGlGpBAQAASwiGlGiNSwGGlGpBAQAASwmGlGiO
SwGGlGpBAQAASwqGlGiVSwGGlGpBAQAASwuGlGiWSwGGlGpBAQAASwyGlGiUSwGGlGpBAQAASw2G
lGidSwKGlGpBAQAASw6GlGieSwKGlGpBAQAASw+GlGifSwGGlGpBAQAASxCGlGigSwGGlGpBAQAA
SxGGlGihSwGGlGpBAQAASxKGlGiiSwGGlGpBAQAASxOGlIwIemlwX2NvZGWUSwOGlIwEbWV0YZRL
AIaUdUr+////hpRoB0sBdWh/fZQoaIFLAmiCSwFog0sCaIRLAmiFSwFohksBaIdLAmiISwFoiUsB
aIpLAmiLSwFojEsBaI1LAWiOSwFoj0sCaJBLAmiRSwJokksCaJNLAmiUSwFolUsBaJZLAWiXSwJo
mEsEaJlLAmiaSwJom0sEaJxLAmidSwJonksCaJ9LAWigSwFooUsBaKJLAWijSwF1aKR9lGppAQAA
SwNzdWJoDCmBlH2UKGgPfZQoah8BAAB9lChogUsChpRqIgEAAEsAhpRohEsChpRqIgEAAEsBhpRo
iksChpRqIgEAAEsChpRoj0sChpRqIgEAAEsDhpRokEsChpRqIgEAAEsEhpRokUsChpRqIgEAAEsF
hpRokksChpRqIgEAAEsGhpRok0sChpRqIgEAAEsHhpRol0sChpRqIgEAAEsIhpRomEsEhpRqIgEA
AEsJhpRomUsChpRqIgEAAEsKhpRom0sEhpRqIgEAAEsLhpRonEsChpRqIgEAAEsMhpRomksChpRq
IgEAAEsNhpRoo0sBhpRqIgEAAEsOhpRogksBhpRqQQEAAEsAhpRohUsBhpRqQQEAAEsBhpRog0sC
hpRqQQEAAEsChpRohksBhpRqQQEAAEsDhpRoiEsBhpRqQQEAAEsEhpRoiUsBhpRqQQEAAEsFhpRo
i0sBhpRqQQEAAEsGhpRoh0sChpRqQQEAAEsHhpRojEsBhpRqQQEAAEsIhpRojUsBhpRqQQEAAEsJ
hpRojksBhpRqQQEAAEsKhpRolUsBhpRqQQEAAEsLhpRolksBhpRqQQEAAEsMhpRolEsBhpRqQQEA
AEsNhpRonUsChpRqQQEAAEsOhpRonksChpRqQQEAAEsPhpRon0sBhpRqQQEAAEsQhpRooEsBhpRq
QQEAAEsRhpRooUsBhpRqQQEAAEsShpRooksBhpRqQQEAAEsThpSMCWVtcF90aXRsZZRLA4aUamsB
AABLAIaUamkBAABLA4aUamsBAABLAYaUdUr+////hpRoB0sBdWh/fZQoaIFLAmiCSwFog0sCaIRL
AmiFSwFohksBaIdLAmiISwFoiUsBaIpLAmiLSwFojEsBaI1LAWiOSwFoj0sCaJBLAmiRSwJokksC
aJNLAmiUSwFolUsBaJZLAWiXSwJomEsEaJlLAmiaSwJom0sEaJxLAmidSwJonksCaJ9LAWigSwFo
oUsBaKJLAWijSwF1aKR9lChqugEAAEsDamkBAABLA3V1YmgMKYGUfZQoaA99lChqHwEAAH2UKGiB
SwKGlGoiAQAASwCGlGiESwKGlGoiAQAASwGGlGiKSwKGlGoiAQAASwKGlGiPSwKGlGoiAQAASwOG
lGiQSwKGlGoiAQAASwSGlGiRSwKGlGoiAQAASwWGlGiSSwKGlGoiAQAASwaGlGiTSwKGlGoiAQAA
SweGlGiXSwKGlGoiAQAASwiGlGiYSwSGlGoiAQAASwmGlGiZSwKGlGoiAQAASwqGlGibSwSGlGoi
AQAASwuGlGicSwKGlGoiAQAASwyGlGiaSwKGlGoiAQAASw2GlGijSwGGlGoiAQAASw6GlGiCSwGG
lGpBAQAASwCGlGiFSwGGlGpBAQAASwGGlGiDSwKGlGpBAQAASwKGlGiGSwGGlGpBAQAASwOGlGiI
SwGGlGpBAQAASwSGlGiJSwGGlGpBAQAASwWGlGiLSwGGlGpBAQAASwaGlGiHSwKGlGpBAQAASweG
lGiMSwGGlGpBAQAASwiGlGiNSwGGlGpBAQAASwmGlGiOSwGGlGpBAQAASwqGlGiVSwGGlGpBAQAA
SwuGlGiWSwGGlGpBAQAASwyGlGiUSwGGlGpBAQAASw2GlGidSwKGlGpBAQAASw6GlGieSwKGlGpB
AQAASw+GlGifSwGGlGpBAQAASxCGlGigSwGGlGpBAQAASxGGlGihSwGGlGpBAQAASxKGlGiiSwGG
lGpBAQAASxOGlGq6AQAASwOGlGprAQAASwCGlIwFdGl0bGWUSwOGlGprAQAASwGGlGppAQAASwOG
lGprAQAASwKGlHVK/v///4aUaAdLAXVof32UKGiBSwJogksBaINLAmiESwJohUsBaIZLAWiHSwJo
iEsBaIlLAWiKSwJoi0sBaIxLAWiNSwFojksBaI9LAmiQSwJokUsCaJJLAmiTSwJolEsBaJVLAWiW
SwFol0sCaJhLBGiZSwJomksCaJtLBGicSwJonUsCaJ5LAmifSwFooEsBaKFLAWiiSwFoo0sBdWik
fZQoaroBAABLA2oOAgAASwNqaQEAAEsDdXViaAwpgZR9lChoD32UKGofAQAAfZQoaIFLAoaUaiIB
AABLAIaUaIRLAoaUaiIBAABLAYaUaIpLAoaUaiIBAABLAoaUaI9LAoaUaiIBAABLA4aUaJBLAoaU
aiIBAABLBIaUaJFLAoaUaiIBAABLBYaUaJJLAoaUaiIBAABLBoaUaJNLAoaUaiIBAABLB4aUaJdL
AoaUaiIBAABLCIaUaJhLBIaUaiIBAABLCYaUaJlLAoaUaiIBAABLCoaUaJtLBIaUaiIBAABLC4aU
aJxLAoaUaiIBAABLDIaUaJpLAoaUaiIBAABLDYaUaKNLAYaUaiIBAABLDoaUaIJLAYaUakEBAABL
AIaUaIVLAYaUakEBAABLAYaUaINLAoaUakEBAABLAoaUaIZLAYaUakEBAABLA4aUaIhLAYaUakEB
AABLBIaUaIlLAYaUakEBAABLBYaUaItLAYaUakEBAABLBoaUaIdLAoaUakEBAABLB4aUaIxLAYaU
akEBAABLCIaUaI1LAYaUakEBAABLCYaUaI5LAYaUakEBAABLCoaUaJVLAYaUakEBAABLC4aUaJZL
AYaUakEBAABLDIaUaJRLAYaUakEBAABLDYaUaJ1LAoaUakEBAABLDoaUaJ5LAoaUakEBAABLD4aU
aJ9LAYaUakEBAABLEIaUaKBLAYaUakEBAABLEYaUaKFLAYaUakEBAABLEoaUaKJLAYaUakEBAABL
E4aUaroBAABLA4aUamsBAABLAIaUjAN1cmyUSwOGlGprAQAASwGGlGoOAgAASwOGlGprAQAASwKG
lGppAQAASwOGlGprAQAASwOGlHVK/v///4aUaAdLAXVof32UKGiBSwJogksBaINLAmiESwJohUsB
aIZLAWiHSwJoiEsBaIlLAWiKSwJoi0sBaIxLAWiNSwFojksBaI9LAmiQSwJokUsCaJJLAmiTSwJo
lEsBaJVLAWiWSwFol0sCaJhLBGiZSwJomksCaJtLBGicSwJonUsCaJ5LAmifSwFooEsBaKFLAWii
SwFoo0sBdWikfZQoaroBAABLA2piAgAASwNqDgIAAEsDamkBAABLA3V1YmgMKYGUfZQoaA99lChq
HwEAAH2UKGiBSwKGlGoiAQAASwCGlGiESwKGlGoiAQAASwGGlGiKSwKGlGoiAQAASwKGlGiPSwKG
lGoiAQAASwOGlGiQSwKGlGoiAQAASwSGlGiRSwKGlGoiAQAASwWGlGiSSwKGlGoiAQAASwaGlGiT
SwKGlGoiAQAASweGlGiXSwKGlGoiAQAASwiGlGiYSwSGlGoiAQAASwmGlGiZSwKGlGoiAQAASwqG
lGibSwSGlGoiAQAASwuGlGicSwKGlGoiAQAASwyGlGiaSwKGlGoiAQAASw2GlGijSwGGlGoiAQAA
Sw6GlGiCSwGGlGpBAQAASwCGlIwCaWSUSwKGlGpBAQAASwGGlGiFSwGGlGpBAQAASwKGlGiGSwGG
lGpBAQAASwOGlGiDSwKGlGpBAQAASwSGlGiISwGGlGpBAQAASwWGlGiJSwGGlGpBAQAASwaGlGiL
SwGGlGpBAQAASweGlGiMSwGGlGpBAQAASwiGlGiHSwKGlGpBAQAASwmGlGiNSwGGlGpBAQAASwqG
lGiOSwGGlGpBAQAASwuGlGiVSwGGlGpBAQAASwyGlGiWSwGGlGpBAQAASw2GlGiUSwGGlGpBAQAA
Sw6GlGidSwKGlGpBAQAASw+GlGieSwKGlGpBAQAASxCGlGifSwGGlGpBAQAASxGGlGigSwGGlGpB
AQAASxKGlGihSwGGlGpBAQAASxOGlGiiSwGGlGpBAQAASxSGlGq6AQAASwOGlGprAQAASwCGlGpi
AgAASwOGlGprAQAASwGGlGoOAgAASwOGlGprAQAASwKGlGppAQAASwOGlGprAQAASwOGlHVK/v//
/4aUaAdLAXVof32UKGiBSwJqkAIAAEsCaIJLAWiDSwJohEsCaIVLAWiGSwFoh0sCaIhLAWiJSwFo
iksCaItLAWiMSwFojUsBaI5LAWiPSwJokEsCaJFLAmiSSwJok0sCaJRLAWiVSwFolksBaJdLAmiY
SwRomUsCaJpLAmibSwRonEsCaJ1LAmieSwJon0sBaKBLAWihSwFooksBaKNLAXVopH2UKGq6AQAA
SwNqYgIAAEsDag4CAABLA2ppAQAASwN1dWJoDCmBlH2UKGgPfZQoah8BAAB9lChogUsChpRqIgEA
AEsAhpRohEsChpRqIgEAAEsBhpRoiksChpRqIgEAAEsChpRoj0sChpRqIgEAAEsDhpRokEsChpRq
IgEAAEsEhpRokUsChpRqIgEAAEsFhpRokksChpRqIgEAAEsGhpRok0sChpRqIgEAAEsHhpRoo0sB
hpRqIgEAAEsIhpRogksBhpRqQQEAAEsAhpSMClVubmFtZWQ6IDCUSwKGlGpBAQAASwGGlGiFSwGG
lGpBAQAASwKGlGiGSwGGlGpBAQAASwOGlGqQAgAASwKGlGpBAQAASwSGlGiISwGGlGpBAQAASwWG
lGiJSwGGlGpBAQAASwaGlGiDSwKGlGpBAQAASweGlGiLSwGGlGpBAQAASwiGlGiMSwGGlGpBAQAA
SwmGlGiNSwGGlGpBAQAASwqGlGiOSwGGlGpBAQAASwuGlGiHSwKGlGpBAQAASwyGlGiUSwGGlGpB
AQAASw2GlGiVSwGGlGpBAQAASw6GlGiWSwGGlGpBAQAASw+GlGiXSwKGlGpBAQAASxCGlGiYSwSG
lGpBAQAASxGGlGiZSwKGlGpBAQAASxKGlGiaSwKGlGpBAQAASxOGlGibSwSGlGpBAQAASxSGlGic
SwKGlGpBAQAASxWGlGidSwKGlGpBAQAASxaGlGieSwKGlGpBAQAASxeGlGifSwGGlGpBAQAASxiG
lGigSwGGlGpBAQAASxmGlGihSwGGlGpBAQAASxqGlGiiSwGGlGpBAQAASxuGlGq6AQAASwOGlGpr
AQAASwCGlGpiAgAASwOGlGprAQAASwGGlGoOAgAASwOGlGprAQAASwKGlGppAQAASwOGlGprAQAA
SwOGlHVK/v///4aUaAdLAXVof32UKGrcAgAASwJogUsCapACAABLAmiCSwFog0sCaIRLAmiFSwFo
hksBaIdLAmiISwFoiUsBaIpLAmiLSwFojEsBaI1LAWiOSwFoj0sCaJBLAmiRSwJokksCaJNLAmiU
SwFolUsBaJZLAWiXSwJomEsEaJlLAmiaSwJom0sEaJxLAmidSwJonksCaJ9LAWigSwFooUsBaKJL
AWijSwF1aKR9lChqugEAAEsDamICAABLA2oOAgAASwNqaQEAAEsDdXViaAwpgZR9lChoD32UKGof
AQAAfZQojAlGZWF0dXJlIDGUSwKGlGoiAQAASwCGlGiBSwKGlGoiAQAASwGGlGiESwKGlGoiAQAA
SwKGlGiKSwKGlGoiAQAASwOGlGiPSwKGlGoiAQAASwSGlGiQSwKGlGoiAQAASwWGlGiRSwKGlGoi
AQAASwaGlGiSSwKGlGoiAQAASweGlGiTSwKGlGoiAQAASwiGlGijSwGGlGoiAQAASwmGlGiCSwGG
lGpBAQAASwCGlGrcAgAASwKGlGpBAQAASwGGlGiFSwGGlGpBAQAASwKGlGiGSwGGlGpBAQAASwOG
lGqQAgAASwKGlGpBAQAASwSGlGiISwGGlGpBAQAASwWGlGiJSwGGlGpBAQAASwaGlGiDSwKGlGpB
AQAASweGlGiLSwGGlGpBAQAASwiGlGiMSwGGlGpBAQAASwmGlGiNSwGGlGpBAQAASwqGlGiOSwGG
lGpBAQAASwuGlGiHSwKGlGpBAQAASwyGlGiUSwGGlGpBAQAASw2GlGiVSwGGlGpBAQAASw6GlGiW
SwGGlGpBAQAASw+GlGiXSwKGlGpBAQAASxCGlGiYSwSGlGpBAQAASxGGlGiZSwKGlGpBAQAASxKG
lGiaSwKGlGpBAQAASxOGlGibSwSGlGpBAQAASxSGlGicSwKGlGpBAQAASxWGlGidSwKGlGpBAQAA
SxaGlGieSwKGlGpBAQAASxeGlGifSwGGlGpBAQAASxiGlGigSwGGlGpBAQAASxmGlGihSwGGlGpB
AQAASxqGlGiiSwGGlGpBAQAASxuGlGq6AQAASwOGlGprAQAASwCGlGpiAgAASwOGlGprAQAASwGG
lGoOAgAASwOGlGprAQAASwKGlGppAQAASwOGlGprAQAASwOGlHVK/v///4aUaAdLAXVof32UKGoi
AwAASwJq3AIAAEsCaIFLAmqQAgAASwJogksBaINLAmiESwJohUsBaIZLAWiHSwJoiEsBaIlLAWiK
SwJoi0sBaIxLAWiNSwFojksBaI9LAmiQSwJokUsCaJJLAmiTSwJolEsBaJVLAWiWSwFol0sCaJhL
BGiZSwJomksCaJtLBGicSwJonUsCaJ5LAmifSwFooEsBaKFLAWiiSwFoo0sBdWikfZQoaroBAABL
A2piAgAASwNqDgIAAEsDamkBAABLA3V1YmgMKYGUfZQoaA99lChqHwEAAH2UKGoiAwAASwKGlGoi
AQAASwCGlGiBSwKGlGoiAQAASwGGlGiESwKGlGoiAQAASwKGlGiKSwKGlGoiAQAASwOGlGiPSwKG
lGoiAQAASwSGlGiQSwKGlGoiAQAASwWGlGiRSwKGlGoiAQAASwaGlGiSSwKGlGoiAQAASweGlGiT
SwKGlGoiAQAASwiGlGijSwGGlGoiAQAASwmGlGiCSwGGlGpBAQAASwCGlGrcAgAASwKGlGpBAQAA
SwGGlGiFSwGGlGpBAQAASwKGlGiGSwGGlGpBAQAASwOGlGqQAgAASwKGlGpBAQAASwSGlGiISwGG
lGpBAQAASwWGlGiJSwGGlGpBAQAASwaGlGiDSwKGlGpBAQAASweGlGiLSwGGlGpBAQAASwiGlGiM
SwGGlGpBAQAASwmGlGiNSwGGlGpBAQAASwqGlGiOSwGGlGpBAQAASwuGlGiHSwKGlGpBAQAASwyG
lGq6AQAASwOGlGprAQAASwCGlGpiAgAASwOGlGprAQAASwGGlGoOAgAASwOGlGprAQAASwKGlGpp
AQAASwOGlGprAQAASwOGlHVK/v///4aUaAdLAXVof32UKGoiAwAASwJq3AIAAEsCaIFLAmqQAgAA
SwJogksBaINLAmiESwJohUsBaIZLAWiHSwJoiEsBaIlLAWiKSwJoi0sBaIxLAWiNSwFojksBaI9L
AmiQSwJokUsCaJJLAmiTSwJoo0sBdWikfZQoaroBAABLA2piAgAASwNqDgIAAEsDamkBAABLA3V1
YmV1Lg==
</properties>
		<properties node_id="15" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf8\x7f\xff\xff\xff\xca\x00\x00\x00\x00\x00\x00\x03\xd0\xff\xff\xf8}\xff\xff\xff\xd1\xff\xff\xfd{\x00\x00\x02o\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'from Orange.data import Table, Domain, DiscreteVariable, ContinuousVariable\nfrom Orange.preprocess import Preprocess\nimport numpy as np\n\nclass CatOneHotEncoder(Preprocess):\n    def __init__(self, reference_categories=None):\n        self.reference_categories = reference_categories or [\n            \'&gt;28.1K\', \'60\', \'&gt;22.0\', \'G\',\n            \'G1_F5_G5_G3_G2_F4_F3_G4_F2\',\n            \'0\', \'OTHER_NONE_RENT_ANY\', \'&lt;=20.0K\',\n            \'Verified\', \'small_business_educational_renewable_energy_moving\',\n            \'NE_IA_NV_HI_FL\', \'&gt;28.0\', \'4-33\', \'&lt;=4.0\',\n            \'&lt;=6.0\', \'&lt;=2.0K\', \'&lt;=8.0\', \'f\', \'missing\', \'&lt;=151.0\'\n        ]\n\n    def __call__(self, data):\n        X = Table(data)\n        domain = data.domain\n        new_attrs = []\n        attr_mapping = {}\n\n        for attr in domain.attributes:\n            if isinstance(attr, DiscreteVariable):\n                reference_category = next((cat for cat in attr.values if cat in self.reference_categories), attr.values[-1])\n                attr_mapping[attr.name] = []\n                for value in attr.values:\n                    if value != reference_category:\n                        new_attr = ContinuousVariable.make(f"{attr.name}_{value}")\n                        new_attrs.append(new_attr)\n                        attr_mapping[attr.name].append((value, new_attr))\n            else:\n                new_attrs.append(attr)\n\n        new_domain = Domain(new_attrs, domain.class_vars, domain.metas)\n        new_X = np.zeros((len(X), len(new_attrs)), dtype=float)\n\n        for i, instance in enumerate(X):\n            col_idx = 0\n            for attr in domain.attributes:\n                if isinstance(attr, DiscreteVariable):\n                    value = instance[attr]\n                    if not np.isnan(value):\n                        for orig_value, new_attr in attr_mapping[attr.name]:\n                            if attr.values[int(value)] == orig_value:\n                                new_X[i, col_idx] = 1\n                            col_idx += 1\n                else:\n                    new_X[i, col_idx] = instance[attr]\n                    col_idx += 1\n\n        return Table(new_domain, new_X, X.Y, X.metas)\n\n# Uso no widget "Python Script" do Orange:\ncat_one_hot_encoder = CatOneHotEncoder()\nout_data = cat_one_hot_encoder(in_data)', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xac\x00\x00\x00h\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="16" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf8\x7f\xff\xff\xff\xca\x00\x00\x00\x00\x00\x00\x03\xd0\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rows': [], 'columns': []}, 'stored_sort': [], '__version__': 1}</properties>
		<properties node_id="17" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf8\x7f\xff\xff\xff\xca\x00\x00\x00\x00\x00\x00\x03\xd0\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rows': [], 'columns': []}, 'stored_sort': [], '__version__': 1}</properties>
		<properties node_id="18" format="pickle">gASVq5MAAAAAAAB9lCiMCmF1dG9fYXBwbHmUiIwSY29udHJvbEFyZWFWaXNpYmxllIiMB21lcmdp
bmeUSwCME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAP///XUAAAFH////WAAAAkX///12
AAABXP///1cAAAJEAAAAAQAAAAAHgP///XYAAAFc////VwAAAkSUjAtfX3ZlcnNpb25fX5RLAowQ
Y29udGV4dF9zZXR0aW5nc5RdlCiMFW9yYW5nZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5Qp
gZR9lCiMBnZhbHVlc5R9lCiMCmF0dHJfcGFpcnOUXZRdlCiMCVJvdyBpbmRleJRLZIaUaBNLZIaU
ZWFoBksCdYwKdmFyaWFibGVzMZR9lCiMCXN1Yl9ncmFkZZRLZYwKZW1wX2xlbmd0aJRLZYwOaG9t
ZV9vd25lcnNoaXCUS2WME3ZlcmlmaWNhdGlvbl9zdGF0dXOUS2WMB3B1cnBvc2WUS2WMCmFkZHJf
c3RhdGWUS2WME2luaXRpYWxfbGlzdF9zdGF0dXOUS2WMDGxhc3RfcHltbnRfZJRLZYwKcHltbnRf
cGxhbpRLZYwMbmV4dF9weW1udF9klEtljBJsYXN0X2NyZWRpdF9wdWxsX2SUS2V1jAp2YXJpYWJs
ZXMylH2UKIwPdG90YWxfcHltbnRfaW52lEtljAhpbnRfcmF0ZZRLZYwIdGVybV9pbnSUS2WMDmlu
cV9sYXN0XzZtdGhzlEtljA1vdXRfcHJuY3BfaW52lEtljAphbm51YWxfaW5jlEtljANkdGmUS2WM
CWxvYW5fYW1udJRLZYwPZnVuZGVkX2FtbnRfaW52lEtljAl0b3RhbF9hY2OUS2WMCGdvb2RfYmFk
lEtldXViaAspgZR9lChoDn2UKIwKYXR0cl9wYWlyc5RdlF2UKIwJUm93IGluZGV4lEtkhpRoNktk
hpRlYWgGSwJ1aBZ9lCiMBHRlcm2US2WMBWdyYWRllEtljAlzdWJfZ3JhZGWUS2WMCmVtcF9sZW5n
dGiUS2WMDmhvbWVfb3duZXJzaGlwlEtljBN2ZXJpZmljYXRpb25fc3RhdHVzlEtljAdpc3N1ZV9k
lEtljAdwdXJwb3NllEtljAphZGRyX3N0YXRllEtljBNpbml0aWFsX2xpc3Rfc3RhdHVzlEtljAxs
YXN0X3B5bW50X2SUS2V1aCN9lCiMCGludF9yYXRllEtljAh0ZXJtX2ludJRLZYwKYW5udWFsX2lu
Y5RLZYwOaW5xX2xhc3RfNm10aHOUS2WMA2R0aZRLZYwJbG9hbl9hbW50lEtljBJtdGhzX3NpbmNl
X2lzc3VlX2SUS2WMDmVtcF9sZW5ndGhfaW50lEtljAhvcGVuX2FjY5RLZYwbbXRoc19zaW5jZV9l
YXJsaWVzdF9jcl9saW5llEtljAhnb29kX2JhZJRLZXV1YmgLKYGUfZQoaA59lChoM12UXZQoaDZL
ZIaUaDZLZIaUZWFoBksCdWgWfZQoaEZLZWhHS2VoSEtlaElLZWhKS2VoS0tlaExLZWhNS2VoTktl
aE9LZWhQS2V1aCN9lChoOktlaDtLZWg8S2VoPUtlaD5LZWg/S2VoQEtlaEFLZWhCS2VoQ0tlaERL
ZXV1YmgLKYGUfZQoaA59lChoM12UXZQoaDZLZIaUaDZLZIaUZWFoBksCdWgWfZQoaEtLZmhGS2Zo
SEtmaEpLZmhJS2ZoTktmjAlyZXZvbF9iYWyUS2aMCXRvdGFsX2FjY5RLZmhNS2ZoT0tmaEdLZmhM
S2ZoUEtldWgjfZQoaDpLZWg7S2VoPEtlaD1LZWg+S2VoP0tlaEBLZWhBS2VoQktlaENLZWhES2V1
dWJoCymBlH2UKGgOfZQoaDNdlF2UKGg2S2SGlGg2S2SGlGVhaAZLAnVoFn2UKGhLS2ZoRktmaEhL
ZmhKS2ZoSUtmaE5LZmhiS2ZoY0tmaE1LZmhPS2ZoR0tmaExLZmhQS2V1aCN9lCiMDnRlcm1fMzYg
bW9udGhzlEtmjAdncmFkZV9BlEtmjAdncmFkZV9ClEtmjAdncmFkZV9DlEtmjAdncmFkZV9ElEtm
jAdncmFkZV9FlEtmjAdncmFkZV9GlEtmjAxzdWJfZ3JhZGVfQTGUS2aMDHN1Yl9ncmFkZV9BMpRL
ZowMc3ViX2dyYWRlX0EzlEtmjAxzdWJfZ3JhZGVfQTSUS2aMDHN1Yl9ncmFkZV9BNZRLZowMc3Vi
X2dyYWRlX0IxlEtmjAxzdWJfZ3JhZGVfQjKUS2aMDHN1Yl9ncmFkZV9CM5RLZowMc3ViX2dyYWRl
X0I0lEtmjAxzdWJfZ3JhZGVfQjWUS2aMDHN1Yl9ncmFkZV9DMZRLZowMc3ViX2dyYWRlX0MylEtm
jAxzdWJfZ3JhZGVfQzOUS2aMDHN1Yl9ncmFkZV9DNJRLZowMc3ViX2dyYWRlX0M1lEtmjAxzdWJf
Z3JhZGVfRDGUS2aMDHN1Yl9ncmFkZV9EMpRLZowMc3ViX2dyYWRlX0QzlEtmjAxzdWJfZ3JhZGVf
RDSUS2aMDHN1Yl9ncmFkZV9ENZRLZowMc3ViX2dyYWRlX0UxlEtmjAxzdWJfZ3JhZGVfRTKUS2aM
DHN1Yl9ncmFkZV9FM5RLZowMc3ViX2dyYWRlX0U0lEtmjAxzdWJfZ3JhZGVfRTWUS2aMDHN1Yl9n
cmFkZV9GMZRLZowMc3ViX2dyYWRlX0YylEtmjAxzdWJfZ3JhZGVfRjOUS2aMDHN1Yl9ncmFkZV9G
NJRLZowMc3ViX2dyYWRlX0Y1lEtmjAxzdWJfZ3JhZGVfRzGUS2aMDHN1Yl9ncmFkZV9HMpRLZowM
c3ViX2dyYWRlX0czlEtmjAxzdWJfZ3JhZGVfRzSUS2aMEWVtcF9sZW5ndGhfMSB5ZWFylEtmjBJl
bXBfbGVuZ3RoXzIgeWVhcnOUS2aMEmVtcF9sZW5ndGhfMyB5ZWFyc5RLZowSZW1wX2xlbmd0aF80
IHllYXJzlEtmjBJlbXBfbGVuZ3RoXzUgeWVhcnOUS2aMEmVtcF9sZW5ndGhfNiB5ZWFyc5RLZowS
ZW1wX2xlbmd0aF83IHllYXJzlEtmjBJlbXBfbGVuZ3RoXzggeWVhcnOUS2aMEmVtcF9sZW5ndGhf
OSB5ZWFyc5RLZowUZW1wX2xlbmd0aF8xMCsgeWVhcnOUS2aMF2hvbWVfb3duZXJzaGlwX01PUlRH
QUdFlEtmjBJob21lX293bmVyc2hpcF9PV06US2aMIHZlcmlmaWNhdGlvbl9zdGF0dXNfTm90IFZl
cmlmaWVklEtmjCN2ZXJpZmljYXRpb25fc3RhdHVzX1NvdXJjZSBWZXJpZmllZJRLZowOaXNzdWVf
ZF9EZWMtMTGUS2aMDmlzc3VlX2RfTm92LTExlEtmjAtwdXJwb3NlX2NhcpRLZowTcHVycG9zZV9j
cmVkaXRfY2FyZJRLZowacHVycG9zZV9kZWJ0X2NvbnNvbGlkYXRpb26US2aMGHB1cnBvc2VfaG9t
ZV9pbXByb3ZlbWVudJRLZowNcHVycG9zZV9ob3VzZZRLZowWcHVycG9zZV9tYWpvcl9wdXJjaGFz
ZZRLZowPcHVycG9zZV9tZWRpY2FslEtmjA5wdXJwb3NlX21vdmluZ5RLZowNcHVycG9zZV9vdGhl
cpRLZowYcHVycG9zZV9yZW5ld2FibGVfZW5lcmd5lEtmjBZwdXJwb3NlX3NtYWxsX2J1c2luZXNz
lEtmjBBwdXJwb3NlX3ZhY2F0aW9ulEtmjA1hZGRyX3N0YXRlX0FLlEtmjA1hZGRyX3N0YXRlX0FM
lEtmjA1hZGRyX3N0YXRlX0FSlEtmjA1hZGRyX3N0YXRlX0FalEtmjA1hZGRyX3N0YXRlX0NBlEtm
jA1hZGRyX3N0YXRlX0NPlEtmjA1hZGRyX3N0YXRlX0NUlEtmjA1hZGRyX3N0YXRlX0RDlEtmjA1h
ZGRyX3N0YXRlX0RFlEtmjA1hZGRyX3N0YXRlX0ZMlEtmjA1hZGRyX3N0YXRlX0dBlEtmjA1hZGRy
X3N0YXRlX0hJlEtmjA1hZGRyX3N0YXRlX0lMlEtmjA1hZGRyX3N0YXRlX0tTlEtmjA1hZGRyX3N0
YXRlX0tZlEtmjA1hZGRyX3N0YXRlX0xBlEtmjA1hZGRyX3N0YXRlX01BlEtmjA1hZGRyX3N0YXRl
X01ElEtmjA1hZGRyX3N0YXRlX01JlEtmjA1hZGRyX3N0YXRlX01OlEtmjA1hZGRyX3N0YXRlX01P
lEtmjA1hZGRyX3N0YXRlX01TlEtmjA1hZGRyX3N0YXRlX01UlEtmjA1hZGRyX3N0YXRlX05DlEtm
jA1hZGRyX3N0YXRlX05IlEtmjA1hZGRyX3N0YXRlX05KlEtmjA1hZGRyX3N0YXRlX05NlEtmjA1h
ZGRyX3N0YXRlX05WlEtmjA1hZGRyX3N0YXRlX05ZlEtmjA1hZGRyX3N0YXRlX09IlEtmjA1hZGRy
X3N0YXRlX09LlEtmjA1hZGRyX3N0YXRlX09SlEtmjA1hZGRyX3N0YXRlX1BBlEtmjA1hZGRyX3N0
YXRlX1JJlEtmjA1hZGRyX3N0YXRlX1NDlEtmjA1hZGRyX3N0YXRlX1NElEtmjA1hZGRyX3N0YXRl
X1ROlEtmjA1hZGRyX3N0YXRlX1RYlEtmjA1hZGRyX3N0YXRlX1VUlEtmjA1hZGRyX3N0YXRlX1ZB
lEtmjA1hZGRyX3N0YXRlX1ZUlEtmjA1hZGRyX3N0YXRlX1dBlEtmjA1hZGRyX3N0YXRlX1dJlEtm
jA1hZGRyX3N0YXRlX1dWlEtmjBNsYXN0X3B5bW50X2RfQXByLTEylEtmjBNsYXN0X3B5bW50X2Rf
QXByLTEzlEtmjBNsYXN0X3B5bW50X2RfQXByLTE0lEtmjBNsYXN0X3B5bW50X2RfQXByLTE1lEtm
jBNsYXN0X3B5bW50X2RfQXVnLTEylEtmjBNsYXN0X3B5bW50X2RfQXVnLTEzlEtmjBNsYXN0X3B5
bW50X2RfQXVnLTE0lEtmjBNsYXN0X3B5bW50X2RfQXVnLTE1lEtmjBNsYXN0X3B5bW50X2RfRGVj
LTExlEtmjBNsYXN0X3B5bW50X2RfRGVjLTEylEtmjBNsYXN0X3B5bW50X2RfRGVjLTEzlEtmjBNs
YXN0X3B5bW50X2RfRGVjLTE0lEtmjBNsYXN0X3B5bW50X2RfRGVjLTE1lEtmjBNsYXN0X3B5bW50
X2RfRmViLTEylEtmjBNsYXN0X3B5bW50X2RfRmViLTEzlEtmjBNsYXN0X3B5bW50X2RfRmViLTE0
lEtmjBNsYXN0X3B5bW50X2RfRmViLTE1lEtmjBNsYXN0X3B5bW50X2RfSmFuLTEylEtmjBNsYXN0
X3B5bW50X2RfSmFuLTEzlEtmjBNsYXN0X3B5bW50X2RfSmFuLTE0lEtmjBNsYXN0X3B5bW50X2Rf
SmFuLTE1lEtmjBNsYXN0X3B5bW50X2RfSmFuLTE2lEtmjBNsYXN0X3B5bW50X2RfSnVsLTEylEtm
jBNsYXN0X3B5bW50X2RfSnVsLTEzlEtmjBNsYXN0X3B5bW50X2RfSnVsLTE0lEtmjBNsYXN0X3B5
bW50X2RfSnVsLTE1lEtmjBNsYXN0X3B5bW50X2RfSnVuLTEylEtmjBNsYXN0X3B5bW50X2RfSnVu
LTEzlEtmjBNsYXN0X3B5bW50X2RfSnVuLTE0lEtmjBNsYXN0X3B5bW50X2RfSnVuLTE1lEtmjBNs
YXN0X3B5bW50X2RfTWFyLTEylEtmjBNsYXN0X3B5bW50X2RfTWFyLTEzlEtmjBNsYXN0X3B5bW50
X2RfTWFyLTE0lEtmjBNsYXN0X3B5bW50X2RfTWFyLTE1lEtmjBNsYXN0X3B5bW50X2RfTWF5LTEy
lEtmjBNsYXN0X3B5bW50X2RfTWF5LTEzlEtmjBNsYXN0X3B5bW50X2RfTWF5LTE0lEtmjBNsYXN0
X3B5bW50X2RfTWF5LTE1lEtmjBNsYXN0X3B5bW50X2RfTm92LTExlEtmjBNsYXN0X3B5bW50X2Rf
Tm92LTEylEtmjBNsYXN0X3B5bW50X2RfTm92LTEzlEtmjBNsYXN0X3B5bW50X2RfTm92LTE0lEtm
jBNsYXN0X3B5bW50X2RfTm92LTE1lEtmjBNsYXN0X3B5bW50X2RfT2N0LTEylEtmjBNsYXN0X3B5
bW50X2RfT2N0LTEzlEtmjBNsYXN0X3B5bW50X2RfT2N0LTE0lEtmjBNsYXN0X3B5bW50X2RfT2N0
LTE1lEtmjBNsYXN0X3B5bW50X2RfU2VwLTEylEtmjBNsYXN0X3B5bW50X2RfU2VwLTEzlEtmjBNs
YXN0X3B5bW50X2RfU2VwLTE0lEtmdXViaAspgZR9lChoDn2UKGgzXZRdlChoNktkhpRoNktkhpRl
YWgGSwJ1aBZ9lChoS0tmaEZLZmhIS2ZoSktmaElLZmhOS2ZoYktmaGNLZmhNS2ZoT0tmaEdLZmhM
S2Z1aCN9lChobktmaG9LZmhwS2ZocUtmaHJLZmhzS2ZodEtmaHVLZmh2S2Zod0tmaHhLZmh5S2Zo
ektmaHtLZmh8S2ZofUtmaH5LZmh/S2ZogEtmaIFLZmiCS2Zog0tmaIRLZmiFS2ZohktmaIdLZmiI
S2ZoiUtmaIpLZmiLS2ZojEtmaI1LZmiOS2Zoj0tmaJBLZmiRS2ZokktmaJNLZmiUS2ZolUtmaJZL
ZmiXS2ZomEtmaJlLZmiaS2Zom0tmaJxLZmidS2ZonktmaJ9LZmigS2ZooUtmaKJLZmijS2ZopEtm
aKVLZmimS2Zop0tmaKhLZmipS2ZoqktmaKtLZmisS2ZorUtmaK5LZmivS2ZosEtmaLFLZmiyS2Zo
s0tmaLRLZmi1S2ZotktmaLdLZmi4S2ZouUtmaLpLZmi7S2ZovEtmaL1LZmi+S2Zov0tmaMBLZmjB
S2ZowktmaMNLZmjES2ZoxUtmaMZLZmjHS2ZoyEtmaMlLZmjKS2Zoy0tmaMxLZmjNS2ZozktmaM9L
ZmjQS2Zo0UtmaNJLZmjTS2Zo1EtmaNVLZmjWS2Zo10tmaNhLZmjZS2Zo2ktmaNtLZmjcS2Zo3Utm
aN5LZmjfS2Zo4EtmaOFLZmjiS2Zo40tmaORLZmjlS2Zo5ktmaOdLZmjoS2Zo6UtmaOpLZmjrS2Zo
7EtmaO1LZmjuS2Zo70tmaPBLZmjxS2Zo8ktmaPNLZmj0S2Zo9UtmaPZLZmj3S2Zo+EtmaPlLZmj6
S2Zo+0tmaPxLZmj9S2Zo/ktmaP9LZmoAAQAAS2ZqAQEAAEtmagIBAABLZmoDAQAAS2ZqBAEAAEtm
agUBAABLZmoGAQAAS2ZqBwEAAEtmaggBAABLZmoJAQAAS2ZqCgEAAEtmagsBAABLZmoMAQAAS2Zq
DQEAAEtmag4BAABLZmoPAQAAS2ZqEAEAAEtmdXViaAspgZR9lChoDn2UKIwKYXR0cl9wYWlyc5Rd
lF2UKIwJUm93IGluZGV4lEtkhpRqIAEAAEtkhpRlYWgGSwJ1aBZ9lCiMCWxvYW5fYW1udJRLZYwI
aW50X3JhdGWUS2WMCmFubnVhbF9pbmOUS2WMA2R0aZRLZYwOaW5xX2xhc3RfNm10aHOUS2WMCG9w
ZW5fYWNjlEtljA9mdW5kZWRfYW1udF9pbnaUS2WMCXJldm9sX2JhbJRLZYwJdG90YWxfYWNjlEtl
jA5lbXBfbGVuZ3RoX2ludJRLZYwbbXRoc19zaW5jZV9lYXJsaWVzdF9jcl9saW5llEtljAh0ZXJt
X2ludJRLZYwSbXRoc19zaW5jZV9pc3N1ZV9klEtljA1vdXRfcHJuY3BfaW52lEtljA90b3RhbF9w
eW1udF9pbnaUS2WMCGdvb2RfYmFklEtldWgjfZQojAxzdWJfZ3JhZGVfQTGUS2aMDHN1Yl9ncmFk
ZV9BMpRLZowMc3ViX2dyYWRlX0EzlEtmjAxzdWJfZ3JhZGVfQTSUS2aMDHN1Yl9ncmFkZV9BNZRL
ZowMc3ViX2dyYWRlX0IxlEtmjAxzdWJfZ3JhZGVfQjKUS2aMDHN1Yl9ncmFkZV9CM5RLZowMc3Vi
X2dyYWRlX0I0lEtmjAxzdWJfZ3JhZGVfQjWUS2aMDHN1Yl9ncmFkZV9DMZRLZowMc3ViX2dyYWRl
X0MylEtmjAxzdWJfZ3JhZGVfQzOUS2aMDHN1Yl9ncmFkZV9DNJRLZowMc3ViX2dyYWRlX0M1lEtm
jAxzdWJfZ3JhZGVfRDGUS2aMDHN1Yl9ncmFkZV9EMpRLZowMc3ViX2dyYWRlX0QzlEtmjAxzdWJf
Z3JhZGVfRDSUS2aMDHN1Yl9ncmFkZV9ENZRLZowMc3ViX2dyYWRlX0UxlEtmjAxzdWJfZ3JhZGVf
RTKUS2aMDHN1Yl9ncmFkZV9FM5RLZowMc3ViX2dyYWRlX0U0lEtmjAxzdWJfZ3JhZGVfRTWUS2aM
DHN1Yl9ncmFkZV9GMZRLZowMc3ViX2dyYWRlX0YylEtmjAxzdWJfZ3JhZGVfRjOUS2aMDHN1Yl9n
cmFkZV9GNJRLZowMc3ViX2dyYWRlX0Y1lEtmjAxzdWJfZ3JhZGVfRzGUS2aMDHN1Yl9ncmFkZV9H
MpRLZowMc3ViX2dyYWRlX0czlEtmjAxzdWJfZ3JhZGVfRzSUS2aMEWVtcF9sZW5ndGhfMSB5ZWFy
lEtmjBJlbXBfbGVuZ3RoXzIgeWVhcnOUS2aMEmVtcF9sZW5ndGhfMyB5ZWFyc5RLZowSZW1wX2xl
bmd0aF80IHllYXJzlEtmjBJlbXBfbGVuZ3RoXzUgeWVhcnOUS2aMEmVtcF9sZW5ndGhfNiB5ZWFy
c5RLZowSZW1wX2xlbmd0aF83IHllYXJzlEtmjBJlbXBfbGVuZ3RoXzggeWVhcnOUS2aMEmVtcF9s
ZW5ndGhfOSB5ZWFyc5RLZowUZW1wX2xlbmd0aF8xMCsgeWVhcnOUS2aMF2hvbWVfb3duZXJzaGlw
X01PUlRHQUdFlEtmjBRob21lX293bmVyc2hpcF9PVEhFUpRLZowSaG9tZV9vd25lcnNoaXBfT1dO
lEtmjCB2ZXJpZmljYXRpb25fc3RhdHVzX05vdCBWZXJpZmllZJRLZowjdmVyaWZpY2F0aW9uX3N0
YXR1c19Tb3VyY2UgVmVyaWZpZWSUS2aMC3B1cnBvc2VfY2FylEtmjBNwdXJwb3NlX2NyZWRpdF9j
YXJklEtmjBpwdXJwb3NlX2RlYnRfY29uc29saWRhdGlvbpRLZowTcHVycG9zZV9lZHVjYXRpb25h
bJRLZowYcHVycG9zZV9ob21lX2ltcHJvdmVtZW50lEtmjA1wdXJwb3NlX2hvdXNllEtmjBZwdXJw
b3NlX21ham9yX3B1cmNoYXNllEtmjA9wdXJwb3NlX21lZGljYWyUS2aMDnB1cnBvc2VfbW92aW5n
lEtmjA1wdXJwb3NlX290aGVylEtmjBhwdXJwb3NlX3JlbmV3YWJsZV9lbmVyZ3mUS2aMFnB1cnBv
c2Vfc21hbGxfYnVzaW5lc3OUS2aMEHB1cnBvc2VfdmFjYXRpb26US2aMDWFkZHJfc3RhdGVfQUuU
S2aMDWFkZHJfc3RhdGVfQUyUS2aMDWFkZHJfc3RhdGVfQVKUS2aMDWFkZHJfc3RhdGVfQVqUS2aM
DWFkZHJfc3RhdGVfQ0GUS2aMDWFkZHJfc3RhdGVfQ0+US2aMDWFkZHJfc3RhdGVfQ1SUS2aMDWFk
ZHJfc3RhdGVfREOUS2aMDWFkZHJfc3RhdGVfREWUS2aMDWFkZHJfc3RhdGVfRkyUS2aMDWFkZHJf
c3RhdGVfR0GUS2aMDWFkZHJfc3RhdGVfSEmUS2aMDWFkZHJfc3RhdGVfSUGUS2aMDWFkZHJfc3Rh
dGVfSUyUS2aMDWFkZHJfc3RhdGVfS1OUS2aMDWFkZHJfc3RhdGVfS1mUS2aMDWFkZHJfc3RhdGVf
TEGUS2aMDWFkZHJfc3RhdGVfTUGUS2aMDWFkZHJfc3RhdGVfTUSUS2aMDWFkZHJfc3RhdGVfTUmU
S2aMDWFkZHJfc3RhdGVfTU6US2aMDWFkZHJfc3RhdGVfTU+US2aMDWFkZHJfc3RhdGVfTVOUS2aM
DWFkZHJfc3RhdGVfTVSUS2aMDWFkZHJfc3RhdGVfTkOUS2aMDWFkZHJfc3RhdGVfTkiUS2aMDWFk
ZHJfc3RhdGVfTkqUS2aMDWFkZHJfc3RhdGVfTk2US2aMDWFkZHJfc3RhdGVfTlaUS2aMDWFkZHJf
c3RhdGVfTlmUS2aMDWFkZHJfc3RhdGVfT0iUS2aMDWFkZHJfc3RhdGVfT0uUS2aMDWFkZHJfc3Rh
dGVfT1KUS2aMDWFkZHJfc3RhdGVfUEGUS2aMDWFkZHJfc3RhdGVfUkmUS2aMDWFkZHJfc3RhdGVf
U0OUS2aMDWFkZHJfc3RhdGVfU0SUS2aMDWFkZHJfc3RhdGVfVE6US2aMDWFkZHJfc3RhdGVfVFiU
S2aMDWFkZHJfc3RhdGVfVVSUS2aMDWFkZHJfc3RhdGVfVkGUS2aMDWFkZHJfc3RhdGVfVlSUS2aM
DWFkZHJfc3RhdGVfV0GUS2aMDWFkZHJfc3RhdGVfV0mUS2aMDWFkZHJfc3RhdGVfV1aUS2aME2xh
c3RfcHltbnRfZF9BcHItMTGUS2aME2xhc3RfcHltbnRfZF9BcHItMTKUS2aME2xhc3RfcHltbnRf
ZF9BcHItMTOUS2aME2xhc3RfcHltbnRfZF9BcHItMTSUS2aME2xhc3RfcHltbnRfZF9BcHItMTWU
S2aME2xhc3RfcHltbnRfZF9BdWctMTCUS2aME2xhc3RfcHltbnRfZF9BdWctMTGUS2aME2xhc3Rf
cHltbnRfZF9BdWctMTKUS2aME2xhc3RfcHltbnRfZF9BdWctMTOUS2aME2xhc3RfcHltbnRfZF9B
dWctMTSUS2aME2xhc3RfcHltbnRfZF9BdWctMTWUS2aME2xhc3RfcHltbnRfZF9EZWMtMTCUS2aM
E2xhc3RfcHltbnRfZF9EZWMtMTGUS2aME2xhc3RfcHltbnRfZF9EZWMtMTKUS2aME2xhc3RfcHlt
bnRfZF9EZWMtMTOUS2aME2xhc3RfcHltbnRfZF9EZWMtMTSUS2aME2xhc3RfcHltbnRfZF9EZWMt
MTWUS2aME2xhc3RfcHltbnRfZF9GZWItMTGUS2aME2xhc3RfcHltbnRfZF9GZWItMTKUS2aME2xh
c3RfcHltbnRfZF9GZWItMTOUS2aME2xhc3RfcHltbnRfZF9GZWItMTSUS2aME2xhc3RfcHltbnRf
ZF9GZWItMTWUS2aME2xhc3RfcHltbnRfZF9KYW4tMTGUS2aME2xhc3RfcHltbnRfZF9KYW4tMTKU
S2aME2xhc3RfcHltbnRfZF9KYW4tMTOUS2aME2xhc3RfcHltbnRfZF9KYW4tMTSUS2aME2xhc3Rf
cHltbnRfZF9KYW4tMTWUS2aME2xhc3RfcHltbnRfZF9KYW4tMTaUS2aME2xhc3RfcHltbnRfZF9K
dWwtMTCUS2aME2xhc3RfcHltbnRfZF9KdWwtMTGUS2aME2xhc3RfcHltbnRfZF9KdWwtMTKUS2aM
E2xhc3RfcHltbnRfZF9KdWwtMTOUS2aME2xhc3RfcHltbnRfZF9KdWwtMTSUS2aME2xhc3RfcHlt
bnRfZF9KdWwtMTWUS2aME2xhc3RfcHltbnRfZF9KdW4tMTGUS2aME2xhc3RfcHltbnRfZF9KdW4t
MTKUS2aME2xhc3RfcHltbnRfZF9KdW4tMTOUS2aME2xhc3RfcHltbnRfZF9KdW4tMTSUS2aME2xh
c3RfcHltbnRfZF9KdW4tMTWUS2aME2xhc3RfcHltbnRfZF9NYXItMTGUS2aME2xhc3RfcHltbnRf
ZF9NYXItMTKUS2aME2xhc3RfcHltbnRfZF9NYXItMTOUS2aME2xhc3RfcHltbnRfZF9NYXItMTSU
S2aME2xhc3RfcHltbnRfZF9NYXItMTWUS2aME2xhc3RfcHltbnRfZF9NYXktMTGUS2aME2xhc3Rf
cHltbnRfZF9NYXktMTKUS2aME2xhc3RfcHltbnRfZF9NYXktMTOUS2aME2xhc3RfcHltbnRfZF9N
YXktMTSUS2aME2xhc3RfcHltbnRfZF9NYXktMTWUS2aME2xhc3RfcHltbnRfZF9Ob3YtMTCUS2aM
E2xhc3RfcHltbnRfZF9Ob3YtMTGUS2aME2xhc3RfcHltbnRfZF9Ob3YtMTKUS2aME2xhc3RfcHlt
bnRfZF9Ob3YtMTOUS2aME2xhc3RfcHltbnRfZF9Ob3YtMTSUS2aME2xhc3RfcHltbnRfZF9Ob3Yt
MTWUS2aME2xhc3RfcHltbnRfZF9PY3QtMTCUS2aME2xhc3RfcHltbnRfZF9PY3QtMTGUS2aME2xh
c3RfcHltbnRfZF9PY3QtMTKUS2aME2xhc3RfcHltbnRfZF9PY3QtMTOUS2aME2xhc3RfcHltbnRf
ZF9PY3QtMTSUS2aME2xhc3RfcHltbnRfZF9PY3QtMTWUS2aME2xhc3RfcHltbnRfZF9TZXAtMTCU
S2aME2xhc3RfcHltbnRfZF9TZXAtMTGUS2aME2xhc3RfcHltbnRfZF9TZXAtMTKUS2aME2xhc3Rf
cHltbnRfZF9TZXAtMTOUS2aME2xhc3RfcHltbnRfZF9TZXAtMTSUS2aMDHB5bW50X3BsYW5fbpRL
ZowTbmV4dF9weW1udF9kX0ZlYi0xNpRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0Fwci0xMZRLZowZ
bGFzdF9jcmVkaXRfcHVsbF9kX0Fwci0xMpRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0Fwci0xM5RL
ZowZbGFzdF9jcmVkaXRfcHVsbF9kX0Fwci0xNJRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0Fwci0x
NZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0F1Zy0xMJRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0F1
Zy0xMZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0F1Zy0xMpRLZowZbGFzdF9jcmVkaXRfcHVsbF9k
X0F1Zy0xM5RLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0F1Zy0xNJRLZowZbGFzdF9jcmVkaXRfcHVs
bF9kX0F1Zy0xNZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0RlYy0xMJRLZowZbGFzdF9jcmVkaXRf
cHVsbF9kX0RlYy0xMZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0RlYy0xMpRLZowZbGFzdF9jcmVk
aXRfcHVsbF9kX0RlYy0xM5RLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0RlYy0xNJRLZowZbGFzdF9j
cmVkaXRfcHVsbF9kX0RlYy0xNZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0ZlYi0xMZRLZowZbGFz
dF9jcmVkaXRfcHVsbF9kX0ZlYi0xMpRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0ZlYi0xM5RLZowZ
bGFzdF9jcmVkaXRfcHVsbF9kX0ZlYi0xNJRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0ZlYi0xNZRL
ZowZbGFzdF9jcmVkaXRfcHVsbF9kX0phbi0xMZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0phbi0x
MpRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0phbi0xM5RLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0ph
bi0xNJRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0phbi0xNZRLZowZbGFzdF9jcmVkaXRfcHVsbF9k
X0phbi0xNpRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0p1bC0xMJRLZowZbGFzdF9jcmVkaXRfcHVs
bF9kX0p1bC0xMZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0p1bC0xMpRLZowZbGFzdF9jcmVkaXRf
cHVsbF9kX0p1bC0xM5RLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0p1bC0xNJRLZowZbGFzdF9jcmVk
aXRfcHVsbF9kX0p1bC0xNZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0p1bi0xMJRLZowZbGFzdF9j
cmVkaXRfcHVsbF9kX0p1bi0xMZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0p1bi0xMpRLZowZbGFz
dF9jcmVkaXRfcHVsbF9kX0p1bi0xM5RLZowZbGFzdF9jcmVkaXRfcHVsbF9kX0p1bi0xNJRLZowZ
bGFzdF9jcmVkaXRfcHVsbF9kX0p1bi0xNZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX01hci0xMZRL
ZowZbGFzdF9jcmVkaXRfcHVsbF9kX01hci0xMpRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX01hci0x
M5RLZowZbGFzdF9jcmVkaXRfcHVsbF9kX01hci0xNJRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX01h
ci0xNZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX01heS0xMZRLZowZbGFzdF9jcmVkaXRfcHVsbF9k
X01heS0xMpRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX01heS0xM5RLZowZbGFzdF9jcmVkaXRfcHVs
bF9kX01heS0xNJRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX01heS0xNZRLZowZbGFzdF9jcmVkaXRf
cHVsbF9kX05vdi0xMJRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX05vdi0xMZRLZowZbGFzdF9jcmVk
aXRfcHVsbF9kX05vdi0xMpRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX05vdi0xM5RLZowZbGFzdF9j
cmVkaXRfcHVsbF9kX05vdi0xNJRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX05vdi0xNZRLZowZbGFz
dF9jcmVkaXRfcHVsbF9kX09jdC0xMJRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX09jdC0xMZRLZowZ
bGFzdF9jcmVkaXRfcHVsbF9kX09jdC0xMpRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX09jdC0xM5RL
ZowZbGFzdF9jcmVkaXRfcHVsbF9kX09jdC0xNJRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX09jdC0x
NZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX1NlcC0xMJRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX1Nl
cC0xMZRLZowZbGFzdF9jcmVkaXRfcHVsbF9kX1NlcC0xMpRLZowZbGFzdF9jcmVkaXRfcHVsbF9k
X1NlcC0xM5RLZowZbGFzdF9jcmVkaXRfcHVsbF9kX1NlcC0xNJRLZnV1YmgLKYGUfZQoaA59lCiM
CmF0dHJfcGFpcnOUXZRdlChqIAEAAEtkhpRqIAEAAEtkhpRlYWgGSwJ1aBZ9lCiMCWxvYW5fYW1u
dJRLZYwIaW50X3JhdGWUS2WMCmFubnVhbF9pbmOUS2WMA2R0aZRLZYwOaW5xX2xhc3RfNm10aHOU
S2WMCG9wZW5fYWNjlEtljA9mdW5kZWRfYW1udF9pbnaUS2WMCXJldm9sX2JhbJRLZYwJdG90YWxf
YWNjlEtljA5lbXBfbGVuZ3RoX2ludJRLZYwbbXRoc19zaW5jZV9lYXJsaWVzdF9jcl9saW5llEtl
jAh0ZXJtX2ludJRLZYwSbXRoc19zaW5jZV9pc3N1ZV9klEtljA1vdXRfcHJuY3BfaW52lEtljA90
b3RhbF9weW1udF9pbnaUS2WMCGdvb2RfYmFklEtldWgjfZQojAlzdWJfZ3JhZGWUS2WMCmVtcF9s
ZW5ndGiUS2WMDmhvbWVfb3duZXJzaGlwlEtljBN2ZXJpZmljYXRpb25fc3RhdHVzlEtljAdwdXJw
b3NllEtljAphZGRyX3N0YXRllEtljBNpbml0aWFsX2xpc3Rfc3RhdHVzlEtljAxsYXN0X3B5bW50
X2SUS2WMCnB5bW50X3BsYW6US2WMDG5leHRfcHltbnRfZJRLZYwSbGFzdF9jcmVkaXRfcHVsbF9k
lEtldXViaAspgZR9lChoDn2UKGodAQAAXZRdlCiMCVJvdyBpbmRleJRLZIaUalECAABLZIaUZWFo
BksCdWgWfZQoaiQBAABLZWolAQAAS2VqJgEAAEtlaicBAABLZWooAQAAS2VqKQEAAEtlaioBAABL
ZWorAQAAS2VqLAEAAEtlai0BAABLZWouAQAAS2VqLwEAAEtlajABAABLZWoxAQAAS2VqMgEAAEtl
ajMBAABLZXVoI32UKIwOdGVybV8zNiBtb250aHOUS2aMDHN1Yl9ncmFkZV9BMZRLZowMc3ViX2dy
YWRlX0EylEtmjAxzdWJfZ3JhZGVfQTOUS2aMDHN1Yl9ncmFkZV9BNJRLZowMc3ViX2dyYWRlX0E1
lEtmjAxzdWJfZ3JhZGVfQjGUS2aMDHN1Yl9ncmFkZV9CMpRLZowMc3ViX2dyYWRlX0IzlEtmjAxz
dWJfZ3JhZGVfQjSUS2aMDHN1Yl9ncmFkZV9CNZRLZowMc3ViX2dyYWRlX0MxlEtmjAxzdWJfZ3Jh
ZGVfQzKUS2aMDHN1Yl9ncmFkZV9DM5RLZowMc3ViX2dyYWRlX0M0lEtmjAxzdWJfZ3JhZGVfQzWU
S2aMDHN1Yl9ncmFkZV9EMZRLZowMc3ViX2dyYWRlX0QylEtmjAxzdWJfZ3JhZGVfRDOUS2aMDHN1
Yl9ncmFkZV9ENJRLZowMc3ViX2dyYWRlX0Q1lEtmjAxzdWJfZ3JhZGVfRTGUS2aMDHN1Yl9ncmFk
ZV9FMpRLZowMc3ViX2dyYWRlX0UzlEtmjAxzdWJfZ3JhZGVfRTSUS2aMDHN1Yl9ncmFkZV9FNZRL
ZowMc3ViX2dyYWRlX0YxlEtmjAxzdWJfZ3JhZGVfRjKUS2aMDHN1Yl9ncmFkZV9GM5RLZowMc3Vi
X2dyYWRlX0Y0lEtmjAxzdWJfZ3JhZGVfRjWUS2aMDHN1Yl9ncmFkZV9HMZRLZowMc3ViX2dyYWRl
X0cylEtmjAxzdWJfZ3JhZGVfRzOUS2aMDHN1Yl9ncmFkZV9HNJRLZowRZW1wX2xlbmd0aF8xIHll
YXKUS2aMEmVtcF9sZW5ndGhfMiB5ZWFyc5RLZowSZW1wX2xlbmd0aF8zIHllYXJzlEtmjBJlbXBf
bGVuZ3RoXzQgeWVhcnOUS2aMEmVtcF9sZW5ndGhfNSB5ZWFyc5RLZowSZW1wX2xlbmd0aF82IHll
YXJzlEtmjBJlbXBfbGVuZ3RoXzcgeWVhcnOUS2aMEmVtcF9sZW5ndGhfOCB5ZWFyc5RLZowSZW1w
X2xlbmd0aF85IHllYXJzlEtmjBRlbXBfbGVuZ3RoXzEwKyB5ZWFyc5RLZowXaG9tZV9vd25lcnNo
aXBfTU9SVEdBR0WUS2aMFGhvbWVfb3duZXJzaGlwX09USEVSlEtmjBJob21lX293bmVyc2hpcF9P
V06US2aMIHZlcmlmaWNhdGlvbl9zdGF0dXNfTm90IFZlcmlmaWVklEtmjCN2ZXJpZmljYXRpb25f
c3RhdHVzX1NvdXJjZSBWZXJpZmllZJRLZowLcHVycG9zZV9jYXKUS2aME3B1cnBvc2VfY3JlZGl0
X2NhcmSUS2aMGnB1cnBvc2VfZGVidF9jb25zb2xpZGF0aW9ulEtmjBNwdXJwb3NlX2VkdWNhdGlv
bmFslEtmjBhwdXJwb3NlX2hvbWVfaW1wcm92ZW1lbnSUS2aMDXB1cnBvc2VfaG91c2WUS2aMFnB1
cnBvc2VfbWFqb3JfcHVyY2hhc2WUS2aMD3B1cnBvc2VfbWVkaWNhbJRLZowOcHVycG9zZV9tb3Zp
bmeUS2aMDXB1cnBvc2Vfb3RoZXKUS2aMGHB1cnBvc2VfcmVuZXdhYmxlX2VuZXJneZRLZowWcHVy
cG9zZV9zbWFsbF9idXNpbmVzc5RLZowQcHVycG9zZV92YWNhdGlvbpRLZowNYWRkcl9zdGF0ZV9B
S5RLZowNYWRkcl9zdGF0ZV9BTJRLZowNYWRkcl9zdGF0ZV9BUpRLZowNYWRkcl9zdGF0ZV9BWpRL
ZowNYWRkcl9zdGF0ZV9DQZRLZowNYWRkcl9zdGF0ZV9DT5RLZowNYWRkcl9zdGF0ZV9DVJRLZowN
YWRkcl9zdGF0ZV9EQ5RLZowNYWRkcl9zdGF0ZV9ERZRLZowNYWRkcl9zdGF0ZV9GTJRLZowNYWRk
cl9zdGF0ZV9HQZRLZowNYWRkcl9zdGF0ZV9ISZRLZowNYWRkcl9zdGF0ZV9JQZRLZowNYWRkcl9z
dGF0ZV9JTJRLZowNYWRkcl9zdGF0ZV9LU5RLZowNYWRkcl9zdGF0ZV9LWZRLZowNYWRkcl9zdGF0
ZV9MQZRLZowNYWRkcl9zdGF0ZV9NQZRLZowNYWRkcl9zdGF0ZV9NRJRLZowNYWRkcl9zdGF0ZV9N
SZRLZowNYWRkcl9zdGF0ZV9NTpRLZowNYWRkcl9zdGF0ZV9NT5RLZowNYWRkcl9zdGF0ZV9NU5RL
ZowNYWRkcl9zdGF0ZV9NVJRLZowNYWRkcl9zdGF0ZV9OQ5RLZowNYWRkcl9zdGF0ZV9OSJRLZowN
YWRkcl9zdGF0ZV9OSpRLZowNYWRkcl9zdGF0ZV9OTZRLZowNYWRkcl9zdGF0ZV9OVpRLZowNYWRk
cl9zdGF0ZV9OWZRLZowNYWRkcl9zdGF0ZV9PSJRLZowNYWRkcl9zdGF0ZV9PS5RLZowNYWRkcl9z
dGF0ZV9PUpRLZowNYWRkcl9zdGF0ZV9QQZRLZowNYWRkcl9zdGF0ZV9SSZRLZowNYWRkcl9zdGF0
ZV9TQ5RLZowNYWRkcl9zdGF0ZV9TRJRLZowNYWRkcl9zdGF0ZV9UTpRLZowNYWRkcl9zdGF0ZV9U
WJRLZowNYWRkcl9zdGF0ZV9VVJRLZowNYWRkcl9zdGF0ZV9WQZRLZowNYWRkcl9zdGF0ZV9WVJRL
ZowNYWRkcl9zdGF0ZV9XQZRLZowNYWRkcl9zdGF0ZV9XSZRLZowNYWRkcl9zdGF0ZV9XVpRLZowT
bGFzdF9weW1udF9kX0Fwci0xMZRLZowTbGFzdF9weW1udF9kX0Fwci0xMpRLZowTbGFzdF9weW1u
dF9kX0Fwci0xM5RLZowTbGFzdF9weW1udF9kX0Fwci0xNJRLZowTbGFzdF9weW1udF9kX0Fwci0x
NZRLZowTbGFzdF9weW1udF9kX0F1Zy0xMJRLZowTbGFzdF9weW1udF9kX0F1Zy0xMZRLZowTbGFz
dF9weW1udF9kX0F1Zy0xMpRLZowTbGFzdF9weW1udF9kX0F1Zy0xM5RLZowTbGFzdF9weW1udF9k
X0F1Zy0xNJRLZowTbGFzdF9weW1udF9kX0F1Zy0xNZRLZowTbGFzdF9weW1udF9kX0RlYy0xMJRL
ZowTbGFzdF9weW1udF9kX0RlYy0xMZRLZowTbGFzdF9weW1udF9kX0RlYy0xMpRLZowTbGFzdF9w
eW1udF9kX0RlYy0xM5RLZowTbGFzdF9weW1udF9kX0RlYy0xNJRLZowTbGFzdF9weW1udF9kX0Rl
Yy0xNZRLZowTbGFzdF9weW1udF9kX0ZlYi0xMZRLZowTbGFzdF9weW1udF9kX0ZlYi0xMpRLZowT
bGFzdF9weW1udF9kX0ZlYi0xM5RLZowTbGFzdF9weW1udF9kX0ZlYi0xNJRLZowTbGFzdF9weW1u
dF9kX0ZlYi0xNZRLZowTbGFzdF9weW1udF9kX0phbi0xMZRLZowTbGFzdF9weW1udF9kX0phbi0x
MpRLZowTbGFzdF9weW1udF9kX0phbi0xM5RLZowTbGFzdF9weW1udF9kX0phbi0xNJRLZowTbGFz
dF9weW1udF9kX0phbi0xNZRLZowTbGFzdF9weW1udF9kX0phbi0xNpRLZowTbGFzdF9weW1udF9k
X0p1bC0xMJRLZowTbGFzdF9weW1udF9kX0p1bC0xMZRLZowTbGFzdF9weW1udF9kX0p1bC0xMpRL
ZowTbGFzdF9weW1udF9kX0p1bC0xM5RLZowTbGFzdF9weW1udF9kX0p1bC0xNJRLZowTbGFzdF9w
eW1udF9kX0p1bC0xNZRLZowTbGFzdF9weW1udF9kX0p1bi0xMZRLZowTbGFzdF9weW1udF9kX0p1
bi0xMpRLZowTbGFzdF9weW1udF9kX0p1bi0xM5RLZowTbGFzdF9weW1udF9kX0p1bi0xNJRLZowT
bGFzdF9weW1udF9kX0p1bi0xNZRLZowTbGFzdF9weW1udF9kX01hci0xMZRLZowTbGFzdF9weW1u
dF9kX01hci0xMpRLZowTbGFzdF9weW1udF9kX01hci0xM5RLZowTbGFzdF9weW1udF9kX01hci0x
NJRLZowTbGFzdF9weW1udF9kX01hci0xNZRLZowTbGFzdF9weW1udF9kX01heS0xMZRLZowTbGFz
dF9weW1udF9kX01heS0xMpRLZowTbGFzdF9weW1udF9kX01heS0xM5RLZowTbGFzdF9weW1udF9k
X01heS0xNJRLZowTbGFzdF9weW1udF9kX01heS0xNZRLZowTbGFzdF9weW1udF9kX05vdi0xMJRL
ZowTbGFzdF9weW1udF9kX05vdi0xMZRLZowTbGFzdF9weW1udF9kX05vdi0xMpRLZowTbGFzdF9w
eW1udF9kX05vdi0xM5RLZowTbGFzdF9weW1udF9kX05vdi0xNJRLZowTbGFzdF9weW1udF9kX05v
di0xNZRLZowTbGFzdF9weW1udF9kX09jdC0xMJRLZowTbGFzdF9weW1udF9kX09jdC0xMZRLZowT
bGFzdF9weW1udF9kX09jdC0xMpRLZowTbGFzdF9weW1udF9kX09jdC0xM5RLZowTbGFzdF9weW1u
dF9kX09jdC0xNJRLZowTbGFzdF9weW1udF9kX09jdC0xNZRLZowTbGFzdF9weW1udF9kX1NlcC0x
MJRLZowTbGFzdF9weW1udF9kX1NlcC0xMZRLZowTbGFzdF9weW1udF9kX1NlcC0xMpRLZowTbGFz
dF9weW1udF9kX1NlcC0xM5RLZowTbGFzdF9weW1udF9kX1NlcC0xNJRLZowMcHltbnRfcGxhbl9u
lEtmjBNuZXh0X3B5bW50X2RfRmViLTE2lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfQXByLTExlEtm
jBlsYXN0X2NyZWRpdF9wdWxsX2RfQXByLTEylEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfQXByLTEz
lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfQXByLTE0lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfQXBy
LTE1lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfQXVnLTEwlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2Rf
QXVnLTExlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfQXVnLTEylEtmjBlsYXN0X2NyZWRpdF9wdWxs
X2RfQXVnLTEzlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfQXVnLTE0lEtmjBlsYXN0X2NyZWRpdF9w
dWxsX2RfQXVnLTE1lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfRGVjLTEwlEtmjBlsYXN0X2NyZWRp
dF9wdWxsX2RfRGVjLTExlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfRGVjLTEylEtmjBlsYXN0X2Ny
ZWRpdF9wdWxsX2RfRGVjLTEzlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfRGVjLTE0lEtmjBlsYXN0
X2NyZWRpdF9wdWxsX2RfRGVjLTE1lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfRmViLTExlEtmjBls
YXN0X2NyZWRpdF9wdWxsX2RfRmViLTEylEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfRmViLTEzlEtm
jBlsYXN0X2NyZWRpdF9wdWxsX2RfRmViLTE0lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfRmViLTE1
lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfSmFuLTExlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfSmFu
LTEylEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfSmFuLTEzlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2Rf
SmFuLTE0lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfSmFuLTE1lEtmjBlsYXN0X2NyZWRpdF9wdWxs
X2RfSmFuLTE2lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfSnVsLTEwlEtmjBlsYXN0X2NyZWRpdF9w
dWxsX2RfSnVsLTExlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfSnVsLTEylEtmjBlsYXN0X2NyZWRp
dF9wdWxsX2RfSnVsLTEzlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfSnVsLTE0lEtmjBlsYXN0X2Ny
ZWRpdF9wdWxsX2RfSnVsLTE1lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfSnVuLTEwlEtmjBlsYXN0
X2NyZWRpdF9wdWxsX2RfSnVuLTExlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfSnVuLTEylEtmjBls
YXN0X2NyZWRpdF9wdWxsX2RfSnVuLTEzlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfSnVuLTE0lEtm
jBlsYXN0X2NyZWRpdF9wdWxsX2RfSnVuLTE1lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfTWFyLTEx
lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfTWFyLTEylEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfTWFy
LTEzlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfTWFyLTE0lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2Rf
TWFyLTE1lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfTWF5LTExlEtmjBlsYXN0X2NyZWRpdF9wdWxs
X2RfTWF5LTEylEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfTWF5LTEzlEtmjBlsYXN0X2NyZWRpdF9w
dWxsX2RfTWF5LTE0lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfTWF5LTE1lEtmjBlsYXN0X2NyZWRp
dF9wdWxsX2RfTm92LTEwlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfTm92LTExlEtmjBlsYXN0X2Ny
ZWRpdF9wdWxsX2RfTm92LTEylEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfTm92LTEzlEtmjBlsYXN0
X2NyZWRpdF9wdWxsX2RfTm92LTE0lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfTm92LTE1lEtmjBls
YXN0X2NyZWRpdF9wdWxsX2RfT2N0LTEwlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfT2N0LTExlEtm
jBlsYXN0X2NyZWRpdF9wdWxsX2RfT2N0LTEylEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfT2N0LTEz
lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfT2N0LTE0lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfT2N0
LTE1lEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfU2VwLTEwlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2Rf
U2VwLTExlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfU2VwLTEylEtmjBlsYXN0X2NyZWRpdF9wdWxs
X2RfU2VwLTEzlEtmjBlsYXN0X2NyZWRpdF9wdWxsX2RfU2VwLTE0lEtmdXViaAspgZR9lChoDn2U
KGodAQAAXZRdlChqUQIAAEtkhpRqUQIAAEtkhpRlYWgGSwJ1aBZ9lChqJAEAAEtlaiUBAABLZWom
AQAAS2VqJwEAAEtlaigBAABLZWopAQAAS2VqKgEAAEtlaisBAABLZWosAQAAS2VqLQEAAEtlai4B
AABLZWovAQAAS2VqMAEAAEtlajEBAABLZWoyAQAAS2VqMwEAAEtldWgjfZQojA50ZXJtXzM2IG1v
bnRoc5RLZowHZ3JhZGVfQZRLZowHZ3JhZGVfQpRLZowHZ3JhZGVfQ5RLZowHZ3JhZGVfRJRLZowH
Z3JhZGVfRZRLZowHZ3JhZGVfRpRLZowMc3ViX2dyYWRlX0ExlEtmjAxzdWJfZ3JhZGVfQTKUS2aM
DHN1Yl9ncmFkZV9BM5RLZowMc3ViX2dyYWRlX0E0lEtmjAxzdWJfZ3JhZGVfQTWUS2aMDHN1Yl9n
cmFkZV9CMZRLZowMc3ViX2dyYWRlX0IylEtmjAxzdWJfZ3JhZGVfQjOUS2aMDHN1Yl9ncmFkZV9C
NJRLZowMc3ViX2dyYWRlX0I1lEtmjAxzdWJfZ3JhZGVfQzGUS2aMDHN1Yl9ncmFkZV9DMpRLZowM
c3ViX2dyYWRlX0MzlEtmjAxzdWJfZ3JhZGVfQzSUS2aMDHN1Yl9ncmFkZV9DNZRLZowMc3ViX2dy
YWRlX0QxlEtmjAxzdWJfZ3JhZGVfRDKUS2aMDHN1Yl9ncmFkZV9EM5RLZowMc3ViX2dyYWRlX0Q0
lEtmjAxzdWJfZ3JhZGVfRDWUS2aMDHN1Yl9ncmFkZV9FMZRLZowMc3ViX2dyYWRlX0UylEtmjAxz
dWJfZ3JhZGVfRTOUS2aMDHN1Yl9ncmFkZV9FNJRLZowMc3ViX2dyYWRlX0U1lEtmjAxzdWJfZ3Jh
ZGVfRjGUS2aMDHN1Yl9ncmFkZV9GMpRLZowMc3ViX2dyYWRlX0YzlEtmjAxzdWJfZ3JhZGVfRjSU
S2aMDHN1Yl9ncmFkZV9GNZRLZowMc3ViX2dyYWRlX0cxlEtmjAxzdWJfZ3JhZGVfRzKUS2aMDHN1
Yl9ncmFkZV9HM5RLZowMc3ViX2dyYWRlX0c0lEtmjBFlbXBfbGVuZ3RoXzEgeWVhcpRLZowSZW1w
X2xlbmd0aF8yIHllYXJzlEtmjBJlbXBfbGVuZ3RoXzMgeWVhcnOUS2aMEmVtcF9sZW5ndGhfNCB5
ZWFyc5RLZowSZW1wX2xlbmd0aF81IHllYXJzlEtmjBJlbXBfbGVuZ3RoXzYgeWVhcnOUS2aMEmVt
cF9sZW5ndGhfNyB5ZWFyc5RLZowSZW1wX2xlbmd0aF84IHllYXJzlEtmjBJlbXBfbGVuZ3RoXzkg
eWVhcnOUS2aMFGVtcF9sZW5ndGhfMTArIHllYXJzlEtmjBdob21lX293bmVyc2hpcF9NT1JUR0FH
RZRLZowUaG9tZV9vd25lcnNoaXBfT1RIRVKUS2aMEmhvbWVfb3duZXJzaGlwX09XTpRLZowgdmVy
aWZpY2F0aW9uX3N0YXR1c19Ob3QgVmVyaWZpZWSUS2aMI3ZlcmlmaWNhdGlvbl9zdGF0dXNfU291
cmNlIFZlcmlmaWVklEtmjAtwdXJwb3NlX2NhcpRLZowTcHVycG9zZV9jcmVkaXRfY2FyZJRLZowa
cHVycG9zZV9kZWJ0X2NvbnNvbGlkYXRpb26US2aME3B1cnBvc2VfZWR1Y2F0aW9uYWyUS2aMGHB1
cnBvc2VfaG9tZV9pbXByb3ZlbWVudJRLZowNcHVycG9zZV9ob3VzZZRLZowWcHVycG9zZV9tYWpv
cl9wdXJjaGFzZZRLZowPcHVycG9zZV9tZWRpY2FslEtmjA5wdXJwb3NlX21vdmluZ5RLZowNcHVy
cG9zZV9vdGhlcpRLZowYcHVycG9zZV9yZW5ld2FibGVfZW5lcmd5lEtmjBZwdXJwb3NlX3NtYWxs
X2J1c2luZXNzlEtmjBBwdXJwb3NlX3ZhY2F0aW9ulEtmjA1hZGRyX3N0YXRlX0FLlEtmjA1hZGRy
X3N0YXRlX0FMlEtmjA1hZGRyX3N0YXRlX0FSlEtmjA1hZGRyX3N0YXRlX0FalEtmjA1hZGRyX3N0
YXRlX0NBlEtmjA1hZGRyX3N0YXRlX0NPlEtmjA1hZGRyX3N0YXRlX0NUlEtmjA1hZGRyX3N0YXRl
X0RDlEtmjA1hZGRyX3N0YXRlX0RFlEtmjA1hZGRyX3N0YXRlX0ZMlEtmjA1hZGRyX3N0YXRlX0dB
lEtmjA1hZGRyX3N0YXRlX0hJlEtmjA1hZGRyX3N0YXRlX0lBlEtmjA1hZGRyX3N0YXRlX0lMlEtm
jA1hZGRyX3N0YXRlX0tTlEtmjA1hZGRyX3N0YXRlX0tZlEtmjA1hZGRyX3N0YXRlX0xBlEtmjA1h
ZGRyX3N0YXRlX01BlEtmjA1hZGRyX3N0YXRlX01ElEtmjA1hZGRyX3N0YXRlX01JlEtmjA1hZGRy
X3N0YXRlX01OlEtmjA1hZGRyX3N0YXRlX01PlEtmjA1hZGRyX3N0YXRlX01TlEtmjA1hZGRyX3N0
YXRlX01UlEtmjA1hZGRyX3N0YXRlX05DlEtmjA1hZGRyX3N0YXRlX05IlEtmjA1hZGRyX3N0YXRl
X05KlEtmjA1hZGRyX3N0YXRlX05NlEtmjA1hZGRyX3N0YXRlX05WlEtmjA1hZGRyX3N0YXRlX05Z
lEtmjA1hZGRyX3N0YXRlX09IlEtmjA1hZGRyX3N0YXRlX09LlEtmjA1hZGRyX3N0YXRlX09SlEtm
jA1hZGRyX3N0YXRlX1BBlEtmjA1hZGRyX3N0YXRlX1JJlEtmjA1hZGRyX3N0YXRlX1NDlEtmjA1h
ZGRyX3N0YXRlX1NElEtmjA1hZGRyX3N0YXRlX1ROlEtmjA1hZGRyX3N0YXRlX1RYlEtmjA1hZGRy
X3N0YXRlX1VUlEtmjA1hZGRyX3N0YXRlX1ZBlEtmjA1hZGRyX3N0YXRlX1ZUlEtmjA1hZGRyX3N0
YXRlX1dBlEtmjA1hZGRyX3N0YXRlX1dJlEtmjA1hZGRyX3N0YXRlX1dWlEtmjBNsYXN0X3B5bW50
X2RfQXByLTExlEtmjBNsYXN0X3B5bW50X2RfQXByLTEylEtmjBNsYXN0X3B5bW50X2RfQXByLTEz
lEtmjBNsYXN0X3B5bW50X2RfQXByLTE0lEtmjBNsYXN0X3B5bW50X2RfQXByLTE1lEtmjBNsYXN0
X3B5bW50X2RfQXVnLTEwlEtmjBNsYXN0X3B5bW50X2RfQXVnLTExlEtmjBNsYXN0X3B5bW50X2Rf
QXVnLTEylEtmjBNsYXN0X3B5bW50X2RfQXVnLTEzlEtmjBNsYXN0X3B5bW50X2RfQXVnLTE0lEtm
jBNsYXN0X3B5bW50X2RfQXVnLTE1lEtmjBNsYXN0X3B5bW50X2RfRGVjLTEwlEtmjBNsYXN0X3B5
bW50X2RfRGVjLTExlEtmjBNsYXN0X3B5bW50X2RfRGVjLTEylEtmjBNsYXN0X3B5bW50X2RfRGVj
LTEzlEtmjBNsYXN0X3B5bW50X2RfRGVjLTE0lEtmjBNsYXN0X3B5bW50X2RfRGVjLTE1lEtmjBNs
YXN0X3B5bW50X2RfRmViLTExlEtmjBNsYXN0X3B5bW50X2RfRmViLTEylEtmjBNsYXN0X3B5bW50
X2RfRmViLTEzlEtmjBNsYXN0X3B5bW50X2RfRmViLTE0lEtmjBNsYXN0X3B5bW50X2RfRmViLTE1
lEtmjBNsYXN0X3B5bW50X2RfSmFuLTExlEtmjBNsYXN0X3B5bW50X2RfSmFuLTEylEtmjBNsYXN0
X3B5bW50X2RfSmFuLTEzlEtmjBNsYXN0X3B5bW50X2RfSmFuLTE0lEtmjBNsYXN0X3B5bW50X2Rf
SmFuLTE1lEtmjBNsYXN0X3B5bW50X2RfSmFuLTE2lEtmjBNsYXN0X3B5bW50X2RfSnVsLTEwlEtm
jBNsYXN0X3B5bW50X2RfSnVsLTExlEtmjBNsYXN0X3B5bW50X2RfSnVsLTEylEtmjBNsYXN0X3B5
bW50X2RfSnVsLTEzlEtmjBNsYXN0X3B5bW50X2RfSnVsLTE0lEtmjBNsYXN0X3B5bW50X2RfSnVs
LTE1lEtmjBNsYXN0X3B5bW50X2RfSnVuLTExlEtmjBNsYXN0X3B5bW50X2RfSnVuLTEylEtmjBNs
YXN0X3B5bW50X2RfSnVuLTEzlEtmjBNsYXN0X3B5bW50X2RfSnVuLTE0lEtmjBNsYXN0X3B5bW50
X2RfSnVuLTE1lEtmjBNsYXN0X3B5bW50X2RfTWFyLTExlEtmjBNsYXN0X3B5bW50X2RfTWFyLTEy
lEtmjBNsYXN0X3B5bW50X2RfTWFyLTEzlEtmjBNsYXN0X3B5bW50X2RfTWFyLTE0lEtmjBNsYXN0
X3B5bW50X2RfTWFyLTE1lEtmjBNsYXN0X3B5bW50X2RfTWF5LTExlEtmjBNsYXN0X3B5bW50X2Rf
TWF5LTEylEtmjBNsYXN0X3B5bW50X2RfTWF5LTEzlEtmjBNsYXN0X3B5bW50X2RfTWF5LTE0lEtm
jBNsYXN0X3B5bW50X2RfTWF5LTE1lEtmjBNsYXN0X3B5bW50X2RfTm92LTEwlEtmjBNsYXN0X3B5
bW50X2RfTm92LTExlEtmjBNsYXN0X3B5bW50X2RfTm92LTEylEtmjBNsYXN0X3B5bW50X2RfTm92
LTEzlEtmjBNsYXN0X3B5bW50X2RfTm92LTE0lEtmjBNsYXN0X3B5bW50X2RfTm92LTE1lEtmjBNs
YXN0X3B5bW50X2RfT2N0LTEwlEtmjBNsYXN0X3B5bW50X2RfT2N0LTExlEtmjBNsYXN0X3B5bW50
X2RfT2N0LTEylEtmjBNsYXN0X3B5bW50X2RfT2N0LTEzlEtmjBNsYXN0X3B5bW50X2RfT2N0LTE0
lEtmjBNsYXN0X3B5bW50X2RfT2N0LTE1lEtmjBNsYXN0X3B5bW50X2RfU2VwLTEwlEtmjBNsYXN0
X3B5bW50X2RfU2VwLTExlEtmjBNsYXN0X3B5bW50X2RfU2VwLTEylEtmjBNsYXN0X3B5bW50X2Rf
U2VwLTEzlEtmjBNsYXN0X3B5bW50X2RfU2VwLTE0lEtmjAxweW1udF9wbGFuX26US2aME25leHRf
cHltbnRfZF9GZWItMTaUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9BcHItMTGUS2aMGWxhc3RfY3Jl
ZGl0X3B1bGxfZF9BcHItMTKUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9BcHItMTOUS2aMGWxhc3Rf
Y3JlZGl0X3B1bGxfZF9BcHItMTSUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9BcHItMTWUS2aMGWxh
c3RfY3JlZGl0X3B1bGxfZF9BdWctMTCUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9BdWctMTGUS2aM
GWxhc3RfY3JlZGl0X3B1bGxfZF9BdWctMTKUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9BdWctMTOU
S2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9BdWctMTSUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9BdWct
MTWUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9EZWMtMTCUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9E
ZWMtMTGUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9EZWMtMTKUS2aMGWxhc3RfY3JlZGl0X3B1bGxf
ZF9EZWMtMTOUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9EZWMtMTSUS2aMGWxhc3RfY3JlZGl0X3B1
bGxfZF9EZWMtMTWUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9GZWItMTGUS2aMGWxhc3RfY3JlZGl0
X3B1bGxfZF9GZWItMTKUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9GZWItMTOUS2aMGWxhc3RfY3Jl
ZGl0X3B1bGxfZF9GZWItMTSUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9GZWItMTWUS2aMGWxhc3Rf
Y3JlZGl0X3B1bGxfZF9KYW4tMTGUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9KYW4tMTKUS2aMGWxh
c3RfY3JlZGl0X3B1bGxfZF9KYW4tMTOUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9KYW4tMTSUS2aM
GWxhc3RfY3JlZGl0X3B1bGxfZF9KYW4tMTWUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9KYW4tMTaU
S2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9KdWwtMTCUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9KdWwt
MTGUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9KdWwtMTKUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9K
dWwtMTOUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9KdWwtMTSUS2aMGWxhc3RfY3JlZGl0X3B1bGxf
ZF9KdWwtMTWUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9KdW4tMTCUS2aMGWxhc3RfY3JlZGl0X3B1
bGxfZF9KdW4tMTGUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9KdW4tMTKUS2aMGWxhc3RfY3JlZGl0
X3B1bGxfZF9KdW4tMTOUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9KdW4tMTSUS2aMGWxhc3RfY3Jl
ZGl0X3B1bGxfZF9KdW4tMTWUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9NYXItMTGUS2aMGWxhc3Rf
Y3JlZGl0X3B1bGxfZF9NYXItMTKUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9NYXItMTOUS2aMGWxh
c3RfY3JlZGl0X3B1bGxfZF9NYXItMTSUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9NYXItMTWUS2aM
GWxhc3RfY3JlZGl0X3B1bGxfZF9NYXktMTGUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9NYXktMTKU
S2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9NYXktMTOUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9NYXkt
MTSUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9NYXktMTWUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9O
b3YtMTCUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9Ob3YtMTGUS2aMGWxhc3RfY3JlZGl0X3B1bGxf
ZF9Ob3YtMTKUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9Ob3YtMTOUS2aMGWxhc3RfY3JlZGl0X3B1
bGxfZF9Ob3YtMTSUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9Ob3YtMTWUS2aMGWxhc3RfY3JlZGl0
X3B1bGxfZF9PY3QtMTCUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9PY3QtMTGUS2aMGWxhc3RfY3Jl
ZGl0X3B1bGxfZF9PY3QtMTKUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9PY3QtMTOUS2aMGWxhc3Rf
Y3JlZGl0X3B1bGxfZF9PY3QtMTSUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9PY3QtMTWUS2aMGWxh
c3RfY3JlZGl0X3B1bGxfZF9TZXAtMTCUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9TZXAtMTGUS2aM
GWxhc3RfY3JlZGl0X3B1bGxfZF9TZXAtMTKUS2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9TZXAtMTOU
S2aMGWxhc3RfY3JlZGl0X3B1bGxfZF9TZXAtMTSUS2Z1dWJoCymBlH2UKGgOfZQoah0BAABdlF2U
KGpRAgAAS2SGlGpRAgAAS2SGlGVhaAZLAnVoFn2UKGokAQAAS2VqJQEAAEtlaiYBAABLZWonAQAA
S2VqKAEAAEtlaikBAABLZWoqAQAAS2VqKwEAAEtlaiwBAABLZWotAQAAS2VqLgEAAEtlai8BAABL
ZWowAQAAS2WMCnB5bW50X3BsYW6US2VqMQEAAEtlajIBAABLZWozAQAAS2V1aCN9lChqUgMAAEtm
alMDAABLZmpUAwAAS2ZqVQMAAEtmalYDAABLZmpXAwAAS2ZqWAMAAEtmalkDAABLZmpaAwAAS2Zq
WwMAAEtmalwDAABLZmpdAwAAS2ZqXgMAAEtmal8DAABLZmpgAwAAS2ZqYQMAAEtmamIDAABLZmpj
AwAAS2ZqZAMAAEtmamUDAABLZmpmAwAAS2ZqZwMAAEtmamgDAABLZmppAwAAS2ZqagMAAEtmamsD
AABLZmpsAwAAS2ZqbQMAAEtmam4DAABLZmpvAwAAS2ZqcAMAAEtmanEDAABLZmpyAwAAS2ZqcwMA
AEtmanQDAABLZmp1AwAAS2ZqdgMAAEtmancDAABLZmp4AwAAS2ZqeQMAAEtmanoDAABLZmp7AwAA
S2ZqfAMAAEtman0DAABLZmp+AwAAS2ZqfwMAAEtmaoADAABLZmqBAwAAS2ZqggMAAEtmaoMDAABL
ZmqEAwAAS2ZqhQMAAEtmaoYDAABLZmqHAwAAS2ZqiAMAAEtmaokDAABLZmqKAwAAS2ZqiwMAAEtm
aowDAABLZmqNAwAAS2ZqjgMAAEtmao8DAABLZmqQAwAAS2ZqkQMAAEtmapIDAABLZmqTAwAAS2Zq
lAMAAEtmapUDAABLZmqWAwAAS2ZqlwMAAEtmapgDAABLZmqZAwAAS2ZqmgMAAEtmapsDAABLZmqc
AwAAS2ZqnQMAAEtmap4DAABLZmqfAwAAS2ZqoAMAAEtmaqEDAABLZmqiAwAAS2ZqowMAAEtmaqQD
AABLZmqlAwAAS2ZqpgMAAEtmaqcDAABLZmqoAwAAS2ZqqQMAAEtmaqoDAABLZmqrAwAAS2ZqrAMA
AEtmaq0DAABLZmquAwAAS2ZqrwMAAEtmarADAABLZmqxAwAAS2ZqsgMAAEtmarMDAABLZmq0AwAA
S2ZqtQMAAEtmarYDAABLZmq3AwAAS2ZquAMAAEtmarkDAABLZmq6AwAAS2ZquwMAAEtmarwDAABL
Zmq9AwAAS2ZqvgMAAEtmar8DAABLZmrAAwAAS2ZqwQMAAEtmasIDAABLZmrDAwAAS2ZqxAMAAEtm
asUDAABLZmrGAwAAS2ZqxwMAAEtmasgDAABLZmrJAwAAS2ZqygMAAEtmassDAABLZmrMAwAAS2Zq
zQMAAEtmas4DAABLZmrPAwAAS2Zq0AMAAEtmatEDAABLZmrSAwAAS2Zq0wMAAEtmatQDAABLZmrV
AwAAS2Zq1gMAAEtmatcDAABLZmrYAwAAS2Zq2QMAAEtmatoDAABLZmrbAwAAS2Zq3AMAAEtmat0D
AABLZmreAwAAS2Zq3wMAAEtmauADAABLZmrhAwAAS2Zq4gMAAEtmauMDAABLZmrkAwAAS2Zq5QMA
AEtmauYDAABLZmrnAwAAS2Zq6AMAAEtmaukDAABLZmrqAwAAS2Zq6wMAAEtmauwDAABLZmrtAwAA
S2Zq7gMAAEtmau8DAABLZmrwAwAAS2Zq8QMAAEtmavIDAABLZmrzAwAAS2Zq9AMAAEtmavUDAABL
Zmr2AwAAS2Zq9wMAAEtmavgDAABLZmr5AwAAS2Zq+gMAAEtmavsDAABLZmr8AwAAS2Zq/QMAAEtm
av4DAABLZmr/AwAAS2ZqAAQAAEtmagEEAABLZmoCBAAAS2ZqAwQAAEtmagQEAABLZmoFBAAAS2Zq
BgQAAEtmagcEAABLZmoIBAAAS2ZqCQQAAEtmagoEAABLZmoLBAAAS2ZqDAQAAEtmag0EAABLZmoO
BAAAS2ZqDwQAAEtmahAEAABLZmoRBAAAS2ZqEgQAAEtmahMEAABLZmoUBAAAS2ZqFQQAAEtmahYE
AABLZmoXBAAAS2ZqGAQAAEtmahkEAABLZmoaBAAAS2ZqGwQAAEtmahwEAABLZmodBAAAS2ZqHgQA
AEtmah8EAABLZmogBAAAS2ZqIQQAAEtmaiIEAABLZmojBAAAS2ZqJAQAAEtmaiUEAABLZmomBAAA
S2ZqJwQAAEtmaigEAABLZmopBAAAS2ZqKgQAAEtmaisEAABLZmosBAAAS2ZqLQQAAEtmai4EAABL
ZmovBAAAS2ZqMAQAAEtmajEEAABLZmoyBAAAS2ZqMwQAAEtmajQEAABLZmo1BAAAS2ZqNgQAAEtm
ajcEAABLZmo4BAAAS2ZqOQQAAEtmajoEAABLZmo7BAAAS2ZqPAQAAEtmaj0EAABLZmo+BAAAS2Zq
PwQAAEtmakAEAABLZmpBBAAAS2ZqQgQAAEtmakMEAABLZmpEBAAAS2ZqRQQAAEtmakYEAABLZmpH
BAAAS2ZqSAQAAEtmakkEAABLZmpKBAAAS2Z1dWJoCymBlH2UKGgOfZQoah0BAABdlF2UKGpRAgAA
S2SGlGpRAgAAS2SGlGVhaAZLAnVoFn2UKGokAQAAS2VqJQEAAEtlaiYBAABLZWonAQAAS2VqKAEA
AEtlaikBAABLZWoqAQAAS2VqKwEAAEtlaiwBAABLZWotAQAAS2VqLgEAAEtlai8BAABLZWowAQAA
S2VqUwQAAEtlajEBAABLZWoyAQAAS2WMEmxhc3RfY3JlZGl0X3B1bGxfZJRLZWozAQAAS2V1aCN9
lChqUgMAAEtmalMDAABLZmpUAwAAS2ZqVQMAAEtmalYDAABLZmpXAwAAS2ZqWAMAAEtmalkDAABL
ZmpaAwAAS2ZqWwMAAEtmalwDAABLZmpdAwAAS2ZqXgMAAEtmal8DAABLZmpgAwAAS2ZqYQMAAEtm
amIDAABLZmpjAwAAS2ZqZAMAAEtmamUDAABLZmpmAwAAS2ZqZwMAAEtmamgDAABLZmppAwAAS2Zq
agMAAEtmamsDAABLZmpsAwAAS2ZqbQMAAEtmam4DAABLZmpvAwAAS2ZqcAMAAEtmanEDAABLZmpy
AwAAS2ZqcwMAAEtmanQDAABLZmp1AwAAS2ZqdgMAAEtmancDAABLZmp4AwAAS2ZqeQMAAEtmanoD
AABLZmp7AwAAS2ZqfAMAAEtman0DAABLZmp+AwAAS2ZqfwMAAEtmaoADAABLZmqBAwAAS2ZqggMA
AEtmaoMDAABLZmqEAwAAS2ZqhQMAAEtmaoYDAABLZmqHAwAAS2ZqiAMAAEtmaokDAABLZmqKAwAA
S2ZqiwMAAEtmaowDAABLZmqNAwAAS2ZqjgMAAEtmao8DAABLZmqQAwAAS2ZqkQMAAEtmapIDAABL
ZmqTAwAAS2ZqlAMAAEtmapUDAABLZmqWAwAAS2ZqlwMAAEtmapgDAABLZmqZAwAAS2ZqmgMAAEtm
apsDAABLZmqcAwAAS2ZqnQMAAEtmap4DAABLZmqfAwAAS2ZqoAMAAEtmaqEDAABLZmqiAwAAS2Zq
owMAAEtmaqQDAABLZmqlAwAAS2ZqpgMAAEtmaqcDAABLZmqoAwAAS2ZqqQMAAEtmaqoDAABLZmqr
AwAAS2ZqrAMAAEtmaq0DAABLZmquAwAAS2ZqrwMAAEtmarADAABLZmqxAwAAS2ZqsgMAAEtmarMD
AABLZmq0AwAAS2ZqtQMAAEtmarYDAABLZmq3AwAAS2ZquAMAAEtmarkDAABLZmq6AwAAS2ZquwMA
AEtmarwDAABLZmq9AwAAS2ZqvgMAAEtmar8DAABLZmrAAwAAS2ZqwQMAAEtmasIDAABLZmrDAwAA
S2ZqxAMAAEtmasUDAABLZmrGAwAAS2ZqxwMAAEtmasgDAABLZmrJAwAAS2ZqygMAAEtmassDAABL
ZmrMAwAAS2ZqzQMAAEtmas4DAABLZmrPAwAAS2Zq0AMAAEtmatEDAABLZmrSAwAAS2Zq0wMAAEtm
atQDAABLZmrVAwAAS2Zq1gMAAEtmatcDAABLZmrYAwAAS2Zq2QMAAEtmatoDAABLZmrbAwAAS2Zq
3AMAAEtmat0DAABLZmreAwAAS2Zq3wMAAEtmauADAABLZmrhAwAAS2Zq4gMAAEtmauMDAABLZmrk
AwAAS2Zq5QMAAEtmauYDAABLZmrnAwAAS2Zq6AMAAEtmaukDAABLZmrqAwAAS2Zq6wMAAEtmauwD
AABLZmrtAwAAS2Zq7gMAAEtmau8DAABLZmrwAwAAS2Zq8QMAAEtmavIDAABLZmrzAwAAS2Zq9AMA
AEtmavUDAABLZmr2AwAAS2Zq9wMAAEtmavgDAABLZmr5AwAAS2Zq+gMAAEtmavsDAABLZmr8AwAA
S2Zq/QMAAEtmav4DAABLZmr/AwAAS2ZqAAQAAEtmagEEAABLZmoCBAAAS2ZqAwQAAEtmagQEAABL
ZmoFBAAAS2ZqBgQAAEtmagcEAABLZmoIBAAAS2ZqCQQAAEtmagoEAABLZmoLBAAAS2ZqDAQAAEtm
ag0EAABLZmoOBAAAS2ZqDwQAAEtmahAEAABLZmoRBAAAS2ZqEgQAAEtmahMEAABLZmoUBAAAS2Zq
FQQAAEtmahYEAABLZmoXBAAAS2ZqGAQAAEtmahkEAABLZmoaBAAAS2ZqGwQAAEtmahwEAABLZmod
BAAAS2ZqHgQAAEtmah8EAABLZmogBAAAS2ZqIQQAAEtmaiIEAABLZmojBAAAS2ZqJAQAAEtmaiUE
AABLZmomBAAAS2ZqJwQAAEtmaigEAABLZmopBAAAS2ZqKgQAAEtmaisEAABLZmosBAAAS2ZqLQQA
AEtmai4EAABLZmovBAAAS2ZqMAQAAEtmajEEAABLZmoyBAAAS2ZqMwQAAEtmajQEAABLZmo1BAAA
S2ZqNgQAAEtmajcEAABLZmo4BAAAS2ZqOQQAAEtmajoEAABLZmo7BAAAS2ZqPAQAAEtmaj0EAABL
Zmo+BAAAS2ZqPwQAAEtmakAEAABLZmpBBAAAS2ZqQgQAAEtmakMEAABLZmpEBAAAS2ZqRQQAAEtm
akYEAABLZmpHBAAAS2ZqSAQAAEtmakkEAABLZmpKBAAAS2Z1dWJoCymBlH2UKGgOfZQoah0BAABd
lF2UKGpRAgAAS2SGlGpRAgAAS2SGlGVhaAZLAnVoFn2UKGokAQAAS2VqJQEAAEtlaiYBAABLZWon
AQAAS2VqKAEAAEtlaikBAABLZWoqAQAAS2VqKwEAAEtlaiwBAABLZWotAQAAS2VqLgEAAEtlai8B
AABLZWowAQAAS2VqUwQAAEtlajEBAABLZWoyAQAAS2WMDG5leHRfcHltbnRfZJRLZWpdBAAAS2Vq
MwEAAEtldWgjfZQoalIDAABLZmpTAwAAS2ZqVAMAAEtmalUDAABLZmpWAwAAS2ZqVwMAAEtmalgD
AABLZmpZAwAAS2ZqWgMAAEtmalsDAABLZmpcAwAAS2ZqXQMAAEtmal4DAABLZmpfAwAAS2ZqYAMA
AEtmamEDAABLZmpiAwAAS2ZqYwMAAEtmamQDAABLZmplAwAAS2ZqZgMAAEtmamcDAABLZmpoAwAA
S2ZqaQMAAEtmamoDAABLZmprAwAAS2ZqbAMAAEtmam0DAABLZmpuAwAAS2ZqbwMAAEtmanADAABL
ZmpxAwAAS2ZqcgMAAEtmanMDAABLZmp0AwAAS2ZqdQMAAEtmanYDAABLZmp3AwAAS2ZqeAMAAEtm
ankDAABLZmp6AwAAS2ZqewMAAEtmanwDAABLZmp9AwAAS2ZqfgMAAEtman8DAABLZmqAAwAAS2Zq
gQMAAEtmaoIDAABLZmqDAwAAS2ZqhAMAAEtmaoUDAABLZmqGAwAAS2ZqhwMAAEtmaogDAABLZmqJ
AwAAS2ZqigMAAEtmaosDAABLZmqMAwAAS2ZqjQMAAEtmao4DAABLZmqPAwAAS2ZqkAMAAEtmapED
AABLZmqSAwAAS2ZqkwMAAEtmapQDAABLZmqVAwAAS2ZqlgMAAEtmapcDAABLZmqYAwAAS2ZqmQMA
AEtmapoDAABLZmqbAwAAS2ZqnAMAAEtmap0DAABLZmqeAwAAS2ZqnwMAAEtmaqADAABLZmqhAwAA
S2ZqogMAAEtmaqMDAABLZmqkAwAAS2ZqpQMAAEtmaqYDAABLZmqnAwAAS2ZqqAMAAEtmaqkDAABL
ZmqqAwAAS2ZqqwMAAEtmaqwDAABLZmqtAwAAS2ZqrgMAAEtmaq8DAABLZmqwAwAAS2ZqsQMAAEtm
arIDAABLZmqzAwAAS2ZqtAMAAEtmarUDAABLZmq2AwAAS2ZqtwMAAEtmargDAABLZmq5AwAAS2Zq
ugMAAEtmarsDAABLZmq8AwAAS2ZqvQMAAEtmar4DAABLZmq/AwAAS2ZqwAMAAEtmasEDAABLZmrC
AwAAS2ZqwwMAAEtmasQDAABLZmrFAwAAS2ZqxgMAAEtmascDAABLZmrIAwAAS2ZqyQMAAEtmasoD
AABLZmrLAwAAS2ZqzAMAAEtmas0DAABLZmrOAwAAS2ZqzwMAAEtmatADAABLZmrRAwAAS2Zq0gMA
AEtmatMDAABLZmrUAwAAS2Zq1QMAAEtmatYDAABLZmrXAwAAS2Zq2AMAAEtmatkDAABLZmraAwAA
S2Zq2wMAAEtmatwDAABLZmrdAwAAS2Zq3gMAAEtmat8DAABLZmrgAwAAS2Zq4QMAAEtmauIDAABL
ZmrjAwAAS2Zq5AMAAEtmauUDAABLZmrmAwAAS2Zq5wMAAEtmaugDAABLZmrpAwAAS2Zq6gMAAEtm
ausDAABLZmrsAwAAS2Zq7QMAAEtmau4DAABLZmrvAwAAS2Zq8AMAAEtmavEDAABLZmryAwAAS2Zq
8wMAAEtmavQDAABLZmr1AwAAS2Zq9gMAAEtmavcDAABLZmr4AwAAS2Zq+QMAAEtmavoDAABLZmr7
AwAAS2Zq/AMAAEtmav0DAABLZmr+AwAAS2Zq/wMAAEtmagAEAABLZmoBBAAAS2ZqAgQAAEtmagME
AABLZmoEBAAAS2ZqBQQAAEtmagYEAABLZmoHBAAAS2ZqCAQAAEtmagkEAABLZmoKBAAAS2ZqCwQA
AEtmagwEAABLZmoNBAAAS2ZqDgQAAEtmag8EAABLZmoQBAAAS2ZqEQQAAEtmahIEAABLZmoTBAAA
S2ZqFAQAAEtmahUEAABLZmoWBAAAS2ZqFwQAAEtmahgEAABLZmoZBAAAS2ZqGgQAAEtmahsEAABL
ZmocBAAAS2ZqHQQAAEtmah4EAABLZmofBAAAS2ZqIAQAAEtmaiEEAABLZmoiBAAAS2ZqIwQAAEtm
aiQEAABLZmolBAAAS2ZqJgQAAEtmaicEAABLZmooBAAAS2ZqKQQAAEtmaioEAABLZmorBAAAS2Zq
LAQAAEtmai0EAABLZmouBAAAS2ZqLwQAAEtmajAEAABLZmoxBAAAS2ZqMgQAAEtmajMEAABLZmo0
BAAAS2ZqNQQAAEtmajYEAABLZmo3BAAAS2ZqOAQAAEtmajkEAABLZmo6BAAAS2ZqOwQAAEtmajwE
AABLZmo9BAAAS2ZqPgQAAEtmaj8EAABLZmpABAAAS2ZqQQQAAEtmakIEAABLZmpDBAAAS2ZqRAQA
AEtmakUEAABLZmpGBAAAS2ZqRwQAAEtmakgEAABLZmpJBAAAS2ZqSgQAAEtmdXViaAspgZR9lCho
Dn2UKGodAQAAXZRdlChqUQIAAEtkhpRqUQIAAEtkhpRlYWgGSwJ1aBZ9lChqJAEAAEtlaiUBAABL
ZWomAQAAS2VqJwEAAEtlaigBAABLZWopAQAAS2VqKgEAAEtlaisBAABLZWosAQAAS2VqLQEAAEtl
ai4BAABLZWovAQAAS2VqMAEAAEtlalMEAABLZWoxAQAAS2VqMgEAAEtlamcEAABLZWpdBAAAS2WM
EGFwcGxpY2F0aW9uX3R5cGWUS2VqMwEAAEtldWgjfZQoalIDAABLZmpTAwAAS2ZqVAMAAEtmalUD
AABLZmpWAwAAS2ZqVwMAAEtmalgDAABLZmpZAwAAS2ZqWgMAAEtmalsDAABLZmpcAwAAS2ZqXQMA
AEtmal4DAABLZmpfAwAAS2ZqYAMAAEtmamEDAABLZmpiAwAAS2ZqYwMAAEtmamQDAABLZmplAwAA
S2ZqZgMAAEtmamcDAABLZmpoAwAAS2ZqaQMAAEtmamoDAABLZmprAwAAS2ZqbAMAAEtmam0DAABL
ZmpuAwAAS2ZqbwMAAEtmanADAABLZmpxAwAAS2ZqcgMAAEtmanMDAABLZmp0AwAAS2ZqdQMAAEtm
anYDAABLZmp3AwAAS2ZqeAMAAEtmankDAABLZmp6AwAAS2ZqewMAAEtmanwDAABLZmp9AwAAS2Zq
fgMAAEtman8DAABLZmqAAwAAS2ZqgQMAAEtmaoIDAABLZmqDAwAAS2ZqhAMAAEtmaoUDAABLZmqG
AwAAS2ZqhwMAAEtmaogDAABLZmqJAwAAS2ZqigMAAEtmaosDAABLZmqMAwAAS2ZqjQMAAEtmao4D
AABLZmqPAwAAS2ZqkAMAAEtmapEDAABLZmqSAwAAS2ZqkwMAAEtmapQDAABLZmqVAwAAS2ZqlgMA
AEtmapcDAABLZmqYAwAAS2ZqmQMAAEtmapoDAABLZmqbAwAAS2ZqnAMAAEtmap0DAABLZmqeAwAA
S2ZqnwMAAEtmaqADAABLZmqhAwAAS2ZqogMAAEtmaqMDAABLZmqkAwAAS2ZqpQMAAEtmaqYDAABL
ZmqnAwAAS2ZqqAMAAEtmaqkDAABLZmqqAwAAS2ZqqwMAAEtmaqwDAABLZmqtAwAAS2ZqrgMAAEtm
aq8DAABLZmqwAwAAS2ZqsQMAAEtmarIDAABLZmqzAwAAS2ZqtAMAAEtmarUDAABLZmq2AwAAS2Zq
twMAAEtmargDAABLZmq5AwAAS2ZqugMAAEtmarsDAABLZmq8AwAAS2ZqvQMAAEtmar4DAABLZmq/
AwAAS2ZqwAMAAEtmasEDAABLZmrCAwAAS2ZqwwMAAEtmasQDAABLZmrFAwAAS2ZqxgMAAEtmascD
AABLZmrIAwAAS2ZqyQMAAEtmasoDAABLZmrLAwAAS2ZqzAMAAEtmas0DAABLZmrOAwAAS2ZqzwMA
AEtmatADAABLZmrRAwAAS2Zq0gMAAEtmatMDAABLZmrUAwAAS2Zq1QMAAEtmatYDAABLZmrXAwAA
S2Zq2AMAAEtmatkDAABLZmraAwAAS2Zq2wMAAEtmatwDAABLZmrdAwAAS2Zq3gMAAEtmat8DAABL
ZmrgAwAAS2Zq4QMAAEtmauIDAABLZmrjAwAAS2Zq5AMAAEtmauUDAABLZmrmAwAAS2Zq5wMAAEtm
augDAABLZmrpAwAAS2Zq6gMAAEtmausDAABLZmrsAwAAS2Zq7QMAAEtmau4DAABLZmrvAwAAS2Zq
8AMAAEtmavEDAABLZmryAwAAS2Zq8wMAAEtmavQDAABLZmr1AwAAS2Zq9gMAAEtmavcDAABLZmr4
AwAAS2Zq+QMAAEtmavoDAABLZmr7AwAAS2Zq/AMAAEtmav0DAABLZmr+AwAAS2Zq/wMAAEtmagAE
AABLZmoBBAAAS2ZqAgQAAEtmagMEAABLZmoEBAAAS2ZqBQQAAEtmagYEAABLZmoHBAAAS2ZqCAQA
AEtmagkEAABLZmoKBAAAS2ZqCwQAAEtmagwEAABLZmoNBAAAS2ZqDgQAAEtmag8EAABLZmoQBAAA
S2ZqEQQAAEtmahIEAABLZmoTBAAAS2ZqFAQAAEtmahUEAABLZmoWBAAAS2ZqFwQAAEtmahgEAABL
ZmoZBAAAS2ZqGgQAAEtmahsEAABLZmocBAAAS2ZqHQQAAEtmah4EAABLZmofBAAAS2ZqIAQAAEtm
aiEEAABLZmoiBAAAS2ZqIwQAAEtmaiQEAABLZmolBAAAS2ZqJgQAAEtmaicEAABLZmooBAAAS2Zq
KQQAAEtmaioEAABLZmorBAAAS2ZqLAQAAEtmai0EAABLZmouBAAAS2ZqLwQAAEtmajAEAABLZmox
BAAAS2ZqMgQAAEtmajMEAABLZmo0BAAAS2ZqNQQAAEtmajYEAABLZmo3BAAAS2ZqOAQAAEtmajkE
AABLZmo6BAAAS2ZqOwQAAEtmajwEAABLZmo9BAAAS2ZqPgQAAEtmaj8EAABLZmpABAAAS2ZqQQQA
AEtmakIEAABLZmpDBAAAS2ZqRAQAAEtmakUEAABLZmpGBAAAS2ZqRwQAAEtmakgEAABLZmpJBAAA
S2ZqSgQAAEtmdXViaAspgZR9lChoDn2UKGodAQAAXZRdlChqUQIAAEtkhpRqUQIAAEtkhpRlYWgG
SwJ1aBZ9lChqJAEAAEtlaiUBAABLZWomAQAAS2VqJwEAAEtlaigBAABLZWopAQAAS2VqKgEAAEtl
aisBAABLZWosAQAAS2VqLQEAAEtlai4BAABLZWovAQAAS2VqMAEAAEtlalMEAABLZWoxAQAAS2Vq
MgEAAEtlamcEAABLZWpdBAAAS2WMC3BvbGljeV9jb2RllEtlanEEAABLZWozAQAAS2V1aCN9lChq
UgMAAEtmalMDAABLZmpUAwAAS2ZqVQMAAEtmalYDAABLZmpXAwAAS2ZqWAMAAEtmalkDAABLZmpa
AwAAS2ZqWwMAAEtmalwDAABLZmpdAwAAS2ZqXgMAAEtmal8DAABLZmpgAwAAS2ZqYQMAAEtmamID
AABLZmpjAwAAS2ZqZAMAAEtmamUDAABLZmpmAwAAS2ZqZwMAAEtmamgDAABLZmppAwAAS2ZqagMA
AEtmamsDAABLZmpsAwAAS2ZqbQMAAEtmam4DAABLZmpvAwAAS2ZqcAMAAEtmanEDAABLZmpyAwAA
S2ZqcwMAAEtmanQDAABLZmp1AwAAS2ZqdgMAAEtmancDAABLZmp4AwAAS2ZqeQMAAEtmanoDAABL
Zmp7AwAAS2ZqfAMAAEtman0DAABLZmp+AwAAS2ZqfwMAAEtmaoADAABLZmqBAwAAS2ZqggMAAEtm
aoMDAABLZmqEAwAAS2ZqhQMAAEtmaoYDAABLZmqHAwAAS2ZqiAMAAEtmaokDAABLZmqKAwAAS2Zq
iwMAAEtmaowDAABLZmqNAwAAS2ZqjgMAAEtmao8DAABLZmqQAwAAS2ZqkQMAAEtmapIDAABLZmqT
AwAAS2ZqlAMAAEtmapUDAABLZmqWAwAAS2ZqlwMAAEtmapgDAABLZmqZAwAAS2ZqmgMAAEtmapsD
AABLZmqcAwAAS2ZqnQMAAEtmap4DAABLZmqfAwAAS2ZqoAMAAEtmaqEDAABLZmqiAwAAS2ZqowMA
AEtmaqQDAABLZmqlAwAAS2ZqpgMAAEtmaqcDAABLZmqoAwAAS2ZqqQMAAEtmaqoDAABLZmqrAwAA
S2ZqrAMAAEtmaq0DAABLZmquAwAAS2ZqrwMAAEtmarADAABLZmqxAwAAS2ZqsgMAAEtmarMDAABL
Zmq0AwAAS2ZqtQMAAEtmarYDAABLZmq3AwAAS2ZquAMAAEtmarkDAABLZmq6AwAAS2ZquwMAAEtm
arwDAABLZmq9AwAAS2ZqvgMAAEtmar8DAABLZmrAAwAAS2ZqwQMAAEtmasIDAABLZmrDAwAAS2Zq
xAMAAEtmasUDAABLZmrGAwAAS2ZqxwMAAEtmasgDAABLZmrJAwAAS2ZqygMAAEtmassDAABLZmrM
AwAAS2ZqzQMAAEtmas4DAABLZmrPAwAAS2Zq0AMAAEtmatEDAABLZmrSAwAAS2Zq0wMAAEtmatQD
AABLZmrVAwAAS2Zq1gMAAEtmatcDAABLZmrYAwAAS2Zq2QMAAEtmatoDAABLZmrbAwAAS2Zq3AMA
AEtmat0DAABLZmreAwAAS2Zq3wMAAEtmauADAABLZmrhAwAAS2Zq4gMAAEtmauMDAABLZmrkAwAA
S2Zq5QMAAEtmauYDAABLZmrnAwAAS2Zq6AMAAEtmaukDAABLZmrqAwAAS2Zq6wMAAEtmauwDAABL
ZmrtAwAAS2Zq7gMAAEtmau8DAABLZmrwAwAAS2Zq8QMAAEtmavIDAABLZmrzAwAAS2Zq9AMAAEtm
avUDAABLZmr2AwAAS2Zq9wMAAEtmavgDAABLZmr5AwAAS2Zq+gMAAEtmavsDAABLZmr8AwAAS2Zq
/QMAAEtmav4DAABLZmr/AwAAS2ZqAAQAAEtmagEEAABLZmoCBAAAS2ZqAwQAAEtmagQEAABLZmoF
BAAAS2ZqBgQAAEtmagcEAABLZmoIBAAAS2ZqCQQAAEtmagoEAABLZmoLBAAAS2ZqDAQAAEtmag0E
AABLZmoOBAAAS2ZqDwQAAEtmahAEAABLZmoRBAAAS2ZqEgQAAEtmahMEAABLZmoUBAAAS2ZqFQQA
AEtmahYEAABLZmoXBAAAS2ZqGAQAAEtmahkEAABLZmoaBAAAS2ZqGwQAAEtmahwEAABLZmodBAAA
S2ZqHgQAAEtmah8EAABLZmogBAAAS2ZqIQQAAEtmaiIEAABLZmojBAAAS2ZqJAQAAEtmaiUEAABL
ZmomBAAAS2ZqJwQAAEtmaigEAABLZmopBAAAS2ZqKgQAAEtmaisEAABLZmosBAAAS2ZqLQQAAEtm
ai4EAABLZmovBAAAS2ZqMAQAAEtmajEEAABLZmoyBAAAS2ZqMwQAAEtmajQEAABLZmo1BAAAS2Zq
NgQAAEtmajcEAABLZmo4BAAAS2ZqOQQAAEtmajoEAABLZmo7BAAAS2ZqPAQAAEtmaj0EAABLZmo+
BAAAS2ZqPwQAAEtmakAEAABLZmpBBAAAS2ZqQgQAAEtmakMEAABLZmpEBAAAS2ZqRQQAAEtmakYE
AABLZmpHBAAAS2ZqSAQAAEtmakkEAABLZmpKBAAAS2Z1dWJoCymBlH2UKGgOfZQoah0BAABdlF2U
KGpRAgAAS2SGlGpRAgAAS2SGlGVhaAZLAnVoFn2UKGokAQAAS2VqJQEAAEtljAltZW1iZXJfaWSU
S2VqJgEAAEtlaicBAABLZWooAQAAS2VqKQEAAEtlaioBAABLZWorAQAAS2VqLAEAAEtlai0BAABL
ZWouAQAAS2VqLwEAAEtlajABAABLZWpTBAAAS2VqMQEAAEtlajIBAABLZWpnBAAAS2VqXQQAAEtl
ansEAABLZWpxBAAAS2VqMwEAAEtldWgjfZQoalIDAABLZmpTAwAAS2ZqVAMAAEtmalUDAABLZmpW
AwAAS2ZqVwMAAEtmalgDAABLZmpZAwAAS2ZqWgMAAEtmalsDAABLZmpcAwAAS2ZqXQMAAEtmal4D
AABLZmpfAwAAS2ZqYAMAAEtmamEDAABLZmpiAwAAS2ZqYwMAAEtmamQDAABLZmplAwAAS2ZqZgMA
AEtmamcDAABLZmpoAwAAS2ZqaQMAAEtmamoDAABLZmprAwAAS2ZqbAMAAEtmam0DAABLZmpuAwAA
S2ZqbwMAAEtmanADAABLZmpxAwAAS2ZqcgMAAEtmanMDAABLZmp0AwAAS2ZqdQMAAEtmanYDAABL
Zmp3AwAAS2ZqeAMAAEtmankDAABLZmp6AwAAS2ZqewMAAEtmanwDAABLZmp9AwAAS2ZqfgMAAEtm
an8DAABLZmqAAwAAS2ZqgQMAAEtmaoIDAABLZmqDAwAAS2ZqhAMAAEtmaoUDAABLZmqGAwAAS2Zq
hwMAAEtmaogDAABLZmqJAwAAS2ZqigMAAEtmaosDAABLZmqMAwAAS2ZqjQMAAEtmao4DAABLZmqP
AwAAS2ZqkAMAAEtmapEDAABLZmqSAwAAS2ZqkwMAAEtmapQDAABLZmqVAwAAS2ZqlgMAAEtmapcD
AABLZmqYAwAAS2ZqmQMAAEtmapoDAABLZmqbAwAAS2ZqnAMAAEtmap0DAABLZmqeAwAAS2ZqnwMA
AEtmaqADAABLZmqhAwAAS2ZqogMAAEtmaqMDAABLZmqkAwAAS2ZqpQMAAEtmaqYDAABLZmqnAwAA
S2ZqqAMAAEtmaqkDAABLZmqqAwAAS2ZqqwMAAEtmaqwDAABLZmqtAwAAS2ZqrgMAAEtmaq8DAABL
ZmqwAwAAS2ZqsQMAAEtmarIDAABLZmqzAwAAS2ZqtAMAAEtmarUDAABLZmq2AwAAS2ZqtwMAAEtm
argDAABLZmq5AwAAS2ZqugMAAEtmarsDAABLZmq8AwAAS2ZqvQMAAEtmar4DAABLZmq/AwAAS2Zq
wAMAAEtmasEDAABLZmrCAwAAS2ZqwwMAAEtmasQDAABLZmrFAwAAS2ZqxgMAAEtmascDAABLZmrI
AwAAS2ZqyQMAAEtmasoDAABLZmrLAwAAS2ZqzAMAAEtmas0DAABLZmrOAwAAS2ZqzwMAAEtmatAD
AABLZmrRAwAAS2Zq0gMAAEtmatMDAABLZmrUAwAAS2Zq1QMAAEtmatYDAABLZmrXAwAAS2Zq2AMA
AEtmatkDAABLZmraAwAAS2Zq2wMAAEtmatwDAABLZmrdAwAAS2Zq3gMAAEtmat8DAABLZmrgAwAA
S2Zq4QMAAEtmauIDAABLZmrjAwAAS2Zq5AMAAEtmauUDAABLZmrmAwAAS2Zq5wMAAEtmaugDAABL
ZmrpAwAAS2Zq6gMAAEtmausDAABLZmrsAwAAS2Zq7QMAAEtmau4DAABLZmrvAwAAS2Zq8AMAAEtm
avEDAABLZmryAwAAS2Zq8wMAAEtmavQDAABLZmr1AwAAS2Zq9gMAAEtmavcDAABLZmr4AwAAS2Zq
+QMAAEtmavoDAABLZmr7AwAAS2Zq/AMAAEtmav0DAABLZmr+AwAAS2Zq/wMAAEtmagAEAABLZmoB
BAAAS2ZqAgQAAEtmagMEAABLZmoEBAAAS2ZqBQQAAEtmagYEAABLZmoHBAAAS2ZqCAQAAEtmagkE
AABLZmoKBAAAS2ZqCwQAAEtmagwEAABLZmoNBAAAS2ZqDgQAAEtmag8EAABLZmoQBAAAS2ZqEQQA
AEtmahIEAABLZmoTBAAAS2ZqFAQAAEtmahUEAABLZmoWBAAAS2ZqFwQAAEtmahgEAABLZmoZBAAA
S2ZqGgQAAEtmahsEAABLZmocBAAAS2ZqHQQAAEtmah4EAABLZmofBAAAS2ZqIAQAAEtmaiEEAABL
ZmoiBAAAS2ZqIwQAAEtmaiQEAABLZmolBAAAS2ZqJgQAAEtmaicEAABLZmooBAAAS2ZqKQQAAEtm
aioEAABLZmorBAAAS2ZqLAQAAEtmai0EAABLZmouBAAAS2ZqLwQAAEtmajAEAABLZmoxBAAAS2Zq
MgQAAEtmajMEAABLZmo0BAAAS2ZqNQQAAEtmajYEAABLZmo3BAAAS2ZqOAQAAEtmajkEAABLZmo6
BAAAS2ZqOwQAAEtmajwEAABLZmo9BAAAS2ZqPgQAAEtmaj8EAABLZmpABAAAS2ZqQQQAAEtmakIE
AABLZmpDBAAAS2ZqRAQAAEtmakUEAABLZmpGBAAAS2ZqRwQAAEtmakgEAABLZmpJBAAAS2ZqSgQA
AEtmdXViaAspgZR9lChoDn2UKGodAQAAXZRdlChqUQIAAEtkhpRqUQIAAEtkhpRlYWgGSwJ1aBZ9
lChqJAEAAEtlaiUBAABLZWqFBAAAS2VqJgEAAEtlaicBAABLZWooAQAAS2VqKQEAAEtlaioBAABL
ZWorAQAAS2VqLAEAAEtlai0BAABLZWouAQAAS2VqLwEAAEtlajABAABLZWpTBAAAS2VqMQEAAEtl
ajIBAABLZWpnBAAAS2VqXQQAAEtlansEAABLZWpxBAAAS2V1aCN9lChqUgMAAEtmalMDAABLZmpU
AwAAS2ZqVQMAAEtmalYDAABLZmpXAwAAS2ZqWAMAAEtmalkDAABLZmpaAwAAS2ZqWwMAAEtmalwD
AABLZmpdAwAAS2ZqXgMAAEtmal8DAABLZmpgAwAAS2ZqYQMAAEtmamIDAABLZmpjAwAAS2ZqZAMA
AEtmamUDAABLZmpmAwAAS2ZqZwMAAEtmamgDAABLZmppAwAAS2ZqagMAAEtmamsDAABLZmpsAwAA
S2ZqbQMAAEtmam4DAABLZmpvAwAAS2ZqcAMAAEtmanEDAABLZmpyAwAAS2ZqcwMAAEtmanQDAABL
Zmp1AwAAS2ZqdgMAAEtmancDAABLZmp4AwAAS2ZqeQMAAEtmanoDAABLZmp7AwAAS2ZqfAMAAEtm
an0DAABLZmp+AwAAS2ZqfwMAAEtmaoADAABLZmqBAwAAS2ZqggMAAEtmaoMDAABLZmqEAwAAS2Zq
hQMAAEtmaoYDAABLZmqHAwAAS2ZqiAMAAEtmaokDAABLZmqKAwAAS2ZqiwMAAEtmaowDAABLZmqN
AwAAS2ZqjgMAAEtmao8DAABLZmqQAwAAS2ZqkQMAAEtmapIDAABLZmqTAwAAS2ZqlAMAAEtmapUD
AABLZmqWAwAAS2ZqlwMAAEtmapgDAABLZmqZAwAAS2ZqmgMAAEtmapsDAABLZmqcAwAAS2ZqnQMA
AEtmap4DAABLZmqfAwAAS2ZqoAMAAEtmaqEDAABLZmqiAwAAS2ZqowMAAEtmaqQDAABLZmqlAwAA
S2ZqpgMAAEtmaqcDAABLZmqoAwAAS2ZqqQMAAEtmaqoDAABLZmqrAwAAS2ZqrAMAAEtmaq0DAABL
ZmquAwAAS2ZqrwMAAEtmarADAABLZmqxAwAAS2ZqsgMAAEtmarMDAABLZmq0AwAAS2ZqtQMAAEtm
arYDAABLZmq3AwAAS2ZquAMAAEtmarkDAABLZmq6AwAAS2ZquwMAAEtmarwDAABLZmq9AwAAS2Zq
vgMAAEtmar8DAABLZmrAAwAAS2ZqwQMAAEtmasIDAABLZmrDAwAAS2ZqxAMAAEtmasUDAABLZmrG
AwAAS2ZqxwMAAEtmasgDAABLZmrJAwAAS2ZqygMAAEtmassDAABLZmrMAwAAS2ZqzQMAAEtmas4D
AABLZmrPAwAAS2Zq0AMAAEtmatEDAABLZmrSAwAAS2Zq0wMAAEtmatQDAABLZmrVAwAAS2Zq1gMA
AEtmatcDAABLZmrYAwAAS2Zq2QMAAEtmatoDAABLZmrbAwAAS2Zq3AMAAEtmat0DAABLZmreAwAA
S2Zq3wMAAEtmauADAABLZmrhAwAAS2Zq4gMAAEtmauMDAABLZmrkAwAAS2Zq5QMAAEtmauYDAABL
ZmrnAwAAS2Zq6AMAAEtmaukDAABLZmrqAwAAS2Zq6wMAAEtmauwDAABLZmrtAwAAS2Zq7gMAAEtm
au8DAABLZmrwAwAAS2Zq8QMAAEtmavIDAABLZmrzAwAAS2Zq9AMAAEtmavUDAABLZmr2AwAAS2Zq
9wMAAEtmavgDAABLZmr5AwAAS2Zq+gMAAEtmavsDAABLZmr8AwAAS2Zq/QMAAEtmav4DAABLZmr/
AwAAS2ZqAAQAAEtmagEEAABLZmoCBAAAS2ZqAwQAAEtmagQEAABLZmoFBAAAS2ZqBgQAAEtmagcE
AABLZmoIBAAAS2ZqCQQAAEtmagoEAABLZmoLBAAAS2ZqDAQAAEtmag0EAABLZmoOBAAAS2ZqDwQA
AEtmahAEAABLZmoRBAAAS2ZqEgQAAEtmahMEAABLZmoUBAAAS2ZqFQQAAEtmahYEAABLZmoXBAAA
S2ZqGAQAAEtmahkEAABLZmoaBAAAS2ZqGwQAAEtmahwEAABLZmodBAAAS2ZqHgQAAEtmah8EAABL
ZmogBAAAS2ZqIQQAAEtmaiIEAABLZmojBAAAS2ZqJAQAAEtmaiUEAABLZmomBAAAS2ZqJwQAAEtm
aigEAABLZmopBAAAS2ZqKgQAAEtmaisEAABLZmosBAAAS2ZqLQQAAEtmai4EAABLZmovBAAAS2Zq
MAQAAEtmajEEAABLZmoyBAAAS2ZqMwQAAEtmajQEAABLZmo1BAAAS2ZqNgQAAEtmajcEAABLZmo4
BAAAS2ZqOQQAAEtmajoEAABLZmo7BAAAS2ZqPAQAAEtmaj0EAABLZmo+BAAAS2ZqPwQAAEtmakAE
AABLZmpBBAAAS2ZqQgQAAEtmakMEAABLZmpEBAAAS2ZqRQQAAEtmakYEAABLZmpHBAAAS2ZqSAQA
AEtmakkEAABLZmpKBAAAS2Z1dWJldS4=
</properties>
		<properties node_id="19" format="literal">{'compatibility_mode': False, 'controlAreaVisible': True, 'number_of_folds': 10, 'replacement': False, 'sampleSizeNumber': 1, 'sampleSizePercentage': 70, 'sampleSizeSqlPercentage': 0.1, 'sampleSizeSqlTime': 1, 'sampling_type': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xfb\xd4\x00\x00\x00\xfb\xff\xff\xfc\xac\x00\x00\x02\x89\xff\xff\xfb\xd5\x00\x00\x01\x10\xff\xff\xfc\xab\x00\x00\x02\x88\x00\x00\x00\x01\x00\x00\x00\x00\x07\x80\xff\xff\xfb\xd5\x00\x00\x01\x10\xff\xff\xfc\xab\x00\x00\x02\x88', 'selectedFold': 1, 'sql_dl': False, 'stratify': False, 'use_seed': True, '__version__': 2}</properties>
		<properties node_id="20" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x00\x00\x07\x7f\x00\x00\x03\x8b\x00\x00\x00\x00\x00\x00\x00\xac\x00\x00\x07\x7f\x00\x00\x03\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x07\x80\x00\x00\x00\x00\x00\x00\x00\xac\x00\x00\x07\x7f\x00\x00\x03\x8b', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import Orange\nimport numpy as np\nfrom Orange.data import Domain, Table, ContinuousVariable, StringVariable\n\ndef create_scorecard(data, model, min_score=300, max_score=850):\n    if model is None:\n        raise ValueError("O modelo não foi fornecido. Certifique-se de que o widget do modelo está conectado corretamente.")\n    \n    # Verificar se o modelo tem o atributo \'coefficients\'\n    if not hasattr(model, \'coefficients\'):\n        raise AttributeError("O modelo fornecido não tem o atributo \'coefficients\'. Certifique-se de que está usando um modelo de regressão logística ou similar.")\n    \n    # Extrair coeficientes do modelo\n    coefficients = model.coefficients\n    intercept = model.intercept  # Intercepto para o ajuste da base do score\n    \n    print(f"Coeficientes: {coefficients}")\n    print(f"Intercepto: {intercept}")\n    \n    # Achatar os coeficientes se necessário\n    if coefficients.ndim &gt; 1:\n        coefficients = coefficients.flatten()\n\n    # Verificar número de colunas nos dados transformados\n    n_features = len(data.X[0])\n    \n    print(f"Número de atributos no domínio original: {len(data.domain.attributes)}")\n    print(f"Número de colunas nos dados: {n_features}")\n    print(f"Número de coeficientes: {len(coefficients)}")\n    \n    # Garantir que o número de coeficientes corresponde ao número de atributos (colunas)\n    if len(coefficients) != n_features:\n        raise ValueError(f"Número de coeficientes ({len(coefficients)}) não corresponde ao número de colunas nos dados ({n_features})")\n\n    # Criar uma lista com os nomes dos atributos\n    attribute_names = [attr.name for attr in data.domain.attributes]\n    \n    # Calcular o scorecard baseado nos coeficientes\n    min_coef = np.min(coefficients)\n    max_coef = np.max(coefficients)\n    \n    # Normalizar os coeficientes para o intervalo de pontuação\n    scores = (coefficients - min_coef) / (max_coef - min_coef) * (max_score - min_score) + min_score\n    \n    # Adicionar o intercepto à pontuação\n    base_score = (intercept - min_coef) / (max_coef - min_coef) * (max_score - min_score) + min_score\n    \n    # Arredondar os scores para valores inteiros\n    scores = np.round(scores).astype(int)\n    base_score = np.round(base_score).astype(int)\n    \n    # Criar uma tabela no formato Orange\n    domain = Domain([\n        StringVariable("Attribute"),\n        ContinuousVariable("Coefficient"),\n        ContinuousVariable("Score")\n    ])\n\n    # Criar as colunas manualmente\n    attribute_column = np.array(attribute_names, dtype=object).reshape(-1, 1)\n    coefficient_column = coefficients.reshape(-1, 1)\n    score_column = scores.reshape(-1, 1)\n    \n    # Concatenar os atributos com coeficientes e scores\n    data_matrix = np.hstack((attribute_column, coefficient_column, score_column))\n    \n    # Criar a tabela Orange\n    scorecard_table = Table.from_numpy(domain, X=data_matrix)\n    \n    # Exibir o score base\n    print(f"Score Base (Intercepto): {base_score}")\n    \n    return scorecard_table, base_score\n\n# Código principal\nif in_data is None:\n    print("Erro: Não há dados de entrada. Certifique-se de que o widget de dados está conectado.")\n    out_object = None\nelif in_object is None:\n    print("Erro: Não há modelo de entrada. Certifique-se de que o widget do modelo está conectado.")\n    out_object = None\nelse:\n    try:\n        # Usar a função para criar o scorecard\n        scorecard, base_score = create_scorecard(in_data, in_object)\n        # Enviar o scorecard como saída\n        out_object = scorecard\n        print("Scorecard criado com sucesso!")\n        print(f"Score Base: {base_score}")\n    except Exception as e:\n        print(f"Erro ao criar o scorecard: {str(e)}")\n        out_object = None\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xac\x00\x00\x00h\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="21" format="pickle">gASVVhMAAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMC2F1dG9fc2FtcGxllIiMEmNvbnRyb2xBcmVh
VmlzaWJsZZSIjBNzYXZlZFdpZGdldEdlb21ldHJ5lENCAdnQywADAAAAAADQAAAAXQAABMoAAAJ0
AAAA0QAAAHsAAATJAAACcwAAAAAAAAAABQAAAADRAAAAewAABMkAAAJzlIwJc2VsZWN0aW9ulE6M
EXRvb2x0aXBfc2hvd3NfYWxslIiMD3Zpc3VhbF9zZXR0aW5nc5R9lIwFZ3JhcGiUfZQojAthbHBo
YV92YWx1ZZRLv4wNY2xhc3NfZGVuc2l0eZSJjBFqaXR0ZXJfY29udGludW91c5SJjAtqaXR0ZXJf
c2l6ZZRLAIwTbGFiZWxfb25seV9zZWxlY3RlZJSJjBZvcnRob25vcm1hbF9yZWdyZXNzaW9ulImM
C3BvaW50X3dpZHRolEsHjAxzaG93X2VsbGlwc2WUiYwJc2hvd19ncmlklImMC3Nob3dfbGVnZW5k
lIiMDXNob3dfcmVnX2xpbmWUiHWMC19fdmVyc2lvbl9flEsFjBBjb250ZXh0X3NldHRpbmdzlF2U
KIwVb3Jhbmdld2lkZ2V0LnNldHRpbmdzlIwHQ29udGV4dJSTlCmBlH2UKIwGdmFsdWVzlH2UKIwK
YXR0cl9jb2xvcpSMCGdvb2RfYmFklEtlhpSMCmF0dHJfbGFiZWyUTkr+////hpSMCmF0dHJfc2hh
cGWUTkr+////hpSMCWF0dHJfc2l6ZZROSv7///+GlIwGYXR0cl94lIwIaW50X3JhdGWUS2aGlIwG
YXR0cl95lIwLaW5zdGFsbG1lbnSUS2aGlGgKfZRoF0sFdYwKYXR0cmlidXRlc5R9lCiMCUZlYXR1
cmUgMZRLAowKVW5uYW1lZDogMJRLAowCaWSUSwKMCW1lbWJlcl9pZJRLAowJbG9hbl9hbW50lEsC
jAtmdW5kZWRfYW1udJRLAowPZnVuZGVkX2FtbnRfaW52lEsCjAR0ZXJtlEsBaCtLAmguSwKMBWdy
YWRllEsBjAlzdWJfZ3JhZGWUSwGMCmVtcF9sZW5ndGiUSwGMDmhvbWVfb3duZXJzaGlwlEsBjAph
bm51YWxfaW5jlEsCjBN2ZXJpZmljYXRpb25fc3RhdHVzlEsBjAdpc3N1ZV9klEsBjAtsb2FuX3N0
YXR1c5RLAYwKcHltbnRfcGxhbpRLAYwHcHVycG9zZZRLAYwKYWRkcl9zdGF0ZZRLAYwDZHRplEsC
jAtkZWxpbnFfMnlyc5RLAowOaW5xX2xhc3RfNm10aHOUSwKMFm10aHNfc2luY2VfbGFzdF9kZWxp
bnGUSwKMFm10aHNfc2luY2VfbGFzdF9yZWNvcmSUSwKMCG9wZW5fYWNjlEsCjAdwdWJfcmVjlEsC
jAlyZXZvbF9iYWyUSwKMCnJldm9sX3V0aWyUSwKMCXRvdGFsX2FjY5RLAowTaW5pdGlhbF9saXN0
X3N0YXR1c5RLAYwJb3V0X3BybmNwlEsCjA1vdXRfcHJuY3BfaW52lEsCjAt0b3RhbF9weW1udJRL
AowPdG90YWxfcHltbnRfaW52lEsCjA90b3RhbF9yZWNfcHJuY3CUSwKMDXRvdGFsX3JlY19pbnSU
SwKMEnRvdGFsX3JlY19sYXRlX2ZlZZRLAowKcmVjb3Zlcmllc5RLAowXY29sbGVjdGlvbl9yZWNv
dmVyeV9mZWWUSwKMDGxhc3RfcHltbnRfZJRLAYwPbGFzdF9weW1udF9hbW50lEsCjBpjb2xsZWN0
aW9uc18xMl9tdGhzX2V4X21lZJRLAowbbXRoc19zaW5jZV9sYXN0X21ham9yX2Rlcm9nlEsCjAtw
b2xpY3lfY29kZZRLAYwQYXBwbGljYXRpb25fdHlwZZRLAYwQYW5udWFsX2luY19qb2ludJRLAowJ
ZHRpX2pvaW50lEsCjBl2ZXJpZmljYXRpb25fc3RhdHVzX2pvaW50lEsCjA5hY2Nfbm93X2RlbGlu
cZRLAowMdG90X2NvbGxfYW10lEsCjAt0b3RfY3VyX2JhbJRLAowLb3Blbl9hY2NfNm2USwKMCm9w
ZW5faWxfNm2USwKMC29wZW5faWxfMTJtlEsCjAtvcGVuX2lsXzI0bZRLAowSbXRoc19zaW5jZV9y
Y250X2lslEsCjAx0b3RhbF9iYWxfaWyUSwKMB2lsX3V0aWyUSwKMC29wZW5fcnZfMTJtlEsCjAtv
cGVuX3J2XzI0bZRLAowKbWF4X2JhbF9iY5RLAowIYWxsX3V0aWyUSwKMEHRvdGFsX3Jldl9oaV9s
aW2USwKMBmlucV9maZRLAowLdG90YWxfY3VfdGyUSwKMDGlucV9sYXN0XzEybZRLAowOZW1wX2xl
bmd0aF9pbnSUSwKMFWVhcmxpZXN0X2NyX2xpbmVfZGF0ZZRLBIwbbXRoc19zaW5jZV9lYXJsaWVz
dF9jcl9saW5llEsCjAh0ZXJtX2ludJRLAowMaXNzdWVfZF9kYXRllEsEjBJtdGhzX3NpbmNlX2lz
c3VlX2SUSwJoIksBdYwFbWV0YXOUfZQojAllbXBfdGl0bGWUSwOMA3VybJRLA4wEZGVzY5RLA4wF
dGl0bGWUSwOMCHppcF9jb2RllEsDjBBlYXJsaWVzdF9jcl9saW5llEsDjAxuZXh0X3B5bW50X2SU
SwOMEmxhc3RfY3JlZGl0X3B1bGxfZJRLA3V1YmgcKYGUfZQoaB99lChoIYwIZ29vZF9iYWSUS2WG
lGgkTkr+////hpRoJk5K/v///4aUaChOSv7///+GlGgqjAhpbnRfcmF0ZZRLZoaUaC2MC2luc3Rh
bGxtZW50lEtmhpRoCn2UaBdLBXVoMX2UKIwJRmVhdHVyZSAxlEsCjApVbm5hbWVkOiAwlEsCjAJp
ZJRLAowJbWVtYmVyX2lklEsCjAlsb2FuX2FtbnSUSwKMC2Z1bmRlZF9hbW50lEsCjA9mdW5kZWRf
YW1udF9pbnaUSwKMBHRlcm2USwGMCGludF9yYXRllEsCjAtpbnN0YWxsbWVudJRLAowFZ3JhZGWU
SwGMCXN1Yl9ncmFkZZRLAYwKZW1wX2xlbmd0aJRLAYwOaG9tZV9vd25lcnNoaXCUSwGMCmFubnVh
bF9pbmOUSwKME3ZlcmlmaWNhdGlvbl9zdGF0dXOUSwGMB2lzc3VlX2SUSwGMC2xvYW5fc3RhdHVz
lEsBjApweW1udF9wbGFulEsBjAdwdXJwb3NllEsBjAphZGRyX3N0YXRllEsBjANkdGmUSwKMC2Rl
bGlucV8yeXJzlEsCjA5pbnFfbGFzdF82bXRoc5RLAowWbXRoc19zaW5jZV9sYXN0X2RlbGlucZRL
AowWbXRoc19zaW5jZV9sYXN0X3JlY29yZJRLAowIb3Blbl9hY2OUSwKMB3B1Yl9yZWOUSwKMCXJl
dm9sX2JhbJRLAowKcmV2b2xfdXRpbJRLAowJdG90YWxfYWNjlEsCjBNpbml0aWFsX2xpc3Rfc3Rh
dHVzlEsBjAlvdXRfcHJuY3CUSwKMDW91dF9wcm5jcF9pbnaUSwKMC3RvdGFsX3B5bW50lEsCjA90
b3RhbF9weW1udF9pbnaUSwKMD3RvdGFsX3JlY19wcm5jcJRLAowNdG90YWxfcmVjX2ludJRLAowS
dG90YWxfcmVjX2xhdGVfZmVllEsCjApyZWNvdmVyaWVzlEsCjBdjb2xsZWN0aW9uX3JlY292ZXJ5
X2ZlZZRLAowMbGFzdF9weW1udF9klEsBjA9sYXN0X3B5bW50X2FtbnSUSwKMDG5leHRfcHltbnRf
ZJRLAYwSbGFzdF9jcmVkaXRfcHVsbF9klEsBjBpjb2xsZWN0aW9uc18xMl9tdGhzX2V4X21lZJRL
AYwbbXRoc19zaW5jZV9sYXN0X21ham9yX2Rlcm9nlEsCjAtwb2xpY3lfY29kZZRLAYwQYXBwbGlj
YXRpb25fdHlwZZRLAYwQYW5udWFsX2luY19qb2ludJRLAowJZHRpX2pvaW50lEsCjBl2ZXJpZmlj
YXRpb25fc3RhdHVzX2pvaW50lEsCjA5hY2Nfbm93X2RlbGlucZRLAYwMdG90X2NvbGxfYW10lEsC
jAt0b3RfY3VyX2JhbJRLAowLb3Blbl9hY2NfNm2USwKMCm9wZW5faWxfNm2USwKMC29wZW5faWxf
MTJtlEsCjAtvcGVuX2lsXzI0bZRLAowSbXRoc19zaW5jZV9yY250X2lslEsCjAx0b3RhbF9iYWxf
aWyUSwKMB2lsX3V0aWyUSwKMC29wZW5fcnZfMTJtlEsCjAtvcGVuX3J2XzI0bZRLAowKbWF4X2Jh
bF9iY5RLAowIYWxsX3V0aWyUSwKMEHRvdGFsX3Jldl9oaV9saW2USwKMBmlucV9maZRLAowLdG90
YWxfY3VfdGyUSwKMDGlucV9sYXN0XzEybZRLAowOZW1wX2xlbmd0aF9pbnSUSwKMFWVhcmxpZXN0
X2NyX2xpbmVfZGF0ZZRLBIwbbXRoc19zaW5jZV9lYXJsaWVzdF9jcl9saW5llEsCjAh0ZXJtX2lu
dJRLAowMaXNzdWVfZF9kYXRllEsEjBJtdGhzX3NpbmNlX2lzc3VlX2SUSwKMCGdvb2RfYmFklEsB
dWh7fZQojAllbXBfdGl0bGWUSwOMA3VybJRLA4wEZGVzY5RLA4wFdGl0bGWUSwOMCHppcF9jb2Rl
lEsDjBBlYXJsaWVzdF9jcl9saW5llEsDdXViaBwpgZR9lChoH32UKIwKYXR0cl9jb2xvcpSMCGdv
b2RfYmFklEtlhpSMCmF0dHJfbGFiZWyUTkr+////hpSMCmF0dHJfc2hhcGWUTkr+////hpSMCWF0
dHJfc2l6ZZROSv7///+GlIwGYXR0cl94lIwIaW50X3JhdGWUS2aGlIwGYXR0cl95lIwLaW5zdGFs
bG1lbnSUS2aGlIwFZ3JhcGiUfZRoF0sFdWgxfZQojAlGZWF0dXJlIDGUSwKMCWxvYW5fYW1udJRL
AowLZnVuZGVkX2FtbnSUSwKMBHRlcm2USwFo9EsCaPdLAowFZ3JhZGWUSwGMCXN1Yl9ncmFkZZRL
AYwKZW1wX2xlbmd0aJRLAYwOaG9tZV9vd25lcnNoaXCUSwGMCmFubnVhbF9pbmOUSwKME3Zlcmlm
aWNhdGlvbl9zdGF0dXOUSwGMB2lzc3VlX2SUSwGMC2xvYW5fc3RhdHVzlEsBjAdwdXJwb3NllEsB
jAphZGRyX3N0YXRllEsBjANkdGmUSwKMC2RlbGlucV8yeXJzlEsCjA5pbnFfbGFzdF82bXRoc5RL
AowWbXRoc19zaW5jZV9sYXN0X2RlbGlucZRLAowWbXRoc19zaW5jZV9sYXN0X3JlY29yZJRLAowI
b3Blbl9hY2OUSwKMB3B1Yl9yZWOUSwKMCXJldm9sX2JhbJRLAowKcmV2b2xfdXRpbJRLAowJdG90
YWxfYWNjlEsCjBNpbml0aWFsX2xpc3Rfc3RhdHVzlEsBjAlvdXRfcHJuY3CUSwKMC3RvdGFsX3B5
bW50lEsCjA90b3RhbF9yZWNfcHJuY3CUSwKMDXRvdGFsX3JlY19pbnSUSwKMEnRvdGFsX3JlY19s
YXRlX2ZlZZRLAowKcmVjb3Zlcmllc5RLAowXY29sbGVjdGlvbl9yZWNvdmVyeV9mZWWUSwKMDGxh
c3RfcHltbnRfZJRLAYwPbGFzdF9weW1udF9hbW50lEsCjBpjb2xsZWN0aW9uc18xMl9tdGhzX2V4
X21lZJRLAYwbbXRoc19zaW5jZV9sYXN0X21ham9yX2Rlcm9nlEsCjBBhbm51YWxfaW5jX2pvaW50
lEsCjAlkdGlfam9pbnSUSwKMGXZlcmlmaWNhdGlvbl9zdGF0dXNfam9pbnSUSwKMDmFjY19ub3df
ZGVsaW5xlEsBjAx0b3RfY29sbF9hbXSUSwKMC3RvdF9jdXJfYmFslEsCjAtvcGVuX2FjY182bZRL
AowKb3Blbl9pbF82bZRLAowLb3Blbl9pbF8xMm2USwKMC29wZW5faWxfMjRtlEsCjBJtdGhzX3Np
bmNlX3JjbnRfaWyUSwKMDHRvdGFsX2JhbF9pbJRLAowHaWxfdXRpbJRLAowLb3Blbl9ydl8xMm2U
SwKMC29wZW5fcnZfMjRtlEsCjAptYXhfYmFsX2JjlEsCjAhhbGxfdXRpbJRLAowQdG90YWxfcmV2
X2hpX2xpbZRLAowGaW5xX2ZplEsCjAt0b3RhbF9jdV90bJRLAowMaW5xX2xhc3RfMTJtlEsCjA5l
bXBfbGVuZ3RoX2ludJRLAowVZWFybGllc3RfY3JfbGluZV9kYXRllEsEjBttdGhzX3NpbmNlX2Vh
cmxpZXN0X2NyX2xpbmWUSwKMCHRlcm1faW50lEsCjAxpc3N1ZV9kX2RhdGWUSwSMEm10aHNfc2lu
Y2VfaXNzdWVfZJRLAmjrSwF1aHt9lCiMBGRlc2OUSwOMEGVhcmxpZXN0X2NyX2xpbmWUSwN1dWJl
dS4=
</properties>
		<properties node_id="22" format="literal">{'autocommit': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf8\x7f\xff\xff\xff\xca\x00\x00\x00\x00\x00\x00\x03\xd0\xff\xff\xfc\xac\x00\x00\x00\xde\xff\xff\xfe\xe1\x00\x00\x01\xb9\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf', 'storedsettings': {'name': '', 'preprocessors': [('orange.preprocess.fss', {'k': 10, 'p': 75.0, 'score': 5, 'strategy': 1}), ('orange.preprocess.impute', {'method': 5}), ('orange.preprocess.discretize', {'method': 4})]}, '__version__': 2}</properties>
		<properties node_id="23" format="pickle">gASV7wIAAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNzYXZlZFdpZGdldEdlb21ldHJ5
lENCAdnQywADAAAAAAI7AAABBwAABy0AAAN7AAACOwAAASwAAActAAADewAAAAAAAAAAB4AAAAI7
AAABLAAABy0AAAN7lIwJc2VsZWN0aW9ulF2UjAtzaG93X3Njb3Jlc5SIjAtzY29yZV90YWJsZZR9
lIwQc2hvd19zY29yZV9oaW50c5R9lCiMBk1vZGVsX5SIjAZUcmFpbl+UiYwFVGVzdF+UiYwCQ0GU
iIwXUHJlY2lzaW9uUmVjYWxsRlN1cHBvcnSUiIwLVGFyZ2V0U2NvcmWUiIwJUHJlY2lzaW9ulIiM
BlJlY2FsbJSIjAJGMZSIjANBVUOUiIwHTG9nTG9zc5SJjAtTcGVjaWZpY2l0eZSJjBdNYXR0aGV3
c0NvcnJDb2VmZmljaWVudJSIjANNU0WUiIwEUk1TRZSIjANNQUWUiIwETUFQRZSIjAJSMpSIjAZD
VlJNU0WUiYwPQ2x1c3RlcmluZ1Njb3JllIiMClNpbGhvdWV0dGWUiIwXQWRqdXN0ZWRNdXR1YWxJ
bmZvU2NvcmWUiHVzjAtfX3ZlcnNpb25fX5RLAowQY29udGV4dF9zZXR0aW5nc5RdlCiMFW9yYW5n
ZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9lCiMBnZhbHVlc5R9lCiMF3Nob3dfcHJv
YmFiaWxpdHlfZXJyb3JzlIiMD3Nob3dfcmVnX2Vycm9yc5RLAYwLc2hvd25fcHJvYnOUSwGMDHRh
cmdldF9jbGFzc5SMFihBdmVyYWdlIG92ZXIgY2xhc3NlcymUaAd9lGghSwJ1jAdjbGFzc2VzlIwB
MJSMATGUhpR1YmgmKYGUfZQoaCl9lChoK4hoLEsBaC1LAGgujBYoQXZlcmFnZSBvdmVyIGNsYXNz
ZXMplGgHfZRoIUsCdWgxKXViZXUu
</properties>
		<properties node_id="24" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x02\x80\x00\x00\x01\x07\x00\x00\x04\xff\x00\x00\x03\x0b\x00\x00\x02\x80\x00\x00\x01,\x00\x00\x04\xff\x00\x00\x03\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x07\x80\x00\x00\x02\x80\x00\x00\x01,\x00\x00\x04\xff\x00\x00\x03\x0b', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rows': [], 'columns': []}, 'stored_sort': [], '__version__': 1}</properties>
		<properties node_id="25" format="literal">{'C_index': 61, 'auto_apply': True, 'class_weight': False, 'controlAreaVisible': True, 'learner_name': '', 'penalty_type': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x02\x18\x00\x00\x00\xd5\x00\x00\x02\xe9\x00\x00\x01\xe9\x00\x00\x02\x19\x00\x00\x00\xf3\x00\x00\x02\xe8\x00\x00\x01\xe8\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x02\x19\x00\x00\x00\xf3\x00\x00\x02\xe8\x00\x00\x01\xe8', '__version__': 2}</properties>
		<properties node_id="26" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf8\x7f\xff\xff\xff\xca\x00\x00\x00\x00\x00\x00\x03\xd0\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table\n\ndef plot_bar_distribution(in_data, target_variable=\'int_rate\', group_by=\'grade\', figsize=(10, 6)):\n    try:\n        # Convert Orange data to pandas DataFrame\n        data = pd.DataFrame({\n            var.name: in_data.get_column(var.name)\n            for var in in_data.domain.variables\n        })\n\n        # Ensure the target_variable and group_by exist in the DataFrame\n        if target_variable not in data.columns or group_by not in data.columns:\n            raise ValueError(f"\'{target_variable}\' or \'{group_by}\' is not in the dataset.")\n\n        # Calculate mean of target_variable for each group\n        grouped_data = data.groupby(group_by)[target_variable].mean().reset_index()\n\n        # Sort values in descending order based on target_variable\n        grouped_data = grouped_data.sort_values(by=target_variable, ascending=False)\n\n        # Create the bar plot\n        plt.figure(figsize=figsize)\n        bars = plt.bar(grouped_data[group_by], grouped_data[target_variable], color=\'#16A2F0\')\n\n        # Highlight the tallest bar with a darker shade of blue\n        bars[0].set_color(\'#0E2E98\')  # The first bar is the tallest due to sorting\n\n        # Customize plot appearance\n        plt.title(f\'Average {target_variable} by {group_by}\')\n        plt.xlabel(group_by.capitalize())\n        plt.ylabel(f\'Average {target_variable}\')\n        plt.xticks(rotation=45, ha=\'right\')  # Rotate labels for better readability\n        plt.grid(True, axis=\'y\', linestyle=\'--\', alpha=0.7)\n        plt.gca().invert_xaxis()  # Invert the X-axis to show descending order left to right\n        plt.tight_layout()\n\n        # Show plot\n        plt.show()\n\n    except Exception as e:\n        print(f"Error creating the bar plot: {str(e)}")\n        return None\n\n# Usage of the function\nif \'in_data\' in globals() and isinstance(in_data, Table):\n    plot_bar_distribution(in_data, target_variable=\'int_rate\', group_by=\'grade\', figsize=(10, 6))\nelse:\n    print("No input data provided or data is not an Orange Table.")', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xac\x00\x00\x00h\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="27" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x07\x80\x00\x00\x00\x00\x00\x00\x0e\xff\x00\x00\x047\x00\x00\x07\x80\x00\x00\x00%\x00\x00\x0e\xff\x00\x00\x047\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\x00\x00\x07\x80\x00\x00\x00%\x00\x00\x0e\xff\x00\x00\x047', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rows': [], 'columns': []}, 'stored_sort': [], '__version__': 1}</properties>
		<properties node_id="28" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf8\x7f\xff\xff\xff\xca\x00\x00\x00\x00\x00\x00\x03\xd0\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable\n\ndef calculate_score(probability):\n    """\n    Calcula o score baseado na probabilidade, em uma escala de 300 a 850.\n    Usa uma função linear para garantir uma distribuição uniforme dos scores.\n    """\n    min_score = 300\n    max_score = 850\n    return int(min_score + (max_score - min_score) * probability)\n\nif \'in_data\' in globals() and isinstance(in_data, Table):\n    prob_col = next((var for var in in_data.domain.metas if var.name == "Logistic Regression (1)"), None)\n    \n    if prob_col is not None:\n        probabilities = in_data.get_column(prob_col)\n        \n        scores = np.array([calculate_score(p) for p in probabilities])\n        \n        rankings = np.argsort(np.argsort(-scores)) + 1\n        \n        new_domain = Domain(\n            in_data.domain.attributes,\n            in_data.domain.class_vars,\n            in_data.domain.metas + (ContinuousVariable("Score"), ContinuousVariable("Ranking"))\n        )\n        \n        out_data = Table.from_numpy(\n            domain=new_domain,\n            X=in_data.X,\n            Y=in_data.Y,\n            metas=np.column_stack((in_data.metas, scores, rankings))\n        )\n        \n        sorted_indices = np.argsort(scores)[::-1]\n        out_data = out_data[sorted_indices]\n        \n        print(f"Número de scores únicos: {len(np.unique(scores))}")\n        print(f"Score mínimo: {np.min(scores)}, Score máximo: {np.max(scores)}")\n        print(f"Média dos scores: {np.mean(scores):.2f}, Desvio padrão: {np.std(scores):.2f}")\n        \n        intervals = np.linspace(300, 850, num=12)\n        hist, _ = np.histogram(scores, bins=intervals)\n        print("\\nDistribuição dos scores:")\n        for i in range(len(hist)):\n            print(f"{intervals[i]:.0f}-{intervals[i+1]:.0f}: {hist[i]}")\n        \n    else:\n        print("Coluna \'Logistic Regression (1)\' não encontrada nos metadados.")\n        out_data = in_data  \nelse:\n    print("Dados de entrada não disponíveis ou não são do tipo Orange.data.Table")\n    out_data = None ', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xac\x00\x00\x00h\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="29" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xff\xff\xff\xff\xff\xf9\x00\x00\x05\x00\x00\x00\x02\xa0\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x04\xff\x00\x00\x02\x9f\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x04\xff\x00\x00\x02\x9f', 'select_rows': True, 'show_attribute_labels': True, 'show_distributions': False, 'stored_selection': {'rows': [0], 'columns': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]}, 'stored_sort': [], '__version__': 1}</properties>
		<properties node_id="30" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xf8\x7f\xff\xff\xff\xca\x00\x00\x00\x00\x00\x00\x03\xd0\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf\x00\x00\x00\x01\x02\x00\x00\x00\x07\x80\xff\xff\xf8\x80\xff\xff\xff\xdf\xff\xff\xff\xff\x00\x00\x03\xcf', 'scriptLibrary': [{'name': 'Table from numpy', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': "\n    \n    # Convertendo o Orange Table para um DataFrame pandas\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n    \n    # Extrair dados do Orange Table\npurpose_sum = defaultdict(float)\nfor row in in_data:\n    purpose = row['Purpose'].value\n    credit_amount = float(row['Credit amount'])\n    purpose_sum[purpose] += credit_amount\n    \n    # Ordenar os dados\nsorted_data = sorted(purpose_sum.items(), key=lambda x: x[1], reverse=True)\npurposes, amounts = zip(*sorted_data)\n    \n    # Criar o gráfico de barras\nplt.figure(figsize=(10, 6))\nplt.bar(purposes, amounts)\nplt.title('Soma de Crédito por Propósito')\nplt.xlabel('Propósito')\nplt.ylabel('Soma do Montante de Crédito')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n    \nreturn in_data \n    \n\n", 'filename': None}, {'name': 'New script', 'script': 'import matplotlib.pyplot as plt\nimport pandas as pd\nfrom Orange.data import Table, Domain, ContinuousVariable\n\n# Convertendo os dados de entrada do Orange para um DataFrame do Pandas\ndata = pd.DataFrame(in_data.X, columns=[var.name for var in in_data.domain.attributes])\ntarget = pd.Series(in_data.Y, name=in_data.domain.class_var.name)\n\n# Verifique se os dados possuem as variáveis "grade", "Good", "Bad" e "WoE"\nif \'grade\' in data.columns and \'WoE\' in data.columns and \'Good\' in data.columns and \'Bad\' in data.columns:\n    \n    # Definir as categorias (grade), WoE e as taxas de inadimplência (Good e Bad)\n    categories = data[\'grade\']\n    woe = data[\'WoE\'].astype(\'float\')\n    good_row = data[\'Good\'].astype(\'float\')  # Substituir pela sua variável de bons pagadores\n    bad_row = data[\'Bad\'].astype(\'float\')  # Substituir pela sua variável de maus pagadores\n\n    # Criação da figura com subplots\n    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Gráfico de barras empilhadas para taxa de inadimplência\n    bad_bars = ax[0].barh(y=categories, width=bad_row, color=\'#8d0801\', label=\'Bad\')\n    good_bars = ax[0].barh(y=categories, width=good_row, left=bad_row, color=\'#8a817c\', label=\'Good\')\n\n    # Anotando valores percentuais dentro de cada barra\n    for good_bar, bad_bar, good_rate, bad_rate in zip(good_bars, bad_bars, good_row, bad_row):\n        x_position_good = good_bar.get_x() + good_bar.get_width() / 2\n        x_position_bad = bad_bar.get_x() + bad_bar.get_width() / 2  \n        y_position = good_bar.get_y() + good_bar.get_height() / 2\n\n        ax[0].text(x_position_good, y_position, f\'{good_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n        ax[0].text(x_position_bad, y_position, f\'{bad_rate:.2f}%\', ha=\'center\', va=\'center\', color=\'white\', fontsize=10)\n\n    ax[0].set_title(\'Default rate by Grade\')\n    ax[0].invert_yaxis()\n    ax[0].grid(False)\n    ax[0].legend(bbox_to_anchor=(-0.2, 1.1), loc=\'upper left\')\n\n    # Gráfico de linha para WoE\n    ax[1].plot(categories, woe, marker=\'o\', linestyle=\'--\')\n    ax[1].set_title(\'WoE by Grade\')\n    ax[1].set_xticks(categories.unique())\n    \n    plt.tight_layout()\n    plt.show()\n\n# Convertendo o DataFrame de volta para uma tabela do Orange\ndomain = Domain([ContinuousVariable(col) for col in data.columns])\nout_data = Table.from_numpy(domain, data.to_numpy())\n', 'filename': None}], 'scriptText': 'import matplotlib.pyplot as plt\nfrom Orange.data import Table\nimport numpy as np\n\ndef plot_by_variable(in_data, features, mean=None, text_y=0.2, figsize=(12, 8)):\n    try:\n        for feature in features:\n            feature_data = in_data.get_column_view(feature)[0]\n            feature_values = [str(value) for value in in_data.domain[feature].values]  \n\n            if mean:\n                mean_data = in_data.get_column_view(mean)[0]  \n                \n            unique_values, counts = np.unique(feature_data, return_counts=True)\n\n            if mean:\n                mean_values = [mean_data[feature_data == val].mean() for val in unique_values]\n                data_grouped = list(zip(unique_values, mean_values))\n            else:\n                pct_values = (counts / counts.sum()) * 100\n                data_grouped = list(zip(unique_values, pct_values))\n\n            data_grouped.sort(key=lambda x: x[1], reverse=True)\n            \n            colors = [\'#0E2E98\' if i == 0 else \'#A3C1F0\' for i in range(len(data_grouped))]\n\n            fig, ax = plt.subplots(figsize=figsize)\n\n            labels = [feature_values[int(val)] for val, _ in data_grouped]\n            values = [val for _, val in data_grouped]\n\n            bars = ax.barh(range(len(labels)), values, color=colors)\n\n            for index, value in enumerate(values):\n                ax.text(value + text_y, index, f\'{value:.1f}%\', va=\'center\', fontsize=15)\n\n            ax.set_yticks(range(len(labels)))\n            ax.set_yticklabels(labels, fontsize=15)  \n            ax.spines[\'top\'].set_visible(False)\n            ax.spines[\'right\'].set_visible(False)\n            ax.spines[\'bottom\'].set_visible(False)\n            ax.spines[\'left\'].set_visible(False)\n            ax.grid(False)\n            ax.get_xaxis().set_visible(False)\n\n            ax.set_title(f\'Distribuição {feature}\', fontsize=18)\n\n            plt.tight_layout()\n            plt.show()\n\n        return None  \n\n    except Exception as e:\n        print(f"Error creating the plot: {str(e)}")\n        return None\n\n# Exemplo de uso\nif in_data is not None:\n    out_data = plot_by_variable(in_data, features=[\'purpose\', \'grade\', \'home_ownership\'], mean=None, text_y=0.2)\nelse:\n    print("No input data provided.")\n    out_data = None\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xa2\x00\x00\x00^\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
